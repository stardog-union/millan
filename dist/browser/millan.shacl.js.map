{"version":3,"sources":["webpack://millan.[name]/webpack/universalModuleDefinition","webpack://millan.[name]/webpack/bootstrap","webpack://millan.[name]/./src/sparql/keywords.ts","webpack://millan.[name]/./src/turtle/TurtleParser.ts","webpack://millan.[name]/./src/helpers/regex.ts","webpack://millan.[name]/./src/helpers/matchers.ts","webpack://millan.[name]/./src/sparql/terminals.ts","webpack://millan.[name]/./src/helpers/types.ts","webpack://millan.[name]/./src/shacl/tokens.ts","webpack://millan.[name]/./src/sparql/tokens.ts","webpack://millan.[name]/./src/shacl/visitor.ts","webpack://millan.[name]/./src/shacl/ShaclParser.ts","webpack://millan.[name]/./src/shacl/index.ts","webpack://millan.[name]/./src/helpers/cst.ts","webpack://millan.[name]/./src/helpers/unescape.ts","webpack://millan.[name]/./src/turtle/tokens.ts"],"names":["root","factory","exports","module","define","amd","self","this","webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","3","1","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","oldJsonpFunction","slice","__webpack_exports__","keywords","chevrotain__WEBPACK_IMPORTED_MODULE_0__","MAX_LENGTH","pattern","SELECT","CONSTRUCT","DISTINCT","START","END","VIA","PATHS","PATHS_ALL","PATHS_SHORTEST","CYCLIC","AS","WHERE","A","GROUP_BY","ORDER_BY","BY","BASE","PREFIX","DESCRIBE","ASK","FROM","REDUCED","NAMED","HAVING","ASC","DESC","OFFSET","LIMIT","VALUES","LOAD","SILENT","INTO","CLEAR","DROP","CREATE","ADD","TO","MOVE","COPY","INSERT_DATA","DELETE_DATA","DELETE_WHERE","WITH","DELETE","INSERT","USING","DEFAULT","GRAPH","ALL","OPTIONAL","SERVICE","BIND","UNNEST","UNDEF","MINUS","UNION","FILTER","STR","LANG","LANGMATCHES","DATATYPE","BOUND","IRI","URI","BNODE","RAND","ABS","CEIL","FLOOR","ROUND","CONCAT","STRLEN","UCASE","LCASE","ENCODE_FOR_URI","CONTAINS","STRSTARTS","STRENDS","STRBEFORE","STRAFTER","YEAR","MONTH","DAY","HOURS","MINUTES","SECONDS","TIMEZONE","TZ","NOW","UUID","STRUUID","MD5","SHA1","SHA256","SHA384","SHA512","COALESCE","IF","STRLANG","STRDT","sameTerm","isIRI","isURI","isBLANK","isLITERAL","isNUMERIC","REGEX","SUBSTR","REPLACE","EXISTS","NOT_EXISTS","COUNT","SUM","MIN","AVG","SAMPLE","GROUP_CONCAT","SEPARATOR","TRUE","FALSE","IN","NOT_IN","MAX","longer_alt","TurtleParser","extendStatics","__extends","b","setPrototypeOf","__proto__","Array","__","constructor","__assign","assign","arguments","_a","turtleTokenTypes","turtleTokenMap","_super","config","tokens","lexerDefinition","performSelfAnalysis","_this","outputCst","recoveryEnabled","namespacesMap","semanticErrors","resetManagedState","tokenize","document","lexer","parse","input","cst","turtleDoc","errors","RULE","allowEdgeProperties","MANY","SUBRULE","statement","ARGS","OR","ALT","directive","triples","CONSUME","Period","prefixID","base","sparqlPrefix","sparqlBase","TTL_PREFIX","pnameNsToken","PNAME_NS","iriToken","IRIREF","pnameImageWithoutColon","image","iriImage","TTL_BASE","subject","SUBRULE1","predicateObjectList","GATE","Boolean","EmbeddedTriplePattern","blankNodePropertyList","OPTION","SUBRULE2","LEmbed","REmbed","verb","objectList","EmbeddedPredicateObjectList","Semicolon","OR1","LCurly","RCurly","iri","BlankNode","collection","predicate","Comma","literal","RDFLiteral","NumericLiteral","BooleanLiteral","LBracket","RBracket","LParen","RParen","INTEGER","DECIMAL","DOUBLE","String","LANGTAG","DoubleCaret","STRING_LITERAL_QUOTE","STRING_LITERAL_SINGLE_QUOTE","STRING_LITERAL_LONG_SINGLE_QUOTE","STRING_LITERAL_LONG_QUOTE","PrefixedName","prefixedNameToken","PNAME_LN","indexOf","message","token","context","ruleStack","getHumanReadableRuleStack","ruleOccurrenceStack","RULE_OCCURRENCE_STACK","resyncedTokens","BLANK_NODE_LABEL","ANON","regex","or","_i","RegExp","map","source","join","and","option","many","CATCH_ALL_AT_LEAST_ONE","PN_CHARS_BASE","EXPONENT","ECHAR","HEX","PN_LOCAL_ESC","PN_CHARS_U","PN_CHARS","PN_PREFIX","PERCENT","PLX","PN_LOCAL","NIL","STRING_LITERAL1","STRING_LITERAL2","STRING_LITERAL_LONG1","STRING_LITERAL_LONG2","INTEGER_POSITIVE","DECIMAL_POSITIVE","DOUBLE_POSITIVE","INTEGER_NEGATIVE","DECIMAL_NEGATIVE","DOUBLE_NEGATIVE","VAR1","VAR2","_regex__WEBPACK_IMPORTED_MODULE_0__","WS","VARNAME","terminals","helpers_matchers__WEBPACK_IMPORTED_MODULE_1__","STRING_LITERAL_LONG1_TOKEN","STRING_LITERAL_LONG2_TOKEN","PNAME_LN_TOKEN","label","getAsTypedTuple","args","categoryTokenMap","categoryTokens","getShaclTokenMap","getShaclTokenTypes","tokens_a","sparqlTokenMap","ManyIriTakingPredicate","api","NA","SingleIriTakingPredicate","NodeKindIRI","IntTakingPredicate","StringLiteralQuoteTakingPredicate","LangStringTakingPredicate","BooleanTakingPredicate","ShapeExpectingPredicate","AnyLiteralTakingPredicate","keys","localNamesByCategory","other","xsdLocalNames","localNameToCategoryMap","reduce","nameToCategoryMap","category","forEach","localName","localNames","xsdUnprefixedTokenMap","tokenMap","tokenName","iriTokenName","iriOrPrefixCategoryToken","categories","shaclUnprefixedTokenMap","categoryToken","makePrefixer","prefix","memoize_one_esm","prefixes","prefixWithShacl","shacl","prefixWithXsd","xsd","shaclTokenMap","prefixedTokenName","lodash_isequal_default","a","pnameIndex","iriIndex","reverseSort","split","aName","aRemainder","_b","bName","bRemainder","aSortString","toLowerCase","bSortString","aSuffix","bSuffix","sort","accumulator","endsWith","iriTokens","pnameTokens","concat","baseTokens","pathsTokens","nonStandardTokens","stardogSparqlTokens","sparqlTokenTypes","_terminals__WEBPACK_IMPORTED_MODULE_1__","_keywords__WEBPACK_IMPORTED_MODULE_2__","Comment","group","WhiteSpace","SKIPPED","line_breaks","Star","Unknown","QuestionMark","Plus","Minus","Pipe","ForwardSlash","Caret","Bang","LogicalOr","LogicalAnd","Equals","NotEquals","LessThan","GreaterThan","LessThanEquals","GreaterThanEquals","indexOfSelect","getShaclLocalNameMatcher","shaclPrefix","escape_string_regexp_default","getUnderlyingStartToken","ctx","currentNode","children","currentNodeKey","getLocalName","matcher","exec","addPredicatesAndTypesToShape","shape","shaclRulePredicateObjectListNodes","node","child","verbTokenInsensitive","shapeTypeNode","SHACL_NodeShape","types","type","SHACL_PropertyShape","predicates","SHACL_nodeKind","SHACL_targetNode","SHACL_path","SHACL_hasValue","console","log","getShaclShapeFromBlankNodePropertyList","blankNodeNode","predicateObjectListNode","optionalPredicateObjectListNode","helpers_cst","shaclRulePredicateObjectList","getShaclVisitor","BaseVisitor","ShaclVisitor","shapes","visit","shaclShape","$resetState","$validateShapes","validationErrors","localNameMatcher","bnodeCount","shapesConsolidatedBySubject","consolidatedShapes","subjectImage","consolidatedShape","subjects","shapeType","pathPredicates","nonPathPredicateMap","predicateImage","prefixedImage","validateVisitor","ShaclParser_extends","ShaclParser_ShaclParser","ShaclParser","validateWithVisitor","shaclVisitor","BaseSrsVisitor","getBaseCstVisitorConstructorWithDefaults","OVERRIDE_RULE","shaclPredicateIRI","shaclNodeKind","shaclTargetNode","shaclPropertyPath","shaclLiteralConstraint","shaclListTakingConstraint","shaclShapeExpectingConstraint","shaclHasValueConstraint","shaclVerbShape","shaclIRIOrLiteral","shaclShapeType","SHACL_Shape","shaclPropertyPathPath","shaclPredicatePath","shaclSequencePath","shaclAlternativePath","shaclInversePath","shaclZeroOrMorePath","shaclOneOrMorePath","shaclZeroOrOnePath","AT_LEAST_ONE","SHACL_alternativePath","SHACL_inversePath","SHACL_zeroOrMorePath","SHACL_oneOrMorePath","SHACL_zeroOrOnePath","shaclIntConstraint","shaclStringConstraint","shaclStringLiteralQuoteConstraint","shaclLangStringConstraint","shaclBooleanConstraint","shaclAnyLiteralConstraint","shaclXsdInteger","SHACL_select","SHACL_ask","SHACL_xsd_string","CONSUME1","SHACL_xsd_anyURI","shaclXsdBoolean","shaclLanguageInConstraint","shaclShapeListTakingConstraint","shaclIRIListTakingConstraint","shaclShapeOrLiteralListTakingConstraint","SHACL_languageIn","shaclStringCollection","SHACL_and","SHACL_or","SHACL_xone","shaclShapeCollection","SHACL_ignoredProperties","shaclIRICollection","SHACL_in","shaclShapeOrLiteralCollection","shaclShapeOrLiteral","shaclStringWithDoubleCaret","SHACL_xsd_boolean","shaclXsdString","SHACL_xsd_integer","shaclXsdDate","SHACL_xsd_date","shaclXsdAnyURI","shaclTokens","traverse","unsafeTraverse","isCstNode","_traverse","TraverseContext","parentCtx","visitSafely","childType","childCtx","transformedCtx","nextCtx","escapeSequence","escapeReplacements","\\","'","\"","f","_","~",".","-","!","$","&","(",")","*","+",",",";","=","/","?","#","@","%","unescapedStringLiteralQuote","unescapedStringLiteralSingleQuote","stringLiteralQuote","stringLiteralSingleQuote","stringLiteralLongQuote","stringLiteralLongSingleQuote","illegalIriChars","escapedIri","unescapedIri","unescape_unescape","item","replace","unicode4","unicode8","escapedChar","fromCharCode","parseInt","charCode","replacement","Error","error","unicodeRegexp","matchers","text","startOffset","match","textToMatch","UCHAR","test"],"mappings":"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","file":"millan.shacl.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"shacl\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"shacl\"] = factory();\n\telse\n\t\troot[\"millan\"] = root[\"millan\"] || {}, root[\"millan\"][\"shacl\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t3: 0,\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([66,0,9]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// @ts-ignore: import types for declarations\nimport { createToken } from 'chevrotain';\nvar MAX_LENGTH = createToken({\n    name: 'MAX_LENGTH',\n    pattern: /MAX LENGTH/i,\n});\nexport var keywords = {\n    SELECT: createToken({\n        name: 'SELECT',\n        pattern: /SELECT/i,\n    }),\n    CONSTRUCT: createToken({\n        name: 'CONSTRUCT',\n        pattern: /CONSTRUCT/i,\n    }),\n    DISTINCT: createToken({\n        name: 'DISTINCT',\n        pattern: /DISTINCT/i,\n    }),\n    START: createToken({\n        name: 'START',\n        pattern: /START/i,\n    }),\n    END: createToken({\n        name: 'END',\n        pattern: /END/i,\n    }),\n    VIA: createToken({\n        name: 'VIA',\n        pattern: /VIA/i,\n    }),\n    PATHS: createToken({\n        name: 'PATHS',\n        pattern: /PATHS/i,\n    }),\n    PATHS_ALL: createToken({\n        name: 'PATHS_ALL',\n        pattern: /PATHS ALL/i,\n    }),\n    PATHS_SHORTEST: createToken({\n        name: 'PATHS_SHORTEST',\n        pattern: /PATHS SHORTEST/i,\n    }),\n    CYCLIC: createToken({\n        name: 'CYCLIC',\n        pattern: /CYCLIC/i,\n    }),\n    AS: createToken({\n        name: 'AS',\n        pattern: /AS/i,\n    }),\n    WHERE: createToken({\n        name: 'WHERE',\n        pattern: /WHERE/i,\n    }),\n    A: createToken({\n        name: 'A',\n        pattern: /a/,\n    }),\n    GROUP_BY: createToken({\n        name: 'GROUP_BY',\n        pattern: /GROUP BY/i,\n    }),\n    ORDER_BY: createToken({\n        name: 'ORDER_BY',\n        pattern: /ORDER BY/i,\n    }),\n    BY: createToken({\n        name: 'BY',\n        pattern: /BY/i,\n    }),\n    BASE: createToken({\n        name: 'BASE',\n        pattern: /BASE/i,\n    }),\n    PREFIX: createToken({\n        name: 'PREFIX',\n        pattern: /PREFIX/i,\n    }),\n    DESCRIBE: createToken({\n        name: 'DESCRIBE',\n        pattern: /DESCRIBE/i,\n    }),\n    ASK: createToken({\n        name: 'ASK',\n        pattern: /ASK/i,\n    }),\n    FROM: createToken({\n        name: 'FROM',\n        pattern: /FROM/i,\n    }),\n    REDUCED: createToken({\n        name: 'REDUCED',\n        pattern: /REDUCED/i,\n    }),\n    NAMED: createToken({\n        name: 'NAMED',\n        pattern: /NAMED/i,\n    }),\n    HAVING: createToken({\n        name: 'HAVING',\n        pattern: /HAVING/i,\n    }),\n    ASC: createToken({\n        name: 'ASC',\n        pattern: /ASC/i,\n    }),\n    DESC: createToken({\n        name: 'DESC',\n        pattern: /DESC/i,\n    }),\n    OFFSET: createToken({\n        name: 'OFFSET',\n        pattern: /OFFSET/i,\n    }),\n    LIMIT: createToken({\n        name: 'LIMIT',\n        pattern: /LIMIT/i,\n    }),\n    VALUES: createToken({\n        name: 'VALUES',\n        pattern: /VALUES/i,\n    }),\n    LOAD: createToken({\n        name: 'LOAD',\n        pattern: /LOAD/i,\n    }),\n    SILENT: createToken({\n        name: 'SILENT',\n        pattern: /SILENT/i,\n    }),\n    INTO: createToken({\n        name: 'INTO',\n        pattern: /INTO/i,\n    }),\n    CLEAR: createToken({\n        name: 'CLEAR',\n        pattern: /CLEAR/i,\n    }),\n    DROP: createToken({\n        name: 'DROP',\n        pattern: /DROP/i,\n    }),\n    CREATE: createToken({\n        name: 'CREATE',\n        pattern: /CREATE/i,\n    }),\n    ADD: createToken({\n        name: 'ADD',\n        pattern: /ADD/i,\n    }),\n    TO: createToken({\n        name: 'TO',\n        pattern: /TO/i,\n    }),\n    MOVE: createToken({\n        name: 'MOVE',\n        pattern: /MOVE/i,\n    }),\n    COPY: createToken({\n        name: 'COPY',\n        pattern: /COPY/i,\n    }),\n    INSERT_DATA: createToken({\n        name: 'INSERT_DATA',\n        pattern: /INSERT +DATA/i,\n    }),\n    DELETE_DATA: createToken({\n        name: 'DELETE_DATA',\n        pattern: /DELETE +DATA/i,\n    }),\n    DELETE_WHERE: createToken({\n        name: 'DELETE_WHERE',\n        pattern: /DELETE +WHERE/i,\n    }),\n    WITH: createToken({\n        name: 'WITH',\n        pattern: /WITH/i,\n    }),\n    DELETE: createToken({\n        name: 'DELETE',\n        pattern: /DELETE/i,\n    }),\n    INSERT: createToken({\n        name: 'INSERT',\n        pattern: /INSERT/i,\n    }),\n    USING: createToken({\n        name: 'USING',\n        pattern: /USING/i,\n    }),\n    DEFAULT: createToken({\n        name: 'DEFAULT',\n        pattern: /DEFAULT/i,\n    }),\n    GRAPH: createToken({\n        name: 'GRAPH',\n        pattern: /GRAPH/i,\n    }),\n    ALL: createToken({\n        name: 'ALL',\n        pattern: /ALL/i,\n    }),\n    OPTIONAL: createToken({\n        name: 'OPTIONAL',\n        pattern: /OPTIONAL/i,\n    }),\n    SERVICE: createToken({\n        name: 'SERVICE',\n        pattern: /SERVICE/i,\n    }),\n    BIND: createToken({\n        name: 'BIND',\n        pattern: /BIND/i,\n    }),\n    UNNEST: createToken({\n        name: 'UNNEST',\n        pattern: /UNNEST/i,\n    }),\n    UNDEF: createToken({\n        name: 'UNDEF',\n        pattern: /UNDEF/i,\n    }),\n    MINUS: createToken({\n        name: 'MINUS',\n        pattern: /MINUS/i,\n    }),\n    UNION: createToken({\n        name: 'UNION',\n        pattern: /UNION/i,\n    }),\n    FILTER: createToken({\n        name: 'FILTER',\n        pattern: /FILTER/i,\n    }),\n    STR: createToken({\n        name: 'STR',\n        pattern: /STR/i,\n    }),\n    LANG: createToken({\n        name: 'LANG',\n        pattern: /LANG/i,\n    }),\n    LANGMATCHES: createToken({\n        name: 'LANGMATCHES',\n        pattern: /LANGMATCHES/i,\n    }),\n    DATATYPE: createToken({\n        name: 'DATATYPE',\n        pattern: /DATATYPE/i,\n    }),\n    BOUND: createToken({\n        name: 'BOUND',\n        pattern: /BOUND/i,\n    }),\n    IRI: createToken({\n        name: 'IRI',\n        pattern: /IRI/i,\n    }),\n    URI: createToken({\n        name: 'URI',\n        pattern: /URI/i,\n    }),\n    BNODE: createToken({\n        name: 'BNODE',\n        pattern: /BNODE/i,\n    }),\n    RAND: createToken({\n        name: 'RAND',\n        pattern: /RAND/i,\n    }),\n    ABS: createToken({\n        name: 'ABS',\n        pattern: /ABS/i,\n    }),\n    CEIL: createToken({\n        name: 'CEIL',\n        pattern: /CEIL/i,\n    }),\n    FLOOR: createToken({\n        name: 'FLOOR',\n        pattern: /FLOOR/i,\n    }),\n    ROUND: createToken({\n        name: 'ROUND',\n        pattern: /ROUND/i,\n    }),\n    CONCAT: createToken({\n        name: 'CONCAT',\n        pattern: /CONCAT/i,\n    }),\n    STRLEN: createToken({\n        name: 'STRLEN',\n        pattern: /STRLEN/i,\n    }),\n    UCASE: createToken({\n        name: 'UCASE',\n        pattern: /UCASE/i,\n    }),\n    LCASE: createToken({\n        name: 'LCASE',\n        pattern: /LCASE/i,\n    }),\n    ENCODE_FOR_URI: createToken({\n        name: 'ENCODE_FOR_URI',\n        pattern: /ENCODE_FOR_URI/i,\n    }),\n    CONTAINS: createToken({\n        name: 'CONTAINS',\n        pattern: /CONTAINS/i,\n    }),\n    STRSTARTS: createToken({\n        name: 'STRSTARTS',\n        pattern: /STRSTARTS/i,\n    }),\n    STRENDS: createToken({\n        name: 'STRENDS',\n        pattern: /STRENDS/i,\n    }),\n    STRBEFORE: createToken({\n        name: 'STRBEFORE',\n        pattern: /STRBEFORE/i,\n    }),\n    STRAFTER: createToken({\n        name: 'STRAFTER',\n        pattern: /STRAFTER/i,\n    }),\n    YEAR: createToken({\n        name: 'YEAR',\n        pattern: /YEAR/i,\n    }),\n    MONTH: createToken({\n        name: 'MONTH',\n        pattern: /MONTH/i,\n    }),\n    DAY: createToken({\n        name: 'DAY',\n        pattern: /DAY/i,\n    }),\n    HOURS: createToken({\n        name: 'HOURS',\n        pattern: /HOURS/i,\n    }),\n    MINUTES: createToken({\n        name: 'MINUTES',\n        pattern: /MINUTES/i,\n    }),\n    SECONDS: createToken({\n        name: 'SECONDS',\n        pattern: /SECONDS/i,\n    }),\n    TIMEZONE: createToken({\n        name: 'TIMEZONE',\n        pattern: /TIMEZONE/i,\n    }),\n    TZ: createToken({\n        name: 'TZ',\n        pattern: /TZ/i,\n    }),\n    NOW: createToken({\n        name: 'NOW',\n        pattern: /NOW/i,\n    }),\n    UUID: createToken({\n        name: 'UUID',\n        pattern: /UUID/i,\n    }),\n    STRUUID: createToken({\n        name: 'STRUUID',\n        pattern: /STRUUID/i,\n    }),\n    MD5: createToken({\n        name: 'MD5',\n        pattern: /MD5/i,\n    }),\n    SHA1: createToken({\n        name: 'SHA1',\n        pattern: /SHA1/i,\n    }),\n    SHA256: createToken({\n        name: 'SHA256',\n        pattern: /SHA256/i,\n    }),\n    SHA384: createToken({\n        name: 'SHA384',\n        pattern: /SHA384/i,\n    }),\n    SHA512: createToken({\n        name: 'SHA512',\n        pattern: /SHA512/i,\n    }),\n    COALESCE: createToken({\n        name: 'COALESCE',\n        pattern: /COALESCE/i,\n    }),\n    IF: createToken({\n        name: 'IF',\n        pattern: /IF/i,\n    }),\n    STRLANG: createToken({\n        name: 'STRLANG',\n        pattern: /STRLANG/i,\n    }),\n    STRDT: createToken({\n        name: 'STRDT',\n        pattern: /STRDT/i,\n    }),\n    sameTerm: createToken({\n        name: 'sameTerm',\n        pattern: /sameTerm/i,\n    }),\n    isIRI: createToken({\n        name: 'isIRI',\n        pattern: /isIRI/i,\n    }),\n    isURI: createToken({\n        name: 'isURI',\n        pattern: /isURI/i,\n    }),\n    isBLANK: createToken({\n        name: 'isBLANK',\n        pattern: /isBLANK/i,\n    }),\n    isLITERAL: createToken({\n        name: 'isLITERAL',\n        pattern: /isLITERAL/i,\n    }),\n    isNUMERIC: createToken({\n        name: 'isNUMERIC',\n        pattern: /isNUMERIC/i,\n    }),\n    REGEX: createToken({\n        name: 'REGEX',\n        pattern: /REGEX/i,\n    }),\n    SUBSTR: createToken({\n        name: 'SUBSTR',\n        pattern: /SUBSTR/i,\n    }),\n    REPLACE: createToken({\n        name: 'REPLACE',\n        pattern: /REPLACE/i,\n    }),\n    EXISTS: createToken({\n        name: 'EXISTS',\n        pattern: /EXISTS/i,\n    }),\n    NOT_EXISTS: createToken({\n        name: 'NOT_EXISTS',\n        pattern: /NOT EXISTS/i,\n    }),\n    COUNT: createToken({\n        name: 'COUNT',\n        pattern: /COUNT/i,\n    }),\n    SUM: createToken({\n        name: 'SUM',\n        pattern: /SUM/i,\n    }),\n    MIN: createToken({\n        name: 'MIN',\n        pattern: /MIN/i,\n    }),\n    AVG: createToken({\n        name: 'AVG',\n        pattern: /AVG/i,\n    }),\n    SAMPLE: createToken({\n        name: 'SAMPLE',\n        pattern: /SAMPLE/i,\n    }),\n    GROUP_CONCAT: createToken({\n        name: 'GROUP_CONCAT',\n        pattern: /GROUP_CONCAT/i,\n    }),\n    SEPARATOR: createToken({\n        name: 'SEPARATOR',\n        pattern: /SEPARATOR/i,\n    }),\n    TRUE: createToken({\n        name: 'TRUE',\n        pattern: /TRUE/i,\n    }),\n    FALSE: createToken({\n        name: 'FALSE',\n        pattern: /FALSE/i,\n    }),\n    IN: createToken({\n        name: 'IN',\n        pattern: /\\bIN\\b/i,\n    }),\n    NOT_IN: createToken({\n        name: 'NOT_IN',\n        pattern: /NOT IN/i,\n    }),\n    MAX_LENGTH: MAX_LENGTH,\n    MAX: createToken({\n        name: 'MAX',\n        pattern: /MAX/i,\n        longer_alt: MAX_LENGTH,\n    }),\n};\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a = require('./tokens'), turtleTokenTypes = _a.turtleTokenTypes, turtleTokenMap = _a.turtleTokenMap;\nimport { Parser, Lexer, } from 'chevrotain';\nvar TurtleParser = /** @class */ (function (_super) {\n    __extends(TurtleParser, _super);\n    function TurtleParser(config, tokens, lexerDefinition, performSelfAnalysis) {\n        if (config === void 0) { config = {}; }\n        if (tokens === void 0) { tokens = turtleTokenTypes; }\n        if (lexerDefinition === void 0) { lexerDefinition = tokens; }\n        if (performSelfAnalysis === void 0) { performSelfAnalysis = true; }\n        var _this = _super.call(this, tokens, __assign({ outputCst: true, recoveryEnabled: true }, config)) || this;\n        // Parsing Turtle requires that the parser keep a map of namespaces in state.\n        // Empty prefixes, for example, are allowed only if the empty prefix has been\n        // added to the namespaces map (for now, that's all this tracks). (TODO: We\n        // might want to use a visitor for this, but I'm doing it quick-and-dirty for\n        // now.)\n        // See here: https://www.w3.org/TR/turtle/#handle-PNAME_LN\n        _this.namespacesMap = {};\n        _this.semanticErrors = [];\n        // Clears the state that we have to manage on our own for each parse (see\n        // above for details).\n        _this.resetManagedState = function () {\n            _this.namespacesMap = {};\n            _this.semanticErrors = [];\n        };\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        // NOTE: This parser can parse in two modes, 'standard' and 'stardog'. The\n        // latter includes non-standard features like embedded triples patterns (edge\n        // properties).\n        _this.parse = function (document, mode) {\n            if (mode === void 0) { mode = 'standard'; }\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = _this.turtleDoc(0, [mode]);\n            // Next two items are copied so that they can be returned/held after parse\n            // state is cleared.\n            var errors = _this.errors.slice();\n            var semanticErrors = _this.semanticErrors.slice();\n            _this.resetManagedState();\n            return {\n                errors: errors,\n                semanticErrors: semanticErrors,\n                cst: cst,\n            };\n        };\n        _this.turtleDoc = _this.RULE('turtleDoc', function (mode) {\n            var allowEdgeProperties = mode === 'stardog';\n            _this.MANY(function () {\n                return _this.SUBRULE(_this.statement, { ARGS: [allowEdgeProperties] });\n            });\n        });\n        _this.statement = _this.RULE('statement', function (allowEdgeProperties) {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.directive); } },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.triples, { ARGS: [allowEdgeProperties] });\n                        _this.CONSUME(turtleTokenMap.Period);\n                    },\n                },\n            ]);\n        });\n        _this.directive = _this.RULE('directive', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.prefixID); } },\n                { ALT: function () { return _this.SUBRULE(_this.base); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlPrefix); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlBase); } },\n            ]);\n        });\n        _this.prefixID = _this.RULE('prefixID', function () {\n            _this.CONSUME(turtleTokenMap.TTL_PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.base = _this.RULE('base', function () {\n            _this.CONSUME(turtleTokenMap.TTL_BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.sparqlBase = _this.RULE('sparqlBase', function () {\n            _this.CONSUME(turtleTokenMap.BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n        });\n        _this.sparqlPrefix = _this.RULE('sparqlPrefix', function () {\n            _this.CONSUME(turtleTokenMap.PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        // ALSO NOTE: Intentionally does not conform to the RDF* spec.\n        // Stardog does not allow nesting of embedded triples.\n        _this.triples = _this.RULE('triples', function (allowEdgeProperties) {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.subject);\n                        _this.SUBRULE1(_this.predicateObjectList, {\n                            ARGS: [allowEdgeProperties],\n                        });\n                    },\n                },\n                {\n                    GATE: function () { return Boolean(allowEdgeProperties); },\n                    ALT: function () {\n                        _this.SUBRULE(_this.EmbeddedTriplePattern);\n                        _this.SUBRULE(_this.predicateObjectList);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.blankNodePropertyList, {\n                            ARGS: [allowEdgeProperties],\n                        });\n                        _this.OPTION(function () {\n                            return _this.SUBRULE2(_this.predicateObjectList, {\n                                ARGS: [allowEdgeProperties],\n                            });\n                        });\n                    },\n                },\n            ]);\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        // ALSO NOTE: Intentionally does not conform to the RDF* spec.\n        // Stardog does not allow nesting of embedded triples.\n        _this.EmbeddedTriplePattern = _this.RULE('EmbeddedTriplePattern', function () {\n            _this.CONSUME(turtleTokenMap.LEmbed);\n            _this.SUBRULE(_this.triples);\n            _this.CONSUME(turtleTokenMap.REmbed);\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        // ALSO NOTE: Intentionally does not conform to the RDF* spec.\n        // Stardog does not allow embedded triples with object lists.\n        _this.predicateObjectList = _this.RULE('predicateObjectList', function (allowEdgeProperties) {\n            _this.SUBRULE(_this.verb);\n            _this.OR([\n                {\n                    ALT: function () {\n                        return _this.SUBRULE(_this.objectList, { ARGS: [allowEdgeProperties] });\n                    },\n                },\n                {\n                    GATE: function () { return Boolean(allowEdgeProperties); },\n                    ALT: function () {\n                        _this.SUBRULE(_this.EmbeddedPredicateObjectList);\n                        _this.SUBRULE(_this.object, { ARGS: [allowEdgeProperties] });\n                    },\n                },\n            ]);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.SUBRULE1(_this.verb);\n                    _this.OR1([\n                        {\n                            ALT: function () {\n                                return _this.SUBRULE1(_this.objectList, { ARGS: [allowEdgeProperties] });\n                            },\n                        },\n                        {\n                            GATE: function () { return Boolean(allowEdgeProperties); },\n                            ALT: function () {\n                                _this.SUBRULE1(_this.EmbeddedPredicateObjectList);\n                                _this.SUBRULE1(_this.object, { ARGS: [allowEdgeProperties] });\n                            },\n                        },\n                    ]);\n                });\n            });\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        // ALSO NOTE: Intentionally does not conform to the RDF* spec.\n        // Stardog does not allow nesting of embedded triples.\n        _this.EmbeddedPredicateObjectList = _this.RULE('EmbeddedPredicateObjectList', function () {\n            _this.CONSUME(turtleTokenMap.LCurly);\n            _this.SUBRULE(_this.predicateObjectList);\n            _this.CONSUME(turtleTokenMap.RCurly);\n        });\n        _this.subject = _this.RULE('subject', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n            ]);\n        });\n        _this.predicate = _this.RULE('predicate', function () {\n            _this.SUBRULE(_this.iri);\n        });\n        _this.objectList = _this.RULE('objectList', function (allowEdgeProperties) {\n            _this.SUBRULE(_this.object, { ARGS: [allowEdgeProperties] });\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Comma);\n                _this.SUBRULE1(_this.object, { ARGS: [allowEdgeProperties] });\n            });\n        });\n        _this.verb = _this.RULE('verb', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.predicate); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.A); } },\n            ]);\n        });\n        _this.literal = _this.RULE('literal', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n            ]);\n        });\n        _this.blankNodePropertyList = _this.RULE('blankNodePropertyList', function (allowEdgeProperties) {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.SUBRULE(_this.predicateObjectList, { ARGS: [allowEdgeProperties] });\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.object = _this.RULE('object', function (allowEdgeProperties) {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n                {\n                    ALT: function () {\n                        return _this.SUBRULE(_this.blankNodePropertyList, {\n                            ARGS: [allowEdgeProperties],\n                        });\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE(_this.literal); } },\n            ]);\n        });\n        _this.collection = _this.RULE('collection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () { return _this.SUBRULE(_this.object); });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.NumericLiteral = _this.RULE('NumericLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.INTEGER); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DECIMAL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DOUBLE); } },\n            ]);\n        });\n        _this.RDFLiteral = _this.RULE('RDFLiteral', function () {\n            _this.SUBRULE(_this.String);\n            _this.OPTION(function () {\n                _this.OR([\n                    { ALT: function () { return _this.CONSUME(turtleTokenMap.LANGTAG); } },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(turtleTokenMap.DoubleCaret);\n                            _this.SUBRULE(_this.iri);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.BooleanLiteral = _this.RULE('BooleanLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.TRUE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.FALSE); } },\n            ]);\n        });\n        _this.String = _this.RULE('String', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_QUOTE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE); } },\n                {\n                    ALT: function () {\n                        return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE);\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_QUOTE); } },\n            ]);\n        });\n        _this.iri = _this.RULE('iri', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.IRIREF); } },\n                { ALT: function () { return _this.SUBRULE(_this.PrefixedName); } },\n            ]);\n        });\n        _this.PrefixedName = _this.RULE('PrefixedName', function () {\n            var prefixedNameToken = _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_LN); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_NS); } },\n            ]);\n            var pnameNsImage = prefixedNameToken.image.slice(0, prefixedNameToken.image.indexOf(':'));\n            if (!(pnameNsImage in _this.namespacesMap)) {\n                _this.semanticErrors.push({\n                    name: 'NoNamespacePrefixError',\n                    message: 'A prefix was used for which there was no namespace defined.',\n                    token: prefixedNameToken,\n                    context: {\n                        ruleStack: _this.getHumanReadableRuleStack(),\n                        ruleOccurrenceStack: _this.RULE_OCCURRENCE_STACK.slice(),\n                    },\n                    resyncedTokens: [],\n                });\n            }\n        });\n        _this.BlankNode = _this.RULE('BlankNode', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.BLANK_NODE_LABEL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.ANON); } },\n            ]);\n        });\n        _this.lexer = new Lexer(lexerDefinition);\n        if (performSelfAnalysis) {\n            Parser.performSelfAnalysis(_this);\n        }\n        return _this;\n    }\n    return TurtleParser;\n}(Parser));\nexport { TurtleParser };\n","export var regex = {\n    or: function () {\n        var r = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            r[_i] = arguments[_i];\n        }\n        return new RegExp(r.map(function (_a) {\n            var source = _a.source;\n            return \"(\" + source + \")\";\n        }).join('|'));\n    },\n    and: function () {\n        var r = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            r[_i] = arguments[_i];\n        }\n        return new RegExp(r.map(function (_a) {\n            var source = _a.source;\n            return \"(\" + source + \")\";\n        }).join(''));\n    },\n    option: function (r) {\n        return new RegExp(\"(\" + r.source + \")?\");\n    },\n    many: function (r) {\n        return new RegExp(\"(\" + r.source + \")*\");\n    },\n};\n","import { regex } from './regex';\nexport var CATCH_ALL = /[\\s\\S]*/; // equivalent to /.*/s, which isn't a JS standard yet\nexport var CATCH_ALL_AT_LEAST_ONE = /[\\s\\S]+/; // equivalent to /.+/s, which isn't a JS standard yet\nexport var IRIREF = /<[^<>\\\\{}|\\^`\\u0000-\\u0020]*>/;\nexport var PN_CHARS_BASE = /[A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nexport var LANGTAG = /@[a-zA-Z]+(-[a-zA-Z0-9]+)*/;\nexport var INTEGER = /\\d+/;\nexport var DECIMAL = /(\\d*\\.\\d+)|(\\d+\\.\\d*)/;\nexport var EXPONENT = /[eE][+-]?\\d+/;\nexport var ECHAR = /\\\\[tbnrf\"'\\\\]/;\nexport var WS = /[\\u0020\\u0009\\u000d\\u000a]/;\nexport var HEX = /[0-9A-Fa-f]/;\nexport var PN_LOCAL_ESC = /\\\\[_~.\\-!\\$&'()*+,=\\/?#@%;]/;\nexport var PN_CHARS_U = regex.or(PN_CHARS_BASE, /_/);\nexport var PN_CHARS = regex.or(PN_CHARS_U, /-/, /\\d/, /\\u00b7/, /[\\u0300-\\u036f]/, /[\\u203f-\\u2040]/);\nexport var PN_PREFIX = regex.and(PN_CHARS_BASE, regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./)), PN_CHARS)));\nexport var PERCENT = regex.and(/%/, HEX, HEX);\nexport var PLX = regex.or(PERCENT, PN_LOCAL_ESC);\nexport var PN_LOCAL = regex.and(regex.or(PN_CHARS_U, /:/, /\\d/, PLX), regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./, /:/, PLX)), regex.or(PN_CHARS, /:/, PLX))));\nexport var VARNAME = regex.and(regex.or(PN_CHARS_U, /\\d/), regex.many(regex.or(PN_CHARS_U, /\\d/, /\\u00b7/, /[\\u0300-\\u036f]/, /[\\u203f-\\u2040]/)));\nexport var ANON = regex.and(/\\[/, regex.many(WS), /\\]/);\nexport var NIL = regex.and(/\\(/, regex.many(WS), /\\)/);\nexport var STRING_LITERAL1 = regex.and(/'/, regex.many(regex.or(/[^\\u0027\\u005C\\u000A\\u000D]/, ECHAR)), /'/);\nexport var STRING_LITERAL2 = regex.and(/\"/, regex.many(regex.or(/[^\\u0022\\u005C\\u000A\\u000D]/, ECHAR)), /\"/);\nexport var STRING_LITERAL_LONG1 = regex.and(/'''/, regex.many(regex.and(regex.option(regex.or(/'/, /''/)), regex.or(/[^'\\\\]/, ECHAR))), /'''/);\nexport var STRING_LITERAL_LONG2 = regex.and(/\"\"\"/, regex.many(regex.and(regex.option(regex.or(/\"/, /\"\"/)), regex.or(/[^\"\\\\]/, ECHAR))), /\"\"\"/);\nexport var DOUBLE = regex.or(regex.and(/\\d+\\.\\d*/, EXPONENT), regex.and(/\\.\\d+/, EXPONENT), regex.and(/\\d+/, EXPONENT));\nexport var INTEGER_POSITIVE = regex.and(/\\+/, INTEGER);\nexport var DECIMAL_POSITIVE = regex.and(/\\+/, DECIMAL);\nexport var DOUBLE_POSITIVE = regex.and(/\\+/, DOUBLE);\nexport var INTEGER_NEGATIVE = regex.and(/-/, INTEGER);\nexport var DECIMAL_NEGATIVE = regex.and(/-/, DECIMAL);\nexport var DOUBLE_NEGATIVE = regex.and(/-/, DOUBLE);\nexport var VAR1 = regex.and(/\\?/, VARNAME);\nexport var VAR2 = regex.and(/\\$/, VARNAME);\nexport var BLANK_NODE_LABEL = regex.and(/_:/, regex.or(PN_CHARS_U, /\\d/), regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./)), PN_CHARS)));\nexport var PNAME_NS = regex.and(regex.option(PN_PREFIX), /:/);\nexport var PNAME_LN = regex.and(PNAME_NS, PN_LOCAL);\n","// @ts-ignore: import types for declarations\nimport { createToken } from 'chevrotain';\nimport { STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, PNAME_LN, IRIREF, LANGTAG, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, STRING_LITERAL1, STRING_LITERAL2, NIL, ANON, PNAME_NS, BLANK_NODE_LABEL, VAR1, VAR2, PERCENT, } from 'helpers/matchers';\nvar STRING_LITERAL_LONG1_TOKEN = createToken({\n    name: 'STRING_LITERAL_LONG1',\n    pattern: STRING_LITERAL_LONG1,\n});\nvar STRING_LITERAL_LONG2_TOKEN = createToken({\n    name: 'STRING_LITERAL_LONG2',\n    pattern: STRING_LITERAL_LONG2,\n});\nvar PNAME_LN_TOKEN = createToken({\n    name: 'PNAME_LN',\n    pattern: PNAME_LN,\n});\nexport var terminals = {\n    IRIREF: createToken({\n        name: 'IRIREF',\n        pattern: IRIREF,\n        label: '<http://example.com>',\n    }),\n    LANGTAG: createToken({\n        name: 'LANGTAG',\n        pattern: LANGTAG,\n    }),\n    INTEGER: createToken({\n        name: 'INTEGER',\n        pattern: INTEGER,\n    }),\n    DECIMAL: createToken({\n        name: 'DECIMAL',\n        pattern: DECIMAL,\n    }),\n    DOUBLE: createToken({\n        name: 'DOUBLE',\n        pattern: DOUBLE,\n    }),\n    INTEGER_POSITIVE: createToken({\n        name: 'INTEGER_POSITIVE',\n        pattern: INTEGER_POSITIVE,\n    }),\n    DECIMAL_POSITIVE: createToken({\n        name: 'DECIMAL_POSITIVE',\n        pattern: DECIMAL_POSITIVE,\n    }),\n    DOUBLE_POSITIVE: createToken({\n        name: 'DOUBLE_POSITIVE',\n        pattern: DOUBLE_POSITIVE,\n    }),\n    INTEGER_NEGATIVE: createToken({\n        name: 'INTEGER_NEGATIVE',\n        pattern: INTEGER_NEGATIVE,\n    }),\n    DECIMAL_NEGATIVE: createToken({\n        name: 'DECIMAL_NEGATIVE',\n        pattern: DECIMAL_NEGATIVE,\n    }),\n    DOUBLE_NEGATIVE: createToken({\n        name: 'DOUBLE_NEGATIVE',\n        pattern: DOUBLE_NEGATIVE,\n    }),\n    STRING_LITERAL_LONG1: STRING_LITERAL_LONG1_TOKEN,\n    STRING_LITERAL_LONG2: STRING_LITERAL_LONG2_TOKEN,\n    STRING_LITERAL1: createToken({\n        name: 'STRING_LITERAL1',\n        pattern: STRING_LITERAL1,\n        longer_alt: STRING_LITERAL_LONG1_TOKEN,\n    }),\n    STRING_LITERAL2: createToken({\n        name: 'STRING_LITERAL2',\n        pattern: STRING_LITERAL2,\n        longer_alt: STRING_LITERAL_LONG2_TOKEN,\n    }),\n    NIL: createToken({\n        name: 'NIL',\n        pattern: NIL,\n        label: '()',\n    }),\n    ANON: createToken({\n        name: 'ANON',\n        pattern: ANON,\n        label: '[]',\n    }),\n    PNAME_LN: PNAME_LN_TOKEN,\n    PNAME_NS: createToken({\n        name: 'PNAME_NS',\n        pattern: PNAME_NS,\n        longer_alt: PNAME_LN_TOKEN,\n    }),\n    BLANK_NODE_LABEL: createToken({\n        name: 'BLANK_NODE_LABEL',\n        pattern: BLANK_NODE_LABEL,\n    }),\n    VAR1: createToken({\n        name: 'VAR1',\n        pattern: VAR1,\n        label: '?foo',\n    }),\n    VAR2: createToken({\n        name: 'VAR2',\n        pattern: VAR2,\n        label: '?bar',\n    }),\n    PERCENT: createToken({\n        name: 'PERCENT',\n        pattern: PERCENT,\n    }),\n};\n","import { IToken, CstNode, TokenType, } from 'chevrotain';\nexport var getAsTypedTuple = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return args;\n};\n// exported for convenience\nexport { IToken, CstNode, TokenType };\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a = require('../turtle/tokens'), turtleTokenTypes = _a.turtleTokenTypes, turtleTokenMap = _a.turtleTokenMap;\nvar sparqlTokenMap = require('../sparql/tokens').sparqlTokenMap;\nimport { createToken, Lexer } from 'chevrotain';\nimport memoize from 'memoize-one';\nimport { getAsTypedTuple } from 'helpers/types';\nimport isDeepEqual from 'lodash.isequal';\nvar shaclIriNamespace = 'http://www.w3.org/ns/shacl#';\nvar xsdIriNamespace = 'http://www.w3.org/2001/XMLSchema#';\n// Token categories, useful for making the parser rules simpler.\nexport var categoryTokenMap = {\n    ManyIriTakingPredicate: createToken({\n        name: 'ManyIriTakingPredicate',\n        pattern: Lexer.NA,\n    }),\n    SingleIriTakingPredicate: createToken({\n        name: 'SingleIriTakingPredicate',\n        pattern: Lexer.NA,\n    }),\n    NodeKindIRI: createToken({\n        name: 'NodeKindIRI',\n        pattern: Lexer.NA,\n    }),\n    IntTakingPredicate: createToken({\n        name: 'IntTakingPredicate',\n        pattern: Lexer.NA,\n    }),\n    StringLiteralQuoteTakingPredicate: createToken({\n        name: 'StringLiteralQuoteTakingPredicate',\n        pattern: Lexer.NA,\n    }),\n    LangStringTakingPredicate: createToken({\n        name: 'LangStringTakingPredicate',\n        pattern: Lexer.NA,\n    }),\n    BooleanTakingPredicate: createToken({\n        name: 'BooleanTakingPredicate',\n        pattern: Lexer.NA,\n    }),\n    ShapeExpectingPredicate: createToken({\n        name: 'ShapeExpectingPredicate',\n        pattern: Lexer.NA,\n    }),\n    AnyLiteralTakingPredicate: createToken({\n        name: 'AnyLiteralTakingPredicate',\n        pattern: Lexer.NA,\n    }),\n};\nexport var categoryTokens = Object.keys(categoryTokenMap).map(function (key) { return categoryTokenMap[key]; });\nvar localNamesByCategory = {\n    ManyIriTakingPredicate: getAsTypedTuple('equals', 'disjoint', 'lessThan', 'lessThanOrEquals', 'targetClass', 'targetSubjectsOf', 'targetObjectsOf'),\n    SingleIriTakingPredicate: getAsTypedTuple('class', 'datatype', 'severity'),\n    NodeKindIRI: getAsTypedTuple('IRI', 'BlankNode', 'Literal', 'BlankNodeOrIRI', 'BlankNodeOrLiteral', 'IRIOrLiteral'),\n    IntTakingPredicate: getAsTypedTuple('minCount', 'maxCount', 'minLength', 'maxLength', 'qualifiedMinCount', 'qualifiedMaxCount'),\n    StringLiteralQuoteTakingPredicate: getAsTypedTuple('pattern', 'flags', 'prefix', 'namespace'),\n    LangStringTakingPredicate: getAsTypedTuple('message', 'labelTemplate'),\n    BooleanTakingPredicate: getAsTypedTuple('uniqueLang', 'qualifiedValueShapesDisjoint', 'closed', 'deactivated', 'optional'),\n    ShapeExpectingPredicate: getAsTypedTuple('not', 'node', 'property', 'qualifiedValueShape', 'sparql', 'declare', 'prefixes', 'parameter', 'nodeValidator', 'propertyValidator', 'validator'),\n    AnyLiteralTakingPredicate: getAsTypedTuple('minExclusive', 'minInclusive', 'maxExclusive', 'maxInclusive'),\n    other: getAsTypedTuple('Shape', 'NodeShape', 'PropertyShape', 'targetNode', 'message', 'path', 'alternativePath', 'inversePath', 'zeroOrMorePath', 'oneOrMorePath', 'zeroOrOnePath', 'nodeKind', 'languageIn', 'and', 'or', 'xone', 'ignoredProperties', 'hasValue', 'in', 'select', 'ask'),\n};\nvar xsdLocalNames = getAsTypedTuple('boolean', 'integer', 'string', 'date', 'dateTime', 'anyURI');\n// Map of local names back to their categories, for easier lookup:\nvar localNameToCategoryMap = Object.keys(localNamesByCategory).reduce(function (nameToCategoryMap, category) {\n    var categoryLocalNames = localNamesByCategory[category];\n    categoryLocalNames.forEach(function (localName) { return (nameToCategoryMap[localName] = category); });\n    return nameToCategoryMap;\n}, {});\nvar localNames = Object.keys(localNameToCategoryMap);\n// We can pre-compute all tokens for the `xsd` namespace except for those that\n// include prefixes (since we don't know a priori what the prefix will be).\n// For each XSD local name, we will create a \"category\" token that will\n// ultimately be used as the single token encompassing either the full\n// (un-prefixed) IRI or the prefixed name (i.e., `xsd:string). At this point,\n// we create only the category token and the full (un-prefixed) IRI token; the\n// prefixed token is created later (via `getShaclTokenTypes`) once we actually\n// know what the `xsd` prefix is.\nvar xsdUnprefixedTokenMap = xsdLocalNames.reduce(function (tokenMap, localName) {\n    var _a;\n    var tokenName = \"SHACL_xsd_\" + localName; // category token name\n    var iriTokenName = tokenName + \"_IRI\"; // IRI token name\n    // Category token that will ultimately select either an XSD IRI or an XSD PN_LOCAL:\n    var iriOrPrefixCategoryToken = createToken({\n        name: tokenName,\n        pattern: Lexer.NA,\n    });\n    return __assign({}, tokenMap, (_a = {}, _a[tokenName] = iriOrPrefixCategoryToken, _a[iriTokenName] = createToken({\n        name: iriTokenName,\n        pattern: \"<\" + xsdIriNamespace + localName,\n        categories: [iriOrPrefixCategoryToken, turtleTokenMap.IRIREF],\n    }), _a));\n}, {});\n// We can also pre-compute all SHACL tokens except for those that include\n// prefixes (again, since we don't know a priori what the SHACL prefix will be).\n// This helps keep our parser quick. We do it in the same way that we did for\n// XSD tokens, above -- we create a \"category\" token for each SHACL local name\n// that will be used to match either the full (un-prefixed) IRI or the prefixed\n// name (once we know what the SHACL prefix is).\nvar shaclUnprefixedTokenMap = localNames.reduce(function (tokenMap, localName) {\n    var _a;\n    var category = localNameToCategoryMap[localName];\n    var categoryToken = categoryTokenMap[category];\n    var tokenName = \"SHACL_\" + localName;\n    var iriTokenName = tokenName + \"_IRI\";\n    // Category token that will select either a SHACL IRI or a SHACL PN_LOCAL:\n    var iriOrPrefixCategoryToken = createToken({\n        name: tokenName,\n        pattern: Lexer.NA,\n        categories: categoryToken ? [categoryToken] : [],\n    });\n    return __assign({}, tokenMap, (_a = {}, _a[tokenName] = iriOrPrefixCategoryToken, _a[iriTokenName] = createToken({\n        name: iriTokenName,\n        pattern: \"<\" + shaclIriNamespace + localName + \">\",\n        categories: [iriOrPrefixCategoryToken, turtleTokenMap.IRIREF],\n    }), _a));\n}, xsdUnprefixedTokenMap);\nvar makePrefixer = function (prefix) { return function (localName) {\n    return prefix + \":\" + localName;\n}; };\n// Retrieves the complete map of all SHACL/XSD tokens, given the SHACL and XSD\n// prefixes. The map contains, for every local name, a token matching the full\n// IRI, a token matching the prefixed local name, and a \"category\" token that\n// matches both. The category token is useful for simplifying parser rules (not\n// having to match every SHACL token as both a full IRI and a prefixed local\n// name.)\n// This function is called by the SHACL parser. It is memoized because the\n// arguments are small and unlikely to change often, and the parser needs to be\n// fast, so we should avoid re-computing.\nexport var getShaclTokenMap = memoize(function (prefixes) {\n    var prefixWithShacl = makePrefixer(prefixes.shacl);\n    var prefixWithXsd = makePrefixer(prefixes.xsd);\n    // Add the prefixed local names to the SHACL token map now that we know the\n    // prefixes.\n    var shaclTokenMap = localNames.reduce(function (tokenMap, localName) {\n        var _a;\n        var tokenName = \"SHACL_\" + localName;\n        var prefixedTokenName = tokenName + \"_prefixed\";\n        return __assign({}, tokenMap, (_a = {}, _a[prefixedTokenName] = createToken({\n            name: prefixedTokenName,\n            pattern: prefixWithShacl(localName),\n            categories: [tokenMap[tokenName], turtleTokenMap.PNAME_LN],\n        }), _a));\n    }, shaclUnprefixedTokenMap);\n    // Add the prefixed local names to the XSD token map now that we know the\n    // prefixes.\n    return xsdLocalNames.reduce(function (tokenMap, localName) {\n        var _a;\n        var tokenName = \"SHACL_xsd_\" + localName;\n        var prefixedTokenName = tokenName + \"_prefixed\";\n        return __assign({}, tokenMap, (_a = {}, _a[prefixedTokenName] = createToken({\n            name: prefixedTokenName,\n            pattern: \"\" + prefixWithXsd(localName),\n            categories: [tokenMap[tokenName], turtleTokenMap.PNAME_LN],\n        }), _a));\n    }, shaclTokenMap);\n}, isDeepEqual);\n// Get the index of PNAME_NS and IRIREF so that we can re-use existing Turtle\n// tokens but ensure that our special SHACL/XSD tokens are inserted at the\n// right place (since order of tokens matters for chevrotain).\nvar pnameIndex = turtleTokenTypes.indexOf(sparqlTokenMap.PNAME_NS);\nvar iriIndex = turtleTokenTypes.indexOf(turtleTokenMap.IRIREF);\n// tokenMap keys will need to be sorted in reverse order so that tokens with\n// partial overlap are in the right order in the TokenType array.\nvar reverseSort = function (a, b) {\n    // @ts-ignore: unused variable\n    var _a = a.split('_'), aIgnored = _a[0], aName = _a[1], aRemainder = _a.slice(2);\n    // @ts-ignore: unused variable\n    var _b = b.split('_'), bIgnored = _b[0], bName = _b[1], bRemainder = _b.slice(2);\n    // Grab the local name and lowercase it:\n    var aSortString = (aName === 'xsd' ? aRemainder[0] : aName).toLowerCase();\n    var bSortString = (bName === 'xsd' ? bRemainder[0] : bName).toLowerCase();\n    if (aSortString === bSortString) {\n        // If local names are identical, prefer the one without a suffix to those with suffixes.\n        var aSuffix = aName === 'xsd' ? aRemainder[1] : aRemainder[0];\n        var bSuffix = bName === 'xsd' ? bRemainder[1] : bRemainder[0];\n        if (aSuffix && bSuffix) {\n            return 0; // when both local names have suffixes, treat as lexicographically the same for sorting\n        }\n        else {\n            return aSuffix ? 1 : -1;\n        }\n    }\n    else {\n        return aSortString < bSortString ? 1 : bSortString < aSortString ? -1 : 0;\n    }\n};\n// Given SHACL and XSD prefixes, this method returns an array of Turtle +\n// SHACL/XSD tokens, including tokens for prefixed local names, with the\n// SHACL/XSD tokens inserted at the proper positions so that they are matched\n// before the more generic Turtle tokens.\nexport var getShaclTokenTypes = memoize(function (prefixes) {\n    var tokenMap = getShaclTokenMap(prefixes);\n    var _a = Object.keys(tokenMap)\n        .sort(reverseSort)\n        .reduce(function (accumulator, key) {\n        if (key.endsWith('_IRI')) {\n            if (iriIndex < pnameIndex) {\n                accumulator.iriTokens.push(tokenMap[key.slice(0, -4)]);\n            }\n            accumulator.iriTokens.push(tokenMap[key]);\n        }\n        else if (key.endsWith('_prefixed')) {\n            if (pnameIndex < iriIndex) {\n                accumulator.pnameTokens.push(tokenMap[key.slice(0, -9)]);\n            }\n            accumulator.pnameTokens.push(tokenMap[key]);\n        }\n        return accumulator;\n    }, { pnameTokens: [], iriTokens: [] }), pnameTokens = _a.pnameTokens, iriTokens = _a.iriTokens;\n    if (pnameIndex < iriIndex) {\n        return turtleTokenTypes.slice(0, pnameIndex).concat(categoryTokens, pnameTokens, turtleTokenTypes.slice(pnameIndex, iriIndex), iriTokens, turtleTokenTypes.slice(iriIndex));\n    }\n    else {\n        return turtleTokenTypes.slice(0, iriIndex).concat(categoryTokens, iriTokens, turtleTokenTypes.slice(iriIndex, pnameIndex), pnameTokens, turtleTokenTypes.slice(pnameIndex));\n    }\n}, isDeepEqual);\n","// @ts-ignore: import types for declarations\nimport { createToken, Lexer } from 'chevrotain';\nimport { terminals } from './terminals';\nimport { keywords } from './keywords';\nexport var sparqlTokenMap = {\n    IRIREF: terminals.IRIREF,\n    LANGTAG: terminals.LANGTAG,\n    INTEGER: terminals.INTEGER,\n    DECIMAL: terminals.DECIMAL,\n    DOUBLE: terminals.DOUBLE,\n    INTEGER_POSITIVE: terminals.INTEGER_POSITIVE,\n    DECIMAL_POSITIVE: terminals.DECIMAL_POSITIVE,\n    DOUBLE_POSITIVE: terminals.DOUBLE_POSITIVE,\n    INTEGER_NEGATIVE: terminals.INTEGER_NEGATIVE,\n    DECIMAL_NEGATIVE: terminals.DECIMAL_NEGATIVE,\n    DOUBLE_NEGATIVE: terminals.DOUBLE_NEGATIVE,\n    STRING_LITERAL1: terminals.STRING_LITERAL1,\n    STRING_LITERAL2: terminals.STRING_LITERAL2,\n    STRING_LITERAL_LONG1: terminals.STRING_LITERAL_LONG1,\n    STRING_LITERAL_LONG2: terminals.STRING_LITERAL_LONG2,\n    NIL: terminals.NIL,\n    ANON: terminals.ANON,\n    PNAME_NS: terminals.PNAME_NS,\n    PNAME_LN: terminals.PNAME_LN,\n    BLANK_NODE_LABEL: terminals.BLANK_NODE_LABEL,\n    VAR1: terminals.VAR1,\n    VAR2: terminals.VAR2,\n    PERCENT: terminals.PERCENT,\n    Comment: createToken({\n        name: 'Comment',\n        pattern: /#[^\\n]*/,\n        group: 'comments',\n    }),\n    LCurly: createToken({ name: 'LCurly', pattern: '{' }),\n    RCurly: createToken({ name: 'RCurly', pattern: '}' }),\n    LParen: createToken({ name: 'LParen', pattern: '(' }),\n    RParen: createToken({ name: 'RParen', pattern: ')' }),\n    WhiteSpace: createToken({\n        name: 'WhiteSpace',\n        pattern: /\\s+/,\n        group: Lexer.SKIPPED,\n        line_breaks: true,\n    }),\n    Star: createToken({\n        name: 'Star',\n        pattern: '*',\n    }),\n    Unknown: createToken({\n        name: 'Unknown',\n        // Unknown comes _before_ `A` in the token ordering because we need it to\n        // match custom/XPath functions like `atan`, etc. But we also need it to\n        // _not_ capture `A` tokens. This pattern catches anything that is either\n        // (1) 'a' followed by non-whitespace (up to the next non-word character) or\n        // (2) not 'a' or whitespace (up to the next non-word character).\n        pattern: /(?:a\\S|[^a\\s])\\w*/i,\n    }),\n    Period: createToken({\n        name: 'Period',\n        pattern: '.',\n    }),\n    QuestionMark: createToken({\n        name: 'QuestionMark',\n        pattern: '?',\n    }),\n    Plus: createToken({\n        name: 'Plus',\n        pattern: '+',\n    }),\n    Minus: createToken({\n        name: 'Minus',\n        pattern: '-',\n    }),\n    LBracket: createToken({\n        name: 'LBracket',\n        pattern: '[',\n    }),\n    RBracket: createToken({\n        name: 'RBracket',\n        pattern: ']',\n    }),\n    Semicolon: createToken({\n        name: 'Semicolon',\n        pattern: ';',\n    }),\n    Comma: createToken({\n        name: 'Comma',\n        pattern: ',',\n    }),\n    Pipe: createToken({\n        name: 'Pipe',\n        pattern: '|',\n    }),\n    ForwardSlash: createToken({\n        name: 'ForwardSlash',\n        pattern: '/',\n    }),\n    Caret: createToken({\n        name: 'Caret',\n        pattern: '^',\n    }),\n    DoubleCaret: createToken({\n        name: 'DoubleCaret',\n        pattern: '^^',\n    }),\n    Bang: createToken({\n        name: 'Bang',\n        pattern: '!',\n    }),\n    LogicalOr: createToken({\n        name: 'LogicalOr',\n        pattern: '||',\n    }),\n    LogicalAnd: createToken({\n        name: 'LogicalAnd',\n        pattern: '&&',\n    }),\n    Equals: createToken({\n        name: 'Equals',\n        pattern: '=',\n    }),\n    NotEquals: createToken({\n        name: 'NotEquals',\n        pattern: '!=',\n    }),\n    LessThan: createToken({\n        name: 'LessThan',\n        pattern: '<',\n    }),\n    GreaterThan: createToken({\n        name: 'GreaterThan',\n        pattern: '>',\n    }),\n    LessThanEquals: createToken({\n        name: 'LessThanEquals',\n        pattern: '<=',\n    }),\n    GreaterThanEquals: createToken({\n        name: 'GreaterThanEquals',\n        pattern: '>=',\n    }),\n    LEmbed: createToken({\n        name: 'LEmbed',\n        pattern: '<<',\n    }),\n    REmbed: createToken({\n        name: 'REmbed',\n        pattern: '>>',\n    }),\n    SELECT: keywords.SELECT,\n    CONSTRUCT: keywords.CONSTRUCT,\n    DISTINCT: keywords.DISTINCT,\n    START: keywords.START,\n    END: keywords.END,\n    VIA: keywords.VIA,\n    CYCLIC: keywords.CYCLIC,\n    PATHS_SHORTEST: keywords.PATHS_SHORTEST,\n    PATHS_ALL: keywords.PATHS_ALL,\n    PATHS: keywords.PATHS,\n    AS: keywords.AS,\n    WHERE: keywords.WHERE,\n    A: keywords.A,\n    GROUP_BY: keywords.GROUP_BY,\n    ORDER_BY: keywords.ORDER_BY,\n    BY: keywords.BY,\n    BASE: keywords.BASE,\n    PREFIX: keywords.PREFIX,\n    DESCRIBE: keywords.DESCRIBE,\n    ASK: keywords.ASK,\n    FROM: keywords.FROM,\n    REDUCED: keywords.REDUCED,\n    NAMED: keywords.NAMED,\n    HAVING: keywords.HAVING,\n    ASC: keywords.ASC,\n    DESC: keywords.DESC,\n    OFFSET: keywords.OFFSET,\n    LIMIT: keywords.LIMIT,\n    VALUES: keywords.VALUES,\n    LOAD: keywords.LOAD,\n    SILENT: keywords.SILENT,\n    INTO: keywords.INTO,\n    CLEAR: keywords.CLEAR,\n    DROP: keywords.DROP,\n    CREATE: keywords.CREATE,\n    ADD: keywords.ADD,\n    TO: keywords.TO,\n    MOVE: keywords.MOVE,\n    COPY: keywords.COPY,\n    INSERT_DATA: keywords.INSERT_DATA,\n    DELETE_DATA: keywords.DELETE_DATA,\n    DELETE_WHERE: keywords.DELETE_WHERE,\n    WITH: keywords.WITH,\n    DELETE: keywords.DELETE,\n    INSERT: keywords.INSERT,\n    USING: keywords.USING,\n    DEFAULT: keywords.DEFAULT,\n    GRAPH: keywords.GRAPH,\n    ALL: keywords.ALL,\n    OPTIONAL: keywords.OPTIONAL,\n    SERVICE: keywords.SERVICE,\n    BIND: keywords.BIND,\n    UNNEST: keywords.UNNEST,\n    UNDEF: keywords.UNDEF,\n    MINUS: keywords.MINUS,\n    UNION: keywords.UNION,\n    FILTER: keywords.FILTER,\n    STR: keywords.STR,\n    LANG: keywords.LANG,\n    LANGMATCHES: keywords.LANGMATCHES,\n    DATATYPE: keywords.DATATYPE,\n    BOUND: keywords.BOUND,\n    IRI: keywords.IRI,\n    URI: keywords.URI,\n    BNODE: keywords.BNODE,\n    RAND: keywords.RAND,\n    ABS: keywords.ABS,\n    CEIL: keywords.CEIL,\n    FLOOR: keywords.FLOOR,\n    ROUND: keywords.ROUND,\n    CONCAT: keywords.CONCAT,\n    STRLEN: keywords.STRLEN,\n    UCASE: keywords.UCASE,\n    LCASE: keywords.LCASE,\n    ENCODE_FOR_URI: keywords.ENCODE_FOR_URI,\n    CONTAINS: keywords.CONTAINS,\n    STRSTARTS: keywords.STRSTARTS,\n    STRENDS: keywords.STRENDS,\n    STRBEFORE: keywords.STRBEFORE,\n    STRAFTER: keywords.STRAFTER,\n    YEAR: keywords.YEAR,\n    MONTH: keywords.MONTH,\n    DAY: keywords.DAY,\n    HOURS: keywords.HOURS,\n    MINUTES: keywords.MINUTES,\n    SECONDS: keywords.SECONDS,\n    TIMEZONE: keywords.TIMEZONE,\n    TZ: keywords.TZ,\n    NOW: keywords.NOW,\n    UUID: keywords.UUID,\n    STRUUID: keywords.STRUUID,\n    MD5: keywords.MD5,\n    SHA1: keywords.SHA1,\n    SHA256: keywords.SHA256,\n    SHA384: keywords.SHA384,\n    SHA512: keywords.SHA512,\n    COALESCE: keywords.COALESCE,\n    IF: keywords.IF,\n    STRLANG: keywords.STRLANG,\n    STRDT: keywords.STRDT,\n    sameTerm: keywords.sameTerm,\n    isIRI: keywords.isIRI,\n    isURI: keywords.isURI,\n    isBLANK: keywords.isBLANK,\n    isLITERAL: keywords.isLITERAL,\n    isNUMERIC: keywords.isNUMERIC,\n    REGEX: keywords.REGEX,\n    SUBSTR: keywords.SUBSTR,\n    REPLACE: keywords.REPLACE,\n    EXISTS: keywords.EXISTS,\n    NOT_EXISTS: keywords.NOT_EXISTS,\n    COUNT: keywords.COUNT,\n    SUM: keywords.SUM,\n    MIN: keywords.MIN,\n    AVG: keywords.AVG,\n    SAMPLE: keywords.SAMPLE,\n    GROUP_CONCAT: keywords.GROUP_CONCAT,\n    SEPARATOR: keywords.SEPARATOR,\n    TRUE: keywords.TRUE,\n    FALSE: keywords.FALSE,\n    IN: keywords.IN,\n    NOT_IN: keywords.NOT_IN,\n    MAX_LENGTH: keywords.MAX_LENGTH,\n    MAX: keywords.MAX,\n};\nexport var baseTokens = [\n    sparqlTokenMap.NIL,\n    sparqlTokenMap.ANON,\n    sparqlTokenMap.LCurly,\n    sparqlTokenMap.RCurly,\n    sparqlTokenMap.LParen,\n    sparqlTokenMap.RParen,\n    sparqlTokenMap.WhiteSpace,\n    sparqlTokenMap.IRIREF,\n    sparqlTokenMap.LANGTAG,\n    sparqlTokenMap.DOUBLE,\n    sparqlTokenMap.DECIMAL,\n    sparqlTokenMap.INTEGER,\n    sparqlTokenMap.DOUBLE_POSITIVE,\n    sparqlTokenMap.DECIMAL_POSITIVE,\n    sparqlTokenMap.INTEGER_POSITIVE,\n    sparqlTokenMap.DOUBLE_NEGATIVE,\n    sparqlTokenMap.DECIMAL_NEGATIVE,\n    sparqlTokenMap.INTEGER_NEGATIVE,\n    sparqlTokenMap.STRING_LITERAL1,\n    sparqlTokenMap.STRING_LITERAL2,\n    sparqlTokenMap.STRING_LITERAL_LONG1,\n    sparqlTokenMap.STRING_LITERAL_LONG2,\n    sparqlTokenMap.PNAME_NS,\n    sparqlTokenMap.PNAME_LN,\n    sparqlTokenMap.BLANK_NODE_LABEL,\n    sparqlTokenMap.VAR1,\n    sparqlTokenMap.VAR2,\n    sparqlTokenMap.Comment,\n    sparqlTokenMap.SELECT,\n    sparqlTokenMap.CONSTRUCT,\n    sparqlTokenMap.DISTINCT,\n    sparqlTokenMap.Star,\n    sparqlTokenMap.WHERE,\n    sparqlTokenMap.GROUP_BY,\n    sparqlTokenMap.ORDER_BY,\n    sparqlTokenMap.BY,\n    sparqlTokenMap.Period,\n    sparqlTokenMap.QuestionMark,\n    sparqlTokenMap.Plus,\n    sparqlTokenMap.Minus,\n    sparqlTokenMap.LBracket,\n    sparqlTokenMap.RBracket,\n    sparqlTokenMap.PERCENT,\n    sparqlTokenMap.BASE,\n    sparqlTokenMap.PREFIX,\n    sparqlTokenMap.DESCRIBE,\n    sparqlTokenMap.ASK,\n    sparqlTokenMap.FROM,\n    sparqlTokenMap.REDUCED,\n    sparqlTokenMap.NAMED,\n    sparqlTokenMap.HAVING,\n    sparqlTokenMap.ASC,\n    sparqlTokenMap.DESC,\n    sparqlTokenMap.OFFSET,\n    sparqlTokenMap.LIMIT,\n    sparqlTokenMap.VALUES,\n    sparqlTokenMap.LOAD,\n    sparqlTokenMap.SILENT,\n    sparqlTokenMap.INTO,\n    sparqlTokenMap.AS,\n    sparqlTokenMap.CLEAR,\n    sparqlTokenMap.DROP,\n    sparqlTokenMap.CREATE,\n    sparqlTokenMap.ADD,\n    sparqlTokenMap.TO,\n    sparqlTokenMap.MOVE,\n    sparqlTokenMap.COPY,\n    sparqlTokenMap.INSERT_DATA,\n    sparqlTokenMap.DELETE_DATA,\n    sparqlTokenMap.DELETE_WHERE,\n    sparqlTokenMap.WITH,\n    sparqlTokenMap.DELETE,\n    sparqlTokenMap.INSERT,\n    sparqlTokenMap.USING,\n    sparqlTokenMap.DEFAULT,\n    sparqlTokenMap.GRAPH,\n    sparqlTokenMap.ALL,\n    sparqlTokenMap.OPTIONAL,\n    sparqlTokenMap.SERVICE,\n    sparqlTokenMap.BIND,\n    sparqlTokenMap.UNDEF,\n    sparqlTokenMap.MINUS,\n    sparqlTokenMap.UNION,\n    sparqlTokenMap.FILTER,\n    sparqlTokenMap.LANGMATCHES,\n    sparqlTokenMap.LANG,\n    sparqlTokenMap.DATATYPE,\n    sparqlTokenMap.BOUND,\n    sparqlTokenMap.IRI,\n    sparqlTokenMap.URI,\n    sparqlTokenMap.BNODE,\n    sparqlTokenMap.RAND,\n    sparqlTokenMap.ABS,\n    sparqlTokenMap.CEIL,\n    sparqlTokenMap.FLOOR,\n    sparqlTokenMap.ROUND,\n    sparqlTokenMap.CONCAT,\n    sparqlTokenMap.STRLEN,\n    sparqlTokenMap.UCASE,\n    sparqlTokenMap.LCASE,\n    sparqlTokenMap.ENCODE_FOR_URI,\n    sparqlTokenMap.CONTAINS,\n    sparqlTokenMap.STRSTARTS,\n    sparqlTokenMap.STRENDS,\n    sparqlTokenMap.STRBEFORE,\n    sparqlTokenMap.STRAFTER,\n    sparqlTokenMap.YEAR,\n    sparqlTokenMap.MONTH,\n    sparqlTokenMap.DAY,\n    sparqlTokenMap.HOURS,\n    sparqlTokenMap.MINUTES,\n    sparqlTokenMap.SECONDS,\n    sparqlTokenMap.TIMEZONE,\n    sparqlTokenMap.TZ,\n    sparqlTokenMap.NOW,\n    sparqlTokenMap.UUID,\n    sparqlTokenMap.STRUUID,\n    sparqlTokenMap.MD5,\n    sparqlTokenMap.SHA1,\n    sparqlTokenMap.SHA256,\n    sparqlTokenMap.SHA384,\n    sparqlTokenMap.SHA512,\n    sparqlTokenMap.COALESCE,\n    sparqlTokenMap.IF,\n    sparqlTokenMap.STRLANG,\n    sparqlTokenMap.STRDT,\n    sparqlTokenMap.STR,\n    sparqlTokenMap.sameTerm,\n    sparqlTokenMap.isIRI,\n    sparqlTokenMap.isURI,\n    sparqlTokenMap.isBLANK,\n    sparqlTokenMap.isLITERAL,\n    sparqlTokenMap.isNUMERIC,\n    sparqlTokenMap.REGEX,\n    sparqlTokenMap.SUBSTR,\n    sparqlTokenMap.REPLACE,\n    sparqlTokenMap.EXISTS,\n    sparqlTokenMap.NOT_EXISTS,\n    sparqlTokenMap.COUNT,\n    sparqlTokenMap.SUM,\n    sparqlTokenMap.MIN,\n    sparqlTokenMap.MAX_LENGTH,\n    sparqlTokenMap.MAX,\n    sparqlTokenMap.AVG,\n    sparqlTokenMap.SAMPLE,\n    sparqlTokenMap.GROUP_CONCAT,\n    sparqlTokenMap.SEPARATOR,\n    sparqlTokenMap.TRUE,\n    sparqlTokenMap.FALSE,\n    sparqlTokenMap.Semicolon,\n    sparqlTokenMap.Comma,\n    sparqlTokenMap.ForwardSlash,\n    sparqlTokenMap.DoubleCaret,\n    sparqlTokenMap.Caret,\n    sparqlTokenMap.LogicalOr,\n    sparqlTokenMap.Pipe,\n    sparqlTokenMap.LogicalAnd,\n    sparqlTokenMap.NotEquals,\n    sparqlTokenMap.Bang,\n    sparqlTokenMap.Equals,\n    sparqlTokenMap.LessThanEquals,\n    sparqlTokenMap.GreaterThanEquals,\n    sparqlTokenMap.LEmbed,\n    sparqlTokenMap.REmbed,\n    sparqlTokenMap.LessThan,\n    sparqlTokenMap.GreaterThan,\n    sparqlTokenMap.IN,\n    sparqlTokenMap.NOT_IN,\n    sparqlTokenMap.Unknown,\n    sparqlTokenMap.A,\n];\nexport var pathsTokens = [\n    sparqlTokenMap.START,\n    sparqlTokenMap.END,\n    sparqlTokenMap.VIA,\n    sparqlTokenMap.CYCLIC,\n    sparqlTokenMap.PATHS_SHORTEST,\n    sparqlTokenMap.PATHS_ALL,\n    sparqlTokenMap.PATHS,\n];\nexport var nonStandardTokens = pathsTokens.concat([sparqlTokenMap.UNNEST]);\nvar indexOfSelect = baseTokens.indexOf(sparqlTokenMap.SELECT);\nexport var stardogSparqlTokens = baseTokens.slice(0, indexOfSelect).concat(nonStandardTokens, baseTokens.slice(indexOfSelect));\nexport var sparqlTokenTypes = baseTokens.concat(nonStandardTokens);\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport escapeStringRegexp from 'escape-string-regexp';\nimport { isCstNode } from 'helpers/cst';\n// Given a SHACL prefix, returns a RegExp that can be used for grabbing the\n// local name (e.g., the 'NodeShape' in 'sh:NodeShape') from either a full\n// SHACL IRI or a prefixed local name.\nvar getShaclLocalNameMatcher = function (shaclPrefix) {\n    return new RegExp(\"(?:shacl#|\" + escapeStringRegexp(shaclPrefix) + \":)(\\\\S+?)>?$\");\n};\n// Traverses the tree of descendants for a given CstNode until a token is\n// found. Returns the \"start\" token for the CstNode (i.e., the earliest token\n// encompassed by the CstNode). This is useful for diagnostics.\nvar getUnderlyingStartToken = function (ctx) {\n    var currentNode = ctx;\n    while (currentNode.children) {\n        var currentNodeKey = Object.keys(currentNode.children)[0];\n        currentNode = currentNode.children[currentNodeKey][0];\n    }\n    return currentNode;\n};\n// Grabs the local name (e.g., the 'NodeShape' in 'sh:NodeShape') from either\n// a full SHACL IRI or a prefixed local name, if it is available.\nvar getLocalName = function (iri, matcher) {\n    var result = matcher.exec(iri);\n    if (result) {\n        return result[1];\n    }\n};\n// Given an initial (possibly partially complete) `shape` object and an array\n// of CstElements matching the `shaclRulePredicateObjectList` grammar rule,\n// transforms the `shape` into a complete `ShaclShape` with associated SHACL\n// types and predicates.\n// NOTE: mutates `shape`!\nvar addPredicatesAndTypesToShape = function (shape, shaclRulePredicateObjectListNodes) {\n    shaclRulePredicateObjectListNodes.forEach(function (node) {\n        var child = node.children[Object.keys(node.children)[0]][0];\n        switch (child.name) {\n            case 'shaclVerbShape': {\n                var token = getUnderlyingStartToken(child);\n                var verbTokenInsensitive = token.image.toLowerCase();\n                var isTypeVerb = verbTokenInsensitive === 'a' ||\n                    verbTokenInsensitive === 'rdf:type' ||\n                    verbTokenInsensitive ===\n                        '<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>';\n                if (!isTypeVerb) {\n                    return;\n                }\n                Object.keys(child.children).forEach(function (key) {\n                    if (key !== 'shaclShapeType') {\n                        return;\n                    }\n                    var shapeTypeNode = child.children[key][0];\n                    if (shapeTypeNode.children.SHACL_NodeShape) {\n                        shape.types.push({\n                            type: 'NodeShape',\n                            token: getUnderlyingStartToken(shapeTypeNode),\n                        });\n                    }\n                    else if (shapeTypeNode.children.SHACL_PropertyShape) {\n                        shape.types.push({\n                            type: 'PropertyShape',\n                            token: getUnderlyingStartToken(shapeTypeNode),\n                        });\n                    }\n                });\n                break;\n            }\n            case 'shaclPredicateIRI': {\n                if (child.children.SingleIriTakingPredicate) {\n                    shape.predicates.push({\n                        type: 'SingleIriTakingPredicate',\n                        token: getUnderlyingStartToken(child.children\n                            .SingleIriTakingPredicate[0]),\n                    });\n                }\n                else if (child.children.ManyIriTakingPredicate) {\n                    shape.predicates.push({\n                        type: 'ManyIriTakingPredicate',\n                        token: getUnderlyingStartToken(child.children\n                            .ManyIriTakingPredicate[0]),\n                    });\n                }\n                break;\n            }\n            case 'shaclNodeKind':\n                shape.predicates.push({\n                    type: 'nodeKind',\n                    token: child.children.SHACL_nodeKind[0],\n                });\n                break;\n            case 'shaclTargetNode':\n                shape.predicates.push({\n                    type: 'targetNode',\n                    token: child.children.SHACL_targetNode[0],\n                });\n                break;\n            case 'shaclPropertyPath':\n                shape.predicates.push({\n                    type: 'path',\n                    token: child.children.SHACL_path[0],\n                });\n                break;\n            case 'shaclLiteralConstraint':\n                shape.predicates.push({\n                    type: 'LiteralConstraint',\n                    token: getUnderlyingStartToken(child),\n                });\n                break;\n            case 'shaclListTakingConstraint':\n                shape.predicates.push({\n                    type: 'ListTakingConstraint',\n                    token: getUnderlyingStartToken(child),\n                });\n                break;\n            case 'shaclShapeExpectingConstraint':\n                shape.predicates.push({\n                    type: 'ShapeExpectingPredicate',\n                    token: child.children.ShapeExpectingPredicate[0],\n                });\n                break;\n            case 'shaclHasValueConstraint':\n                shape.predicates.push({\n                    type: 'hasValue',\n                    token: child.children.SHACL_hasValue[0],\n                });\n                break;\n            default:\n                console.log(\"SHACL predicateObjectList with name \" + child.name + \" not recognized.\");\n        }\n    });\n};\n// Utility method for constructing a `ShaclShape` from CstElements matching the\n// `shaclShape` grammar rule.\nvar getShaclShapeFromBlankNodePropertyList = function (ctx) {\n    var blankNodeNode = ctx.blankNodePropertyList[0];\n    var predicateObjectListNode = blankNodeNode.children.predicateObjectList[0];\n    var optionalPredicateObjectListNode = ctx.predicateObjectList\n        ? ctx.predicateObjectList[0]\n        : null;\n    if (!isCstNode(predicateObjectListNode) &&\n        !isCstNode(optionalPredicateObjectListNode)) {\n        return;\n    }\n    var shaclRulePredicateObjectListNodes = optionalPredicateObjectListNode &&\n        optionalPredicateObjectListNode.children &&\n        optionalPredicateObjectListNode.children.shaclRulePredicateObjectList\n        ? (predicateObjectListNode.children.shaclRulePredicateObjectList ||\n            []).concat(optionalPredicateObjectListNode.children\n            .shaclRulePredicateObjectList) : predicateObjectListNode.children.shaclRulePredicateObjectList;\n    if (!shaclRulePredicateObjectListNodes) {\n        return;\n    }\n    var shape = {\n        subject: {\n            type: 'blankNodePropertyList',\n            token: getUnderlyingStartToken(blankNodeNode),\n        },\n        types: [],\n        predicates: [],\n    };\n    addPredicatesAndTypesToShape(shape, shaclRulePredicateObjectListNodes);\n    return shape;\n};\n// Returns a new SHACL visitor that extends that given BaseVisitor. The SHACL\n// visitor is capable of constructing ShaclShape objects from a given CST and\n// then using those shapes to perform validations that cannot be performed in\n// the initial parse of a SHACL document.\nexport var getShaclVisitor = function (BaseVisitor) {\n    var ShaclVisitor = /** @class */ (function (_super) {\n        __extends(ShaclVisitor, _super);\n        function ShaclVisitor() {\n            var _this = _super.call(this) || this;\n            // `triples` have two alternatives, one with a `subject` and one with a\n            // `blankNodePropertyList`. This method constructs SHACL shapes for each\n            // alternative.\n            _this.triples = function (ctx) {\n                if (ctx.subject) {\n                    var predicateObjectListNode = ctx.predicateObjectList[0];\n                    if (!isCstNode(predicateObjectListNode)) {\n                        return;\n                    }\n                    var shaclRulePredicateObjectListNodes = predicateObjectListNode.children.shaclRulePredicateObjectList;\n                    if (!shaclRulePredicateObjectListNodes) {\n                        return;\n                    }\n                    var shape = {\n                        subject: {\n                            type: Object.keys(ctx.subject[0].children)[0] === 'collection'\n                                ? 'collection'\n                                : 'subject',\n                            token: getUnderlyingStartToken(ctx.subject[0]),\n                        },\n                        types: [],\n                        predicates: [],\n                    };\n                    addPredicatesAndTypesToShape(shape, shaclRulePredicateObjectListNodes);\n                    _this.shapes.push(shape);\n                    _this.visit(ctx.subject);\n                    _this.visit(predicateObjectListNode);\n                }\n                else {\n                    var shape = getShaclShapeFromBlankNodePropertyList(ctx);\n                    if (!shape) {\n                        return;\n                    }\n                    _this.shapes.push(shape);\n                    _this.visit(ctx.blankNodePropertyList);\n                    if (ctx.predicateObjectList) {\n                        _this.visit(ctx.predicateObjectList);\n                    }\n                }\n            };\n            // Some SHACL shapes (e.g., nested PropertyShapes) are not matched\n            // by the `triples` grammar rule; instead, they match `shapeShape`.\n            _this.shaclShape = function (ctx) {\n                if (!ctx.blankNodePropertyList) {\n                    // Not an inline shape we need to traverse, just an identifier.\n                    return;\n                }\n                var shape = getShaclShapeFromBlankNodePropertyList(ctx);\n                if (!shape) {\n                    return;\n                }\n                _this.shapes.push(shape);\n                _this.visit(ctx.blankNodePropertyList);\n            };\n            _this.$resetState = function () {\n                _this.shapes = [];\n            };\n            _this.$validateShapes = function (_a) {\n                var shaclPrefix = _a.shacl;\n                var validationErrors = [];\n                var localNameMatcher = getShaclLocalNameMatcher(shaclPrefix);\n                var bnodeCount = 0;\n                var shapesConsolidatedBySubject = _this.shapes.reduce(function (consolidatedShapes, shape) {\n                    var image = shape.subject.token.image;\n                    var subjectImage = image === '[' ? \"bnode\" + ++bnodeCount : image;\n                    if (!consolidatedShapes[subjectImage]) {\n                        consolidatedShapes[subjectImage] = {\n                            subjects: [shape.subject],\n                            types: shape.types,\n                            predicates: shape.predicates,\n                        };\n                    }\n                    else {\n                        var consolidatedShape = consolidatedShapes[subjectImage];\n                        consolidatedShapes[subjectImage] = {\n                            subjects: consolidatedShape.subjects.concat([shape.subject]),\n                            types: consolidatedShape.types.concat(shape.types),\n                            predicates: consolidatedShape.predicates.concat(shape.predicates),\n                        };\n                    }\n                    return consolidatedShapes;\n                }, {});\n                Object.keys(shapesConsolidatedBySubject).forEach(function (subjectImage) {\n                    var _a = shapesConsolidatedBySubject[subjectImage], subjects = _a.subjects, types = _a.types, predicates = _a.predicates;\n                    var shapeType;\n                    types.forEach(function (_a) {\n                        var type = _a.type;\n                        if (shapeType && type !== shapeType) {\n                            validationErrors.push({\n                                name: 'ShapeTypeError',\n                                message: 'A SHACL shape can be at most one of NodeShape or PropertyShape.',\n                                token: subjects[0].token,\n                            });\n                        }\n                        else if (!shapeType) {\n                            shapeType = type;\n                        }\n                    });\n                    var pathPredicates = [];\n                    var nonPathPredicateMap = {};\n                    predicates.forEach(function (predicate) {\n                        var image = predicate.token.image;\n                        var localName = getLocalName(image, localNameMatcher);\n                        var predicateImage = localName\n                            ? shaclPrefix + \":\" + localName\n                            : image;\n                        if (predicateImage === shaclPrefix + \":path\") {\n                            pathPredicates.push(predicate);\n                        }\n                        else {\n                            if (!nonPathPredicateMap[predicateImage]) {\n                                nonPathPredicateMap[predicateImage] = [];\n                            }\n                            nonPathPredicateMap[predicateImage].push(predicate);\n                        }\n                    });\n                    if (pathPredicates.length > 0) {\n                        if (shapeType === 'NodeShape') {\n                            validationErrors.push({\n                                name: 'ShapePropertyError',\n                                message: 'SHACL instances of `NodeShape` cannot have a value for the `path` property.',\n                                token: pathPredicates[0].token,\n                            });\n                        }\n                        else {\n                            shapeType = 'PropertyShape';\n                        }\n                        if (pathPredicates.length > 1) {\n                            validationErrors.push({\n                                name: 'ShapePropertyError',\n                                message: 'A shape can have at most one value for sh:path.',\n                                token: pathPredicates[1].token,\n                            });\n                        }\n                    }\n                    if (shapeType === 'NodeShape') {\n                        [\n                            'minCount',\n                            'maxCount',\n                            'uniqueLang',\n                            'lessThan',\n                            'lessThanOrEquals',\n                            'qualifiedValueShape',\n                        ].forEach(function (image) {\n                            var prefixedImage = shaclPrefix + \":\" + image;\n                            if (nonPathPredicateMap[prefixedImage]) {\n                                validationErrors.push({\n                                    name: 'ShapePropertyError',\n                                    message: \"A NodeShape cannot have any value for \" + prefixedImage + \".\",\n                                    token: nonPathPredicateMap[prefixedImage][0].token,\n                                });\n                            }\n                        });\n                    }\n                    else {\n                        [\n                            'deactivated',\n                            'severity',\n                            'datatype',\n                            'nodeKind',\n                            'minCount',\n                            'maxCount',\n                            'minExclusive',\n                            'minInclusive',\n                            'maxExclusive',\n                            'maxInclusive',\n                            'minLength',\n                            'maxLength',\n                            'languageIn',\n                            'uniqueLang',\n                            'in',\n                        ].forEach(function (image) {\n                            var prefixedImage = shaclPrefix + \":\" + image;\n                            if (nonPathPredicateMap[prefixedImage] &&\n                                nonPathPredicateMap[prefixedImage].length > 1) {\n                                validationErrors.push({\n                                    name: 'ShapePropertyError',\n                                    message: \"A shape can have at most one value for \" + prefixedImage + \".\",\n                                    token: nonPathPredicateMap[prefixedImage][1].token,\n                                });\n                            }\n                        });\n                    }\n                });\n                return { validationErrors: validationErrors };\n            };\n            _this.validateVisitor();\n            _this.shapes = [];\n            return _this;\n        }\n        return ShaclVisitor;\n    }(BaseVisitor));\n    return new ShaclVisitor();\n};\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { TurtleParser } from '../turtle/TurtleParser';\nimport { Lexer, Parser, } from 'chevrotain';\nimport { getShaclVisitor } from 'shacl/visitor';\nvar _a = require('./tokens'), getShaclTokenTypes = _a.getShaclTokenTypes, getShaclTokenMap = _a.getShaclTokenMap, categoryTokenMap = _a.categoryTokenMap;\nvar turtleTokenMap = require('../turtle/tokens').turtleTokenMap;\n// A SHACL parser for the Turtle serialization of SHACL only. The parser can\n// can accept any arbitrary namespace prefix for SHACL/XSD and still tokenize\n// and parse the document correctly (it will also, of course, parse docuemnts\n// using the full SHACL/XSD IRIs). The parser runs both a parse phase and a\n// second validation phase (using a visitor) in order to accommodate SHACL\n// rules that are not purely syntactic.\nvar ShaclParser = /** @class */ (function (_super) {\n    __extends(ShaclParser, _super);\n    function ShaclParser(config, prefixes) {\n        if (prefixes === void 0) { prefixes = { shacl: 'sh', xsd: 'xsd' }; }\n        var _this = _super.call(this, __assign({ outputCst: true, recoveryEnabled: true }, config), getShaclTokenTypes(prefixes), getShaclTokenTypes(prefixes), false) || this;\n        // Some SHACL rules cannot be checked for violations during the first parse.\n        // The visitor accepts the CST that results from parsing and checks\n        // conformity with these SHACL rules.\n        _this.validateWithVisitor = function (cst) {\n            // To save resources while parsing, the shaclVisitor is a singleton.\n            if (!_this.shaclVisitor) {\n                var BaseSrsVisitor = _this.getBaseCstVisitorConstructorWithDefaults();\n                _this.shaclVisitor = getShaclVisitor(BaseSrsVisitor);\n            }\n            else {\n                _this.shaclVisitor.$resetState();\n            }\n            _this.shaclVisitor.visit(cst);\n            return _this.shaclVisitor.$validateShapes(_this.prefixes);\n        };\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        _this.parse = function (document) {\n            _this.input = _this.tokenize(document);\n            var cst = _this.turtleDoc();\n            var validationErrors = _this.validateWithVisitor(cst).validationErrors;\n            // Next two items are copied so that they can be returned/held after parse\n            // state is cleared.\n            var errors = _this.errors.slice();\n            var semanticErrors = _this.semanticErrors.concat(validationErrors);\n            return {\n                errors: errors,\n                semanticErrors: semanticErrors,\n                cst: cst,\n            };\n        };\n        _this.predicateObjectList = _this.OVERRIDE_RULE('predicateObjectList', function () {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.shaclRulePredicateObjectList);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.verb);\n                        _this.SUBRULE(_this.objectList);\n                    },\n                },\n            ]);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.OR1([\n                        {\n                            ALT: function () {\n                                _this.SUBRULE1(_this.shaclRulePredicateObjectList);\n                            },\n                        },\n                        {\n                            ALT: function () {\n                                _this.SUBRULE1(_this.verb);\n                                _this.SUBRULE1(_this.objectList);\n                            },\n                        },\n                    ]);\n                });\n            });\n        });\n        _this.shaclRulePredicateObjectList = _this.RULE('shaclRulePredicateObjectList', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclPredicateIRI); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclNodeKind); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclTargetNode); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclPropertyPath); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclLiteralConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclListTakingConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclShapeExpectingConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclHasValueConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclVerbShape); },\n                },\n            ]);\n        });\n        _this.shaclPredicateIRI = _this.RULE('shaclPredicateIRI', function () {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.CONSUME(categoryTokenMap.SingleIriTakingPredicate);\n                        _this.SUBRULE(_this.iri);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.CONSUME(categoryTokenMap.ManyIriTakingPredicate);\n                        _this.SUBRULE1(_this.iri);\n                        _this.MANY(function () {\n                            _this.CONSUME(turtleTokenMap.Comma);\n                            _this.SUBRULE2(_this.iri);\n                        });\n                    },\n                },\n            ]);\n        });\n        _this.shaclNodeKind = _this.RULE('shaclNodeKind', function () {\n            _this.CONSUME(_this.shaclTokenMap.SHACL_nodeKind);\n            _this.CONSUME(categoryTokenMap.NodeKindIRI);\n        });\n        _this.shaclTargetNode = _this.RULE('shaclTargetNode', function () {\n            _this.CONSUME(_this.shaclTokenMap.SHACL_targetNode);\n            _this.SUBRULE(_this.shaclIRIOrLiteral);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Comma);\n                _this.SUBRULE1(_this.shaclIRIOrLiteral);\n            });\n        });\n        _this.shaclVerbShape = _this.RULE('shaclVerbShape', function () {\n            _this.SUBRULE(_this.verb);\n            _this.SUBRULE(_this.shaclShapeType);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Comma);\n                _this.SUBRULE1(_this.shaclShapeType);\n            });\n        });\n        _this.shaclShapeType = _this.RULE('shaclShapeType', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_Shape); },\n                },\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_NodeShape); },\n                },\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_PropertyShape); },\n                },\n            ]);\n        });\n        _this.shaclPropertyPath = _this.RULE('shaclPropertyPath', function () {\n            _this.CONSUME(_this.shaclTokenMap.SHACL_path);\n            _this.SUBRULE(_this.shaclPropertyPathPath);\n        });\n        _this.shaclPropertyPathPath = _this.RULE('shaclPropertyPathPath', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclPredicatePath); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclSequencePath); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclAlternativePath); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclInversePath); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclZeroOrMorePath); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclOneOrMorePath); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclZeroOrOnePath); },\n                },\n            ]);\n        });\n        _this.shaclPredicatePath = _this.RULE('shaclPredicatePath', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.iri); },\n                },\n                {\n                    // This case does not seem to be allowed by the SHACL spec, but the\n                    // online W3C validator accepts one level of parens wrapping the IRI.\n                    ALT: function () {\n                        _this.CONSUME(turtleTokenMap.LParen);\n                        _this.SUBRULE1(_this.iri);\n                        _this.CONSUME(turtleTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.shaclSequencePath = _this.RULE('shaclSequencePath', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.SUBRULE(_this.shaclPropertyPathPath);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE1(_this.shaclPropertyPathPath); });\n            _this.OPTION(function () { return _this.CONSUME(turtleTokenMap.Semicolon); });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.shaclAlternativePath = _this.RULE('shaclAlternativePath', function () {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_alternativePath);\n            _this.SUBRULE(_this.shaclPropertyPathPath); // This does not match the SHACL spec, but it does match the test cases, which violate the spec. ;_;\n            _this.OPTION(function () { return _this.CONSUME(turtleTokenMap.Semicolon); });\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.shaclInversePath = _this.RULE('shaclInversePath', function () {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_inversePath);\n            _this.SUBRULE(_this.shaclPropertyPathPath);\n            _this.OPTION(function () { return _this.CONSUME(turtleTokenMap.Semicolon); });\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.shaclZeroOrMorePath = _this.RULE('shaclZeroOrMorePath', function () {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_zeroOrMorePath);\n            _this.SUBRULE(_this.shaclPropertyPathPath);\n            _this.OPTION(function () { return _this.CONSUME(turtleTokenMap.Semicolon); });\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.shaclOneOrMorePath = _this.RULE('shaclOneOrMorePath', function () {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_oneOrMorePath);\n            _this.SUBRULE(_this.shaclPropertyPathPath);\n            _this.OPTION(function () { return _this.CONSUME(turtleTokenMap.Semicolon); });\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.shaclZeroOrOnePath = _this.RULE('shaclZeroOrOnePath', function () {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_zeroOrOnePath);\n            _this.SUBRULE(_this.shaclPropertyPathPath);\n            _this.OPTION(function () { return _this.CONSUME(turtleTokenMap.Semicolon); });\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.shaclLiteralConstraint = _this.RULE('shaclLiteralConstraint', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclIntConstraint); },\n                },\n                // TODO: Some specificity here is possibly unnecessary -- e.g., maybe `shaclStringConstraint` and `shaclStringLiteralQuoteConstraint` can be consolidated in some way?\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclStringConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclStringLiteralQuoteConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclLangStringConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclBooleanConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclAnyLiteralConstraint); },\n                },\n            ]);\n        });\n        _this.shaclIntConstraint = _this.RULE('shaclIntConstraint', function () {\n            _this.CONSUME(categoryTokenMap.IntTakingPredicate);\n            _this.OR([\n                {\n                    ALT: function () { return _this.CONSUME(turtleTokenMap.INTEGER); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclXsdInteger); },\n                },\n            ]);\n        });\n        _this.shaclStringConstraint = _this.RULE('shaclStringConstraint', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_select); },\n                },\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_ask); },\n                },\n            ]);\n            _this.SUBRULE(_this.String); // TODO: a bit too lax?\n        });\n        _this.shaclStringLiteralQuoteConstraint = _this.RULE('shaclStringLiteralQuoteConstraint', function () {\n            _this.CONSUME(categoryTokenMap.StringLiteralQuoteTakingPredicate);\n            _this.CONSUME(turtleTokenMap.STRING_LITERAL_QUOTE);\n            _this.OPTION(function () {\n                _this.OR([\n                    {\n                        ALT: function () { return _this.CONSUME(turtleTokenMap.LANGTAG); },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(turtleTokenMap.DoubleCaret);\n                            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_string);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME1(turtleTokenMap.DoubleCaret);\n                            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_anyURI);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.shaclLangStringConstraint = _this.RULE('shaclLangStringConstraint', function () {\n            _this.CONSUME(categoryTokenMap.LangStringTakingPredicate);\n            _this.SUBRULE(_this.String);\n            _this.OPTION(function () {\n                _this.OR([\n                    {\n                        ALT: function () { return _this.CONSUME(turtleTokenMap.LANGTAG); },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(turtleTokenMap.DoubleCaret);\n                            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_string);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.shaclBooleanConstraint = _this.RULE('shaclBooleanConstraint', function () {\n            _this.CONSUME(categoryTokenMap.BooleanTakingPredicate);\n            _this.OR([\n                {\n                    ALT: function () { return _this.CONSUME(turtleTokenMap.TRUE); },\n                },\n                {\n                    ALT: function () { return _this.CONSUME(turtleTokenMap.FALSE); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclXsdBoolean); },\n                },\n            ]);\n        });\n        _this.shaclAnyLiteralConstraint = _this.RULE('shaclAnyLiteralConstraint', function () {\n            _this.CONSUME(categoryTokenMap.AnyLiteralTakingPredicate);\n            _this.SUBRULE(_this.literal);\n        });\n        _this.shaclListTakingConstraint = _this.RULE('shaclListTakingConstraint', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclLanguageInConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclShapeListTakingConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclIRIListTakingConstraint); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclShapeOrLiteralListTakingConstraint); },\n                },\n            ]);\n        });\n        _this.shaclLanguageInConstraint = _this.RULE('shaclLanguageInConstraint', function () {\n            _this.CONSUME(_this.shaclTokenMap.SHACL_languageIn);\n            _this.SUBRULE(_this.shaclStringCollection);\n        });\n        _this.shaclStringCollection = _this.RULE('shaclStringCollection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.STRING_LITERAL_QUOTE);\n            });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.shaclShapeListTakingConstraint = _this.RULE('shaclShapeListTakingConstraint', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_and); },\n                },\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_or); },\n                },\n                {\n                    ALT: function () { return _this.CONSUME(_this.shaclTokenMap.SHACL_xone); },\n                },\n            ]);\n            _this.SUBRULE(_this.shaclShapeCollection);\n        });\n        _this.shaclShapeCollection = _this.RULE('shaclShapeCollection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () {\n                _this.SUBRULE(_this.shaclShape);\n            });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.shaclIRIListTakingConstraint = _this.RULE('shaclIRIListTakingConstraint', function () {\n            _this.CONSUME(_this.shaclTokenMap.SHACL_ignoredProperties);\n            _this.SUBRULE(_this.shaclIRICollection);\n        });\n        _this.shaclIRICollection = _this.RULE('shaclIRICollection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () {\n                _this.SUBRULE(_this.iri);\n            });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.shaclShapeOrLiteralListTakingConstraint = _this.RULE('shaclShapeOrLiteralListTakingConstraint', function () {\n            _this.CONSUME(_this.shaclTokenMap.SHACL_in);\n            _this.SUBRULE(_this.shaclShapeOrLiteralCollection);\n        });\n        _this.shaclShapeOrLiteralCollection = _this.RULE('shaclShapeOrLiteralCollection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () {\n                _this.SUBRULE(_this.shaclShapeOrLiteral);\n            });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.shaclShapeExpectingConstraint = _this.RULE('shaclShapeExpectingConstraint', function () {\n            _this.CONSUME(categoryTokenMap.ShapeExpectingPredicate);\n            _this.SUBRULE(_this.shaclShape);\n        });\n        _this.shaclHasValueConstraint = _this.RULE('shaclHasValueConstraint', function () {\n            _this.CONSUME(_this.shaclTokenMap.SHACL_hasValue);\n            _this.SUBRULE(_this.shaclShapeOrLiteral);\n        });\n        _this.shaclShape = _this.RULE('shaclShape', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.iri); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.blankNodePropertyList); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.BlankNode); },\n                },\n            ]);\n        });\n        _this.shaclShapeOrLiteral = _this.RULE('shaclShapeOrLiteral', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.shaclShape); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.literal); },\n                },\n            ]);\n        });\n        _this.shaclIRIOrLiteral = _this.RULE('shaclIRIOrLiteral', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.iri); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.literal); },\n                },\n            ]);\n        });\n        _this.shaclXsdBoolean = _this.RULE('shaclXsdBoolean', function () {\n            _this.SUBRULE(_this.shaclStringWithDoubleCaret);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_boolean);\n        });\n        _this.shaclXsdString = _this.RULE('shaclXsdString', function () {\n            _this.SUBRULE(_this.shaclStringWithDoubleCaret);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_string);\n        });\n        _this.shaclXsdInteger = _this.RULE('shaclXsdInteger', function () {\n            _this.SUBRULE(_this.shaclStringWithDoubleCaret);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_integer);\n        });\n        _this.shaclXsdDate = _this.RULE('shaclXsdDate', function () {\n            _this.SUBRULE(_this.shaclStringWithDoubleCaret);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_date);\n        });\n        _this.shaclXsdAnyURI = _this.RULE('shaclXsdAnyURI', function () {\n            _this.SUBRULE(_this.shaclStringWithDoubleCaret);\n            _this.CONSUME(_this.shaclTokenMap.SHACL_xsd_anyURI);\n        });\n        _this.shaclStringWithDoubleCaret = _this.RULE('shaclStringWithDoubleCaret', function () {\n            _this.SUBRULE(_this.String);\n            _this.CONSUME(turtleTokenMap.DoubleCaret);\n        });\n        _this.prefixes = prefixes;\n        _this.lexer = new Lexer(getShaclTokenTypes(prefixes));\n        _this.shaclTokenMap = getShaclTokenMap(prefixes);\n        Parser.performSelfAnalysis(_this);\n        return _this;\n    }\n    return ShaclParser;\n}(TurtleParser));\nexport { ShaclParser };\n","export * from './ShaclParser';\n// Convenience imports/exports that aren't core functionality:\n// NOTE: Tokens MUST be imported using CommonJS syntax; see here: https://github.com/SAP/chevrotain/issues/345\nexport var shaclTokens = require('./tokens');\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexport var traverse = function (root, visit) {\n    _traverse(root, null, visit);\n};\nexport var unsafeTraverse = function (root, visit) {\n    _traverse(root, null, visit, false);\n};\nexport function isCstNode(object) {\n    return Boolean(object && 'name' in object);\n}\nvar TraverseContext = /** @class */ (function () {\n    function TraverseContext(_a) {\n        var node = _a.node, parentCtx = _a.parentCtx;\n        this.node = __assign({}, node);\n        this.parentCtx = __assign({}, parentCtx);\n    }\n    return TraverseContext;\n}());\nvar _traverse = function (root, ctx, visit, visitSafely) {\n    if (ctx === void 0) { ctx = new TraverseContext({ node: root }); }\n    if (visitSafely === void 0) { visitSafely = true; }\n    if (!isCstNode(root)) {\n        // must be a token\n        return visit(visitSafely ? __assign({}, ctx) : ctx);\n    }\n    // is a grammar rule node\n    var children = root.children;\n    Object.keys(children).forEach(function (key) {\n        var childType = children[key];\n        if (!childType.length) {\n            return;\n        }\n        childType.forEach(function (child) {\n            var childCtx = visitSafely\n                ? new TraverseContext({ node: child, parentCtx: ctx })\n                : { node: child, parentCtx: ctx };\n            var afterVisit = function (transformedCtx) {\n                var nextCtx = childCtx;\n                if (transformedCtx) {\n                    nextCtx = visitSafely\n                        ? new TraverseContext({\n                            node: transformedCtx.node,\n                            parentCtx: transformedCtx.parentCtx,\n                        })\n                        : {\n                            node: transformedCtx.node,\n                            parentCtx: transformedCtx.parentCtx,\n                        };\n                }\n                _traverse(child, nextCtx, visit, visitSafely);\n            };\n            visit(childCtx, afterVisit);\n        });\n    });\n};\n","/*\nCopyright ©2012–2018 Ruben Verborgh\nWith modifications Copyright ©2018 Stardog Union\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nvar escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\[uU]|\\\\(.)/g;\nvar escapeReplacements = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\"': '\"',\n    n: '\\n',\n    r: '\\r',\n    t: '\\t',\n    f: '\\f',\n    b: '\\b',\n    _: '_',\n    '~': '~',\n    '.': '.',\n    '-': '-',\n    '!': '!',\n    $: '$',\n    '&': '&',\n    '(': '(',\n    ')': ')',\n    '*': '*',\n    '+': '+',\n    ',': ',',\n    ';': ';',\n    '=': '=',\n    '/': '/',\n    '?': '?',\n    '#': '#',\n    '@': '@',\n    '%': '%',\n};\nexport var unescapedStringLiteralQuote = /^\"([^\"\\\\\\r\\n]+)\"/; // non-empty string without escape sequences\nexport var unescapedStringLiteralSingleQuote = /^'([^'\\\\\\r\\n]+)'/;\nexport var stringLiteralQuote = /^\"((?:[^\"\\\\\\r\\n]|\\\\.)*)\"(?=[^\"])/;\nexport var stringLiteralSingleQuote = /^'((?:[^'\\\\\\r\\n]|\\\\.)*)'(?=[^'])/;\nexport var stringLiteralLongQuote = /^\"\"\"([^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*)\"\"\"/;\nexport var stringLiteralLongSingleQuote = /^'''([^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*)'''/;\nexport var illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\nexport var escapedIri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/;\nexport var unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/;\n// Handle special unescaping needs related to the IRIREF rule and others.\nexport var unescape = function (item) {\n    try {\n        return item.replace(escapeSequence, function (_, unicode4, unicode8, escapedChar) {\n            if (unicode4) {\n                return String.fromCharCode(parseInt(unicode4, 16));\n            }\n            else if (unicode8) {\n                var charCode = parseInt(unicode8, 16);\n                if (charCode <= 0xffff) {\n                    return String.fromCharCode(charCode);\n                }\n                return String.fromCharCode(0xd800 + (charCode -= 0x10000) / 0x400, 0xdc00 + (charCode & 0x3ff));\n            }\n            else {\n                var replacement = escapeReplacements[escapedChar];\n                if (!replacement) {\n                    throw new Error();\n                }\n                return replacement;\n            }\n        });\n    }\n    catch (error) {\n        return null;\n    }\n};\n","var sparqlTokenMap = require('../sparql/tokens').sparqlTokenMap;\nimport { createToken } from 'chevrotain';\nimport { regex } from '../helpers/regex';\nimport { EXPONENT, ECHAR, PLX, HEX, PN_CHARS_BASE, PN_CHARS_U, PN_CHARS, PN_PREFIX, PN_LOCAL, PN_LOCAL_ESC, } from '../helpers/matchers';\nimport { unescape, stringLiteralLongSingleQuote, stringLiteralLongQuote, unescapedStringLiteralQuote, stringLiteralQuote, unescapedStringLiteralSingleQuote, stringLiteralSingleQuote, unescapedIri, escapedIri, illegalIriChars, } from '../helpers/unescape';\nvar unicodeRegexp = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nexport var turtleTokenMap = {\n    Comment: createToken({\n        name: 'Comment',\n        pattern: /#[^\\n]*/,\n        group: 'comments',\n    }),\n    LBracket: sparqlTokenMap.LBracket,\n    RBracket: sparqlTokenMap.RBracket,\n    LCurly: sparqlTokenMap.LCurly,\n    RCurly: sparqlTokenMap.RCurly,\n    LParen: sparqlTokenMap.LParen,\n    RParen: sparqlTokenMap.RParen,\n    Period: sparqlTokenMap.Period,\n    WhiteSpace: sparqlTokenMap.WhiteSpace,\n    // 'true' and 'false' are case sensitive in Turtle but not in SPARQL\n    TRUE: createToken({\n        name: 'TRUE',\n        pattern: /true/,\n    }),\n    FALSE: createToken({\n        name: 'FALSE',\n        pattern: /false/,\n    }),\n    DoubleCaret: sparqlTokenMap.DoubleCaret,\n    LEmbed: sparqlTokenMap.LEmbed,\n    REmbed: sparqlTokenMap.REmbed,\n    Comma: sparqlTokenMap.Comma,\n    Semicolon: sparqlTokenMap.Semicolon,\n    A: sparqlTokenMap.A,\n    PREFIX: sparqlTokenMap.PREFIX,\n    BASE: sparqlTokenMap.BASE,\n    PNAME_NS: sparqlTokenMap.PNAME_NS,\n    PNAME_LN: sparqlTokenMap.PNAME_LN,\n    BLANK_NODE_LABEL: sparqlTokenMap.BLANK_NODE_LABEL,\n    TTL_BASE: createToken({ name: 'TTL_BASE', pattern: /@base/ }),\n    TTL_PREFIX: createToken({ name: 'TTL_PREFIX', pattern: /@prefix/ }),\n    LANGTAG: sparqlTokenMap.LANGTAG,\n    INTEGER: createToken({\n        name: 'INTEGER',\n        pattern: regex.and(regex.option(/[+-]/), /\\d+/),\n    }),\n    DECIMAL: createToken({\n        name: 'DECIMAL',\n        pattern: regex.and(regex.option(/[+-]/), /(\\d*\\.\\d+)/),\n    }),\n    DOUBLE: createToken({\n        name: 'DOUBLE',\n        pattern: regex.and(regex.option(/[+-]/), regex.or(regex.and(/\\d+\\.\\d*/, EXPONENT), regex.and(/\\.\\d+/, EXPONENT), regex.and(/\\d+/, EXPONENT))),\n    }),\n    EXPONENT: createToken({ name: 'EXPONENT', pattern: EXPONENT }),\n    ECHAR: createToken({ name: 'ECHAR', pattern: ECHAR }),\n    ANON: sparqlTokenMap.ANON,\n    PLX: createToken({ name: 'PLX', pattern: PLX }),\n    PERCENT: sparqlTokenMap.PERCENT,\n    HEX: createToken({ name: 'HEX', pattern: HEX }),\n    STRING_LITERAL_LONG_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongSingleQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_LONG_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_QUOTE: createToken({\n        name: 'STRING_LITERAL_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    STRING_LITERAL_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralSingleQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralSingleQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    UCHAR: createToken({\n        name: 'UCHAR',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            return unicodeRegexp.exec(text.slice(startOffset));\n        },\n        line_breaks: false,\n    }),\n    IRIREF: createToken({\n        name: 'IRIREF',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedIri.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = escapedIri.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            var value = unescape(match[1]);\n            if (value === null || illegalIriChars.test(value)) {\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    PN_CHARS_BASE: createToken({ name: 'PN_CHARS_BASE', pattern: PN_CHARS_BASE }),\n    PN_CHARS_U: createToken({ name: 'PN_CHARS_U', pattern: PN_CHARS_U }),\n    PN_CHARS: createToken({ name: 'PN_CHARS', pattern: PN_CHARS }),\n    PN_PREFIX: createToken({ name: 'PN_PREFIX', pattern: PN_PREFIX }),\n    PN_LOCAL: createToken({ name: 'PN_LOCAL', pattern: PN_LOCAL }),\n    PN_LOCAL_ESC: createToken({ name: 'PN_LOCAL_ESC', pattern: PN_LOCAL_ESC }),\n    Unknown: createToken({\n        name: 'Unknown',\n        pattern: /\\w+/,\n    }),\n};\nexport var turtleTokenTypes = [\n    turtleTokenMap.Comment,\n    sparqlTokenMap.ANON,\n    sparqlTokenMap.LBracket,\n    sparqlTokenMap.RBracket,\n    sparqlTokenMap.LCurly,\n    sparqlTokenMap.RCurly,\n    sparqlTokenMap.LParen,\n    sparqlTokenMap.RParen,\n    sparqlTokenMap.WhiteSpace,\n    turtleTokenMap.TRUE,\n    turtleTokenMap.FALSE,\n    sparqlTokenMap.Comma,\n    sparqlTokenMap.Semicolon,\n    sparqlTokenMap.PNAME_NS,\n    sparqlTokenMap.A,\n    sparqlTokenMap.PREFIX,\n    sparqlTokenMap.BASE,\n    sparqlTokenMap.PNAME_LN,\n    sparqlTokenMap.BLANK_NODE_LABEL,\n    turtleTokenMap.TTL_BASE,\n    turtleTokenMap.TTL_PREFIX,\n    sparqlTokenMap.LANGTAG,\n    turtleTokenMap.DOUBLE,\n    turtleTokenMap.DECIMAL,\n    sparqlTokenMap.Period,\n    sparqlTokenMap.DoubleCaret,\n    turtleTokenMap.LEmbed,\n    turtleTokenMap.REmbed,\n    turtleTokenMap.IRIREF,\n    turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE,\n    turtleTokenMap.STRING_LITERAL_LONG_QUOTE,\n    turtleTokenMap.STRING_LITERAL_QUOTE,\n    turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE,\n    turtleTokenMap.INTEGER,\n    turtleTokenMap.EXPONENT,\n    turtleTokenMap.PLX,\n    sparqlTokenMap.PERCENT,\n    turtleTokenMap.HEX,\n    turtleTokenMap.PN_CHARS_BASE,\n    turtleTokenMap.PN_CHARS_U,\n    turtleTokenMap.PN_CHARS,\n    turtleTokenMap.PN_PREFIX,\n    turtleTokenMap.PN_LOCAL,\n    turtleTokenMap.PN_LOCAL_ESC,\n    turtleTokenMap.ECHAR,\n    turtleTokenMap.UCHAR,\n    turtleTokenMap.Unknown,\n];\n"],"sourceRoot":""}