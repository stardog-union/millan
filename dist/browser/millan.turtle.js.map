{"version":3,"sources":["webpack://millan.[name]/webpack/universalModuleDefinition","webpack://millan.[name]/webpack/bootstrap","webpack://millan.[name]/./src/sparql/keywords.ts","webpack://millan.[name]/./src/helpers/unescape.ts","webpack://millan.[name]/./src/turtle/tokens.ts","webpack://millan.[name]/./src/turtle/TurtleParser.ts","webpack://millan.[name]/./src/helpers/regex.ts","webpack://millan.[name]/./src/helpers/matchers.ts","webpack://millan.[name]/./src/sparql/terminals.ts","webpack://millan.[name]/./src/sparql/tokens.ts","webpack://millan.[name]/./src/turtle/index.ts"],"names":["root","factory","exports","module","define","amd","self","this","webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","7","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","oldJsonpFunction","slice","__webpack_exports__","keywords","chevrotain__WEBPACK_IMPORTED_MODULE_0__","MAX_LENGTH","pattern","SELECT","CONSTRUCT","DISTINCT","START","END","VIA","PATHS","PATHS_ALL","PATHS_SHORTEST","CYCLIC","AS","WHERE","A","GroupBy","OrderBy","By","BASE","PREFIX","DESCRIBE","ASK","FROM","REDUCED","NAMED","HAVING","ASC","DESC","OFFSET","LIMIT","VALUES","LOAD","SILENT","INTO","CLEAR","DROP","CREATE","ADD","TO","MOVE","COPY","INSERT_DATA","DELETE_DATA","DELETE_WHERE","WITH","DELETE","INSERT","USING","DEFAULT","GRAPH","ALL","OPTIONAL","SERVICE","BIND","UNNEST","UNDEF","MINUS","UNION","FILTER","STR","LANG","LANGMATCHES","DATATYPE","BOUND","IRI","URI","BNODE","RAND","ABS","CEIL","FLOOR","ROUND","CONCAT","STRLEN","UCASE","LCASE","ENCODE_FOR_URI","CONTAINS","STRSTARTS","STRENDS","STRBEFORE","STRAFTER","YEAR","MONTH","DAY","HOURS","MINUTES","SECONDS","TIMEZONE","TZ","NOW","UUID","STRUUID","MD5","SHA1","SHA256","SHA384","SHA512","COALESCE","IF","STRLANG","STRDT","sameTerm","isIRI","isURI","isBlank","isLiteral","isNumeric","REGEX","SUBSTR","REPLACE","EXISTS","NOT_EXISTS","COUNT","SUM","MIN","AVG","SAMPLE","GROUP_CONCAT","SEPARATOR","TRUE","FALSE","IN","NOT_IN","MAX","longer_alt","escapeSequence","escapeReplacements","\\","'","\"","f","b","_","~",".","-","!","$","&","(",")","*","+",",",";","=","/","?","#","@","%","unescapedStringLiteralQuote","unescapedStringLiteralSingleQuote","stringLiteralQuote","stringLiteralSingleQuote","stringLiteralLongQuote","stringLiteralLongSingleQuote","illegalIriChars","escapedIri","unescapedIri","unescape_unescape","item","replace","unicode4","unicode8","escapedChar","String","fromCharCode","parseInt","charCode","replacement","Error","error","turtleTokenMap","turtleTokenTypes","sparqlTokenMap","unicodeRegexp","Comment","api","group","LBracket","RBracket","LParen","RParen","Period","WhiteSpace","DoubleCaret","Comma","Semicolon","PNAME_NS","PNAME_LN","BLANK_NODE_LABEL","TTL_BASE","TTL_PREFIX","LANGTAG","INTEGER","regex","and","option","DECIMAL","DOUBLE","or","matchers","EXPONENT","ECHAR","ANON","PLX","PERCENT","HEX","STRING_LITERAL_LONG_SINGLE_QUOTE","text","startOffset","match","exec","line_breaks","STRING_LITERAL_LONG_QUOTE","STRING_LITERAL_QUOTE","textToMatch","STRING_LITERAL_SINGLE_QUOTE","UCHAR","IRIREF","test","PN_CHARS_BASE","PN_CHARS_U","PN_CHARS","PN_PREFIX","PN_LOCAL","PN_LOCAL_ESC","Unknown","TurtleParser","extendStatics","__extends","setPrototypeOf","__proto__","Array","__","constructor","__assign","assign","arguments","_a","_super","config","tokens","lexerDefinition","performSelfAnalysis","_this","outputCst","recoveryEnabled","namespacesMap","semanticErrors","resetManagedState","tokenize","document","lexer","parse","input","cst","turtleDoc","errors","RULE","MANY","SUBRULE","statement","OR","ALT","directive","triples","CONSUME","prefixID","base","sparqlPrefix","sparqlBase","pnameNsToken","iriToken","pnameImageWithoutColon","image","iriImage","subject","predicateObjectList","blankNodePropertyList","OPTION","SUBRULE1","verb","objectList","iri","BlankNode","collection","predicate","literal","RDFLiteral","NumericLiteral","BooleanLiteral","PrefixedName","prefixedNameToken","indexOf","message","token","context","ruleStack","getHumanReadableRuleStack","ruleOccurrenceStack","RULE_OCCURRENCE_STACK","resyncedTokens","_i","RegExp","map","source","join","many","CATCH_ALL_AT_LEAST_ONE","NIL","STRING_LITERAL1","STRING_LITERAL2","STRING_LITERAL_LONG1","STRING_LITERAL_LONG2","INTEGER_POSITIVE","DECIMAL_POSITIVE","DOUBLE_POSITIVE","INTEGER_NEGATIVE","DECIMAL_NEGATIVE","DOUBLE_NEGATIVE","VAR1","VAR2","_regex__WEBPACK_IMPORTED_MODULE_0__","WS","VARNAME","terminals","helpers_matchers__WEBPACK_IMPORTED_MODULE_1__","STRING_LITERAL_LONG1_TOKEN","STRING_LITERAL_LONG2_TOKEN","PNAME_LN_TOKEN","label","baseTokens","pathsTokens","nonStandardTokens","stardogSparqlTokens","sparqlTokenTypes","_terminals__WEBPACK_IMPORTED_MODULE_1__","_keywords__WEBPACK_IMPORTED_MODULE_2__","LCurly","RCurly","SKIPPED","Star","QuestionMark","Plus","Minus","Pipe","ForwardSlash","Caret","Bang","LogicalOr","LogicalAnd","Equals","NotEquals","LessThan","GreaterThan","LessThanEquals","GreaterThanEquals","concat","indexOfSelect","turtleTokens","_TurtleParser__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"millan.turtle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"turtle\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"turtle\"] = factory();\n\telse\n\t\troot[\"millan\"] = root[\"millan\"] || {}, root[\"millan\"][\"turtle\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t7: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([63,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// @ts-ignore: import types for declarations\nimport { createToken } from 'chevrotain';\nvar MAX_LENGTH = createToken({\n    name: 'MAX_LENGTH',\n    pattern: /MAX LENGTH/i,\n});\nexport var keywords = {\n    SELECT: createToken({\n        name: 'SELECT',\n        pattern: /SELECT/i,\n    }),\n    CONSTRUCT: createToken({\n        name: 'CONSTRUCT',\n        pattern: /CONSTRUCT/i,\n    }),\n    DISTINCT: createToken({\n        name: 'DISTINCT',\n        pattern: /DISTINCT/i,\n    }),\n    START: createToken({\n        name: 'START',\n        pattern: /START/i,\n    }),\n    END: createToken({\n        name: 'END',\n        pattern: /END/i,\n    }),\n    VIA: createToken({\n        name: 'VIA',\n        pattern: /VIA/i,\n    }),\n    PATHS: createToken({\n        name: 'PATHS',\n        pattern: /PATHS/i,\n    }),\n    PATHS_ALL: createToken({\n        name: 'PATHS_ALL',\n        pattern: /PATHS ALL/i,\n    }),\n    PATHS_SHORTEST: createToken({\n        name: 'PATHS_SHORTEST',\n        pattern: /PATHS SHORTEST/i,\n    }),\n    CYCLIC: createToken({\n        name: 'CYCLIC',\n        pattern: /CYCLIC/i,\n    }),\n    AS: createToken({\n        name: 'AS',\n        pattern: /AS/i,\n    }),\n    WHERE: createToken({\n        name: 'WHERE',\n        pattern: /WHERE/i,\n    }),\n    A: createToken({\n        name: 'A',\n        pattern: /a/i,\n    }),\n    GroupBy: createToken({\n        name: 'GroupBy',\n        pattern: /group by/i,\n    }),\n    OrderBy: createToken({\n        name: 'OrderBy',\n        pattern: /order by/i,\n    }),\n    By: createToken({\n        name: 'By',\n        pattern: /By/i,\n    }),\n    BASE: createToken({\n        name: 'BASE',\n        pattern: /BASE/i,\n    }),\n    PREFIX: createToken({\n        name: 'PREFIX',\n        pattern: /PREFIX/i,\n    }),\n    DESCRIBE: createToken({\n        name: 'DESCRIBE',\n        pattern: /DESCRIBE/i,\n    }),\n    ASK: createToken({\n        name: 'ASK',\n        pattern: /ASK/i,\n    }),\n    FROM: createToken({\n        name: 'FROM',\n        pattern: /FROM/i,\n    }),\n    REDUCED: createToken({\n        name: 'REDUCED',\n        pattern: /REDUCED/i,\n    }),\n    NAMED: createToken({\n        name: 'NAMED',\n        pattern: /NAMED/i,\n    }),\n    HAVING: createToken({\n        name: 'HAVING',\n        pattern: /HAVING/i,\n    }),\n    ASC: createToken({\n        name: 'ASC',\n        pattern: /ASC/i,\n    }),\n    DESC: createToken({\n        name: 'DESC',\n        pattern: /DESC/i,\n    }),\n    OFFSET: createToken({\n        name: 'OFFSET',\n        pattern: /OFFSET/i,\n    }),\n    LIMIT: createToken({\n        name: 'LIMIT',\n        pattern: /LIMIT/i,\n    }),\n    VALUES: createToken({\n        name: 'VALUES',\n        pattern: /VALUES/i,\n    }),\n    LOAD: createToken({\n        name: 'LOAD',\n        pattern: /LOAD/i,\n    }),\n    SILENT: createToken({\n        name: 'SILENT',\n        pattern: /SILENT/i,\n    }),\n    INTO: createToken({\n        name: 'INTO',\n        pattern: /INTO/i,\n    }),\n    CLEAR: createToken({\n        name: 'CLEAR',\n        pattern: /CLEAR/i,\n    }),\n    DROP: createToken({\n        name: 'DROP',\n        pattern: /DROP/i,\n    }),\n    CREATE: createToken({\n        name: 'CREATE',\n        pattern: /CREATE/i,\n    }),\n    ADD: createToken({\n        name: 'ADD',\n        pattern: /ADD/i,\n    }),\n    TO: createToken({\n        name: 'TO',\n        pattern: /TO/i,\n    }),\n    MOVE: createToken({\n        name: 'MOVE',\n        pattern: /MOVE/i,\n    }),\n    COPY: createToken({\n        name: 'COPY',\n        pattern: /COPY/i,\n    }),\n    INSERT_DATA: createToken({\n        name: 'INSERT_DATA',\n        pattern: /Insert +Data/i,\n    }),\n    DELETE_DATA: createToken({\n        name: 'DELETE_DATA',\n        pattern: /Delete +Data/i,\n    }),\n    DELETE_WHERE: createToken({\n        name: 'DELETE_WHERE',\n        pattern: /Delete +Where/i,\n    }),\n    WITH: createToken({\n        name: 'WITH',\n        pattern: /WITH/i,\n    }),\n    DELETE: createToken({\n        name: 'DELETE',\n        pattern: /DELETE/i,\n    }),\n    INSERT: createToken({\n        name: 'INSERT',\n        pattern: /INSERT/i,\n    }),\n    USING: createToken({\n        name: 'USING',\n        pattern: /USING/i,\n    }),\n    DEFAULT: createToken({\n        name: 'DEFAULT',\n        pattern: /DEFAULT/i,\n    }),\n    GRAPH: createToken({\n        name: 'GRAPH',\n        pattern: /GRAPH/i,\n    }),\n    ALL: createToken({\n        name: 'ALL',\n        pattern: /ALL/i,\n    }),\n    OPTIONAL: createToken({\n        name: 'OPTIONAL',\n        pattern: /OPTIONAL/i,\n    }),\n    SERVICE: createToken({\n        name: 'SERVICE',\n        pattern: /SERVICE/i,\n    }),\n    BIND: createToken({\n        name: 'BIND',\n        pattern: /BIND/i,\n    }),\n    UNNEST: createToken({\n        name: 'UNNEST',\n        pattern: /UNNEST/i,\n    }),\n    UNDEF: createToken({\n        name: 'UNDEF',\n        pattern: /UNDEF/i,\n    }),\n    MINUS: createToken({\n        name: 'MINUS',\n        pattern: /MINUS/i,\n    }),\n    UNION: createToken({\n        name: 'UNION',\n        pattern: /UNION/i,\n    }),\n    FILTER: createToken({\n        name: 'FILTER',\n        pattern: /FILTER/i,\n    }),\n    STR: createToken({\n        name: 'STR',\n        pattern: /STR/i,\n    }),\n    LANG: createToken({\n        name: 'LANG',\n        pattern: /LANG/i,\n    }),\n    LANGMATCHES: createToken({\n        name: 'LANGMATCHES',\n        pattern: /LANGMATCHES/i,\n    }),\n    DATATYPE: createToken({\n        name: 'DATATYPE',\n        pattern: /DATATYPE/i,\n    }),\n    BOUND: createToken({\n        name: 'BOUND',\n        pattern: /BOUND/i,\n    }),\n    IRI: createToken({\n        name: 'IRI',\n        pattern: /IRI/i,\n    }),\n    URI: createToken({\n        name: 'URI',\n        pattern: /URI/i,\n    }),\n    BNODE: createToken({\n        name: 'BNODE',\n        pattern: /BNODE/i,\n    }),\n    RAND: createToken({\n        name: 'RAND',\n        pattern: /RAND/i,\n    }),\n    ABS: createToken({\n        name: 'ABS',\n        pattern: /ABS/i,\n    }),\n    CEIL: createToken({\n        name: 'CEIL',\n        pattern: /CEIL/i,\n    }),\n    FLOOR: createToken({\n        name: 'FLOOR',\n        pattern: /FLOOR/i,\n    }),\n    ROUND: createToken({\n        name: 'ROUND',\n        pattern: /ROUND/i,\n    }),\n    CONCAT: createToken({\n        name: 'CONCAT',\n        pattern: /CONCAT/i,\n    }),\n    STRLEN: createToken({\n        name: 'STRLEN',\n        pattern: /STRLEN/i,\n    }),\n    UCASE: createToken({\n        name: 'UCASE',\n        pattern: /UCASE/i,\n    }),\n    LCASE: createToken({\n        name: 'LCASE',\n        pattern: /LCASE/i,\n    }),\n    ENCODE_FOR_URI: createToken({\n        name: 'ENCODE_FOR_URI',\n        pattern: /ENCODE_FOR_URI/i,\n    }),\n    CONTAINS: createToken({\n        name: 'CONTAINS',\n        pattern: /CONTAINS/i,\n    }),\n    STRSTARTS: createToken({\n        name: 'STRSTARTS',\n        pattern: /STRSTARTS/i,\n    }),\n    STRENDS: createToken({\n        name: 'STRENDS',\n        pattern: /STRENDS/i,\n    }),\n    STRBEFORE: createToken({\n        name: 'STRBEFORE',\n        pattern: /STRBEFORE/i,\n    }),\n    STRAFTER: createToken({\n        name: 'STRAFTER',\n        pattern: /STRAFTER/i,\n    }),\n    YEAR: createToken({\n        name: 'YEAR',\n        pattern: /YEAR/i,\n    }),\n    MONTH: createToken({\n        name: 'MONTH',\n        pattern: /MONTH/i,\n    }),\n    DAY: createToken({\n        name: 'DAY',\n        pattern: /DAY/i,\n    }),\n    HOURS: createToken({\n        name: 'HOURS',\n        pattern: /HOURS/i,\n    }),\n    MINUTES: createToken({\n        name: 'MINUTES',\n        pattern: /MINUTES/i,\n    }),\n    SECONDS: createToken({\n        name: 'SECONDS',\n        pattern: /SECONDS/i,\n    }),\n    TIMEZONE: createToken({\n        name: 'TIMEZONE',\n        pattern: /TIMEZONE/i,\n    }),\n    TZ: createToken({\n        name: 'TZ',\n        pattern: /TZ/i,\n    }),\n    NOW: createToken({\n        name: 'NOW',\n        pattern: /NOW/i,\n    }),\n    UUID: createToken({\n        name: 'UUID',\n        pattern: /UUID/i,\n    }),\n    STRUUID: createToken({\n        name: 'STRUUID',\n        pattern: /STRUUID/i,\n    }),\n    MD5: createToken({\n        name: 'MD5',\n        pattern: /MD5/i,\n    }),\n    SHA1: createToken({\n        name: 'SHA1',\n        pattern: /SHA1/i,\n    }),\n    SHA256: createToken({\n        name: 'SHA256',\n        pattern: /SHA256/i,\n    }),\n    SHA384: createToken({\n        name: 'SHA384',\n        pattern: /SHA384/i,\n    }),\n    SHA512: createToken({\n        name: 'SHA512',\n        pattern: /SHA512/i,\n    }),\n    COALESCE: createToken({\n        name: 'COALESCE',\n        pattern: /COALESCE/i,\n    }),\n    IF: createToken({\n        name: 'IF',\n        pattern: /IF/i,\n    }),\n    STRLANG: createToken({\n        name: 'STRLANG',\n        pattern: /STRLANG/i,\n    }),\n    STRDT: createToken({\n        name: 'STRDT',\n        pattern: /STRDT/i,\n    }),\n    sameTerm: createToken({\n        name: 'sameTerm',\n        pattern: /sameTerm/i,\n    }),\n    isIRI: createToken({\n        name: 'isIRI',\n        pattern: /isIRI/i,\n    }),\n    isURI: createToken({\n        name: 'isURI',\n        pattern: /isURI/i,\n    }),\n    isBlank: createToken({\n        name: 'isBlank',\n        pattern: /isBlank/i,\n    }),\n    isLiteral: createToken({\n        name: 'isLiteral',\n        pattern: /isLiteral/i,\n    }),\n    isNumeric: createToken({\n        name: 'isNumeric',\n        pattern: /isNumeric/i,\n    }),\n    REGEX: createToken({\n        name: 'REGEX',\n        pattern: /REGEX/i,\n    }),\n    SUBSTR: createToken({\n        name: 'SUBSTR',\n        pattern: /SUBSTR/i,\n    }),\n    REPLACE: createToken({\n        name: 'REPLACE',\n        pattern: /REPLACE/i,\n    }),\n    EXISTS: createToken({\n        name: 'EXISTS',\n        pattern: /EXISTS/i,\n    }),\n    NOT_EXISTS: createToken({\n        name: 'NOT_EXISTS',\n        pattern: /NOT EXISTS/i,\n    }),\n    COUNT: createToken({\n        name: 'COUNT',\n        pattern: /COUNT/i,\n    }),\n    SUM: createToken({\n        name: 'SUM',\n        pattern: /SUM/i,\n    }),\n    MIN: createToken({\n        name: 'MIN',\n        pattern: /MIN/i,\n    }),\n    AVG: createToken({\n        name: 'AVG',\n        pattern: /AVG/i,\n    }),\n    SAMPLE: createToken({\n        name: 'SAMPLE',\n        pattern: /SAMPLE/i,\n    }),\n    GROUP_CONCAT: createToken({\n        name: 'GROUP_CONCAT',\n        pattern: /GROUP_CONCAT/i,\n    }),\n    SEPARATOR: createToken({\n        name: 'SEPARATOR',\n        pattern: /SEPARATOR/i,\n    }),\n    TRUE: createToken({\n        name: 'TRUE',\n        pattern: /TRUE/i,\n    }),\n    FALSE: createToken({\n        name: 'FALSE',\n        pattern: /FALSE/i,\n    }),\n    IN: createToken({\n        name: 'IN',\n        pattern: /IN/i,\n    }),\n    NOT_IN: createToken({\n        name: 'NOT_IN',\n        pattern: /NOT IN/i,\n    }),\n    MAX_LENGTH: MAX_LENGTH,\n    MAX: createToken({\n        name: 'MAX',\n        pattern: /MAX/i,\n        longer_alt: MAX_LENGTH,\n    }),\n};\n","/*\nCopyright ©2012–2018 Ruben Verborgh\nWith modifications Copyright ©2018 Stardog Union\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nvar escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\[uU]|\\\\(.)/g;\nvar escapeReplacements = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\"': '\"',\n    n: '\\n',\n    r: '\\r',\n    t: '\\t',\n    f: '\\f',\n    b: '\\b',\n    _: '_',\n    '~': '~',\n    '.': '.',\n    '-': '-',\n    '!': '!',\n    $: '$',\n    '&': '&',\n    '(': '(',\n    ')': ')',\n    '*': '*',\n    '+': '+',\n    ',': ',',\n    ';': ';',\n    '=': '=',\n    '/': '/',\n    '?': '?',\n    '#': '#',\n    '@': '@',\n    '%': '%',\n};\nexport var unescapedStringLiteralQuote = /^\"([^\"\\\\\\r\\n]+)\"/; // non-empty string without escape sequences\nexport var unescapedStringLiteralSingleQuote = /^'([^'\\\\\\r\\n]+)'/;\nexport var stringLiteralQuote = /^\"((?:[^\"\\\\\\r\\n]|\\\\.)*)\"(?=[^\"])/;\nexport var stringLiteralSingleQuote = /^'((?:[^'\\\\\\r\\n]|\\\\.)*)'(?=[^'])/;\nexport var stringLiteralLongQuote = /^\"\"\"([^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*)\"\"\"/;\nexport var stringLiteralLongSingleQuote = /^'''([^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*)'''/;\nexport var illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\nexport var escapedIri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/;\nexport var unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/;\n// Handle special unescaping needs related to the IRIREF rule and others.\nexport var unescape = function (item) {\n    try {\n        return item.replace(escapeSequence, function (_, unicode4, unicode8, escapedChar) {\n            if (unicode4) {\n                return String.fromCharCode(parseInt(unicode4, 16));\n            }\n            else if (unicode8) {\n                var charCode = parseInt(unicode8, 16);\n                if (charCode <= 0xffff) {\n                    return String.fromCharCode(charCode);\n                }\n                return String.fromCharCode(0xd800 + (charCode -= 0x10000) / 0x400, 0xdc00 + (charCode & 0x3ff));\n            }\n            else {\n                var replacement = escapeReplacements[escapedChar];\n                if (!replacement) {\n                    throw new Error();\n                }\n                return replacement;\n            }\n        });\n    }\n    catch (error) {\n        return null;\n    }\n};\n","var sparqlTokenMap = require('../sparql/tokens').sparqlTokenMap;\nimport { createToken } from 'chevrotain';\nimport { regex } from '../helpers/regex';\nimport { EXPONENT, ECHAR, PLX, HEX, PN_CHARS_BASE, PN_CHARS_U, PN_CHARS, PN_PREFIX, PN_LOCAL, PN_LOCAL_ESC, } from '../helpers/matchers';\nimport { unescape, stringLiteralLongSingleQuote, stringLiteralLongQuote, unescapedStringLiteralQuote, stringLiteralQuote, unescapedStringLiteralSingleQuote, stringLiteralSingleQuote, unescapedIri, escapedIri, illegalIriChars, } from '../helpers/unescape';\nvar unicodeRegexp = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nexport var turtleTokenMap = {\n    Comment: createToken({\n        name: 'Comment',\n        pattern: /#[^\\n]*/,\n        group: 'comments',\n    }),\n    LBracket: sparqlTokenMap.LBracket,\n    RBracket: sparqlTokenMap.RBracket,\n    LParen: sparqlTokenMap.LParen,\n    RParen: sparqlTokenMap.RParen,\n    Period: sparqlTokenMap.Period,\n    WhiteSpace: sparqlTokenMap.WhiteSpace,\n    TRUE: sparqlTokenMap.TRUE,\n    FALSE: sparqlTokenMap.FALSE,\n    DoubleCaret: sparqlTokenMap.DoubleCaret,\n    Comma: sparqlTokenMap.Comma,\n    Semicolon: sparqlTokenMap.Semicolon,\n    A: sparqlTokenMap.A,\n    PREFIX: sparqlTokenMap.PREFIX,\n    BASE: sparqlTokenMap.BASE,\n    PNAME_NS: sparqlTokenMap.PNAME_NS,\n    PNAME_LN: sparqlTokenMap.PNAME_LN,\n    BLANK_NODE_LABEL: sparqlTokenMap.BLANK_NODE_LABEL,\n    TTL_BASE: createToken({ name: 'TTL_BASE', pattern: /@base/ }),\n    TTL_PREFIX: createToken({ name: 'TTL_PREFIX', pattern: /@prefix/ }),\n    LANGTAG: sparqlTokenMap.LANGTAG,\n    INTEGER: createToken({\n        name: 'INTEGER',\n        pattern: regex.and(regex.option(/[+-]/), /\\d+/),\n    }),\n    DECIMAL: createToken({\n        name: 'DECIMAL',\n        pattern: regex.and(regex.option(/[+-]/), /(\\d*\\.\\d+)/),\n    }),\n    DOUBLE: createToken({\n        name: 'DOUBLE',\n        pattern: regex.and(regex.option(/[+-]/), regex.or(regex.and(/\\d+\\.\\d*/, EXPONENT), regex.and(/\\.\\d+/, EXPONENT), regex.and(/\\d+/, EXPONENT))),\n    }),\n    EXPONENT: createToken({ name: 'EXPONENT', pattern: EXPONENT }),\n    ECHAR: createToken({ name: 'ECHAR', pattern: ECHAR }),\n    ANON: sparqlTokenMap.ANON,\n    PLX: createToken({ name: 'PLX', pattern: PLX }),\n    PERCENT: sparqlTokenMap.PERCENT,\n    HEX: createToken({ name: 'HEX', pattern: HEX }),\n    STRING_LITERAL_LONG_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongSingleQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_LONG_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_QUOTE: createToken({\n        name: 'STRING_LITERAL_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    STRING_LITERAL_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralSingleQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralSingleQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    UCHAR: createToken({\n        name: 'UCHAR',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            return unicodeRegexp.exec(text.slice(startOffset));\n        },\n        line_breaks: false,\n    }),\n    IRIREF: createToken({\n        name: 'IRIREF',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedIri.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = escapedIri.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            var value = unescape(match[1]);\n            if (value === null || illegalIriChars.test(value)) {\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    PN_CHARS_BASE: createToken({ name: 'PN_CHARS_BASE', pattern: PN_CHARS_BASE }),\n    PN_CHARS_U: createToken({ name: 'PN_CHARS_U', pattern: PN_CHARS_U }),\n    PN_CHARS: createToken({ name: 'PN_CHARS', pattern: PN_CHARS }),\n    PN_PREFIX: createToken({ name: 'PN_PREFIX', pattern: PN_PREFIX }),\n    PN_LOCAL: createToken({ name: 'PN_LOCAL', pattern: PN_LOCAL }),\n    PN_LOCAL_ESC: createToken({ name: 'PN_LOCAL_ESC', pattern: PN_LOCAL_ESC }),\n    Unknown: createToken({\n        name: 'Unknown',\n        pattern: /\\w+/,\n    }),\n};\nexport var turtleTokenTypes = [\n    turtleTokenMap.Comment,\n    sparqlTokenMap.ANON,\n    sparqlTokenMap.LBracket,\n    sparqlTokenMap.RBracket,\n    sparqlTokenMap.LParen,\n    sparqlTokenMap.RParen,\n    sparqlTokenMap.WhiteSpace,\n    sparqlTokenMap.TRUE,\n    sparqlTokenMap.FALSE,\n    sparqlTokenMap.Comma,\n    sparqlTokenMap.Semicolon,\n    sparqlTokenMap.PNAME_NS,\n    sparqlTokenMap.A,\n    sparqlTokenMap.PREFIX,\n    sparqlTokenMap.BASE,\n    sparqlTokenMap.PNAME_LN,\n    sparqlTokenMap.BLANK_NODE_LABEL,\n    turtleTokenMap.TTL_BASE,\n    turtleTokenMap.TTL_PREFIX,\n    sparqlTokenMap.LANGTAG,\n    turtleTokenMap.DOUBLE,\n    turtleTokenMap.DECIMAL,\n    sparqlTokenMap.Period,\n    sparqlTokenMap.DoubleCaret,\n    turtleTokenMap.IRIREF,\n    turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE,\n    turtleTokenMap.STRING_LITERAL_LONG_QUOTE,\n    turtleTokenMap.STRING_LITERAL_QUOTE,\n    turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE,\n    turtleTokenMap.INTEGER,\n    turtleTokenMap.EXPONENT,\n    turtleTokenMap.PLX,\n    sparqlTokenMap.PERCENT,\n    turtleTokenMap.HEX,\n    turtleTokenMap.PN_CHARS_BASE,\n    turtleTokenMap.PN_CHARS_U,\n    turtleTokenMap.PN_CHARS,\n    turtleTokenMap.PN_PREFIX,\n    turtleTokenMap.PN_LOCAL,\n    turtleTokenMap.PN_LOCAL_ESC,\n    turtleTokenMap.ECHAR,\n    turtleTokenMap.UCHAR,\n    turtleTokenMap.Unknown,\n];\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a = require('./tokens'), turtleTokenTypes = _a.turtleTokenTypes, turtleTokenMap = _a.turtleTokenMap;\nimport { Parser, Lexer, } from 'chevrotain';\nvar TurtleParser = /** @class */ (function (_super) {\n    __extends(TurtleParser, _super);\n    function TurtleParser(config, tokens, lexerDefinition, performSelfAnalysis) {\n        if (tokens === void 0) { tokens = turtleTokenTypes; }\n        if (lexerDefinition === void 0) { lexerDefinition = tokens; }\n        if (performSelfAnalysis === void 0) { performSelfAnalysis = true; }\n        var _this = _super.call(this, tokens, __assign({ outputCst: true, recoveryEnabled: true }, config)) || this;\n        // Parsing Turtle requires that the parser keep a map of namespaces in state.\n        // Empty prefixes, for example, are allowed only if the empty prefix has been\n        // added to the namespaces map (for now, that's all this tracks). (TODO: We\n        // might want to use a visitor for this, but I'm doing it quick-and-dirty for\n        // now.)\n        // See here: https://www.w3.org/TR/turtle/#handle-PNAME_LN\n        _this.namespacesMap = {};\n        _this.semanticErrors = [];\n        // Clears the state that we have to manage on our own for each parse (see\n        // above for details).\n        _this.resetManagedState = function () {\n            _this.namespacesMap = {};\n            _this.semanticErrors = [];\n        };\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        _this.parse = function (document) {\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = _this.turtleDoc();\n            // Next two items are copied so that they can be returned/held after parse\n            // state is cleared.\n            var errors = _this.errors.slice();\n            var semanticErrors = _this.semanticErrors.slice();\n            _this.resetManagedState();\n            return {\n                errors: errors,\n                semanticErrors: semanticErrors,\n                cst: cst,\n            };\n        };\n        _this.turtleDoc = _this.RULE('turtleDoc', function () {\n            _this.MANY(function () { return _this.SUBRULE(_this.statement); });\n        });\n        _this.statement = _this.RULE('statement', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.directive); } },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.triples);\n                        _this.CONSUME(turtleTokenMap.Period);\n                    },\n                },\n            ]);\n        });\n        _this.directive = _this.RULE('directive', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.prefixID); } },\n                { ALT: function () { return _this.SUBRULE(_this.base); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlPrefix); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlBase); } },\n            ]);\n        });\n        _this.prefixID = _this.RULE('prefixID', function () {\n            _this.CONSUME(turtleTokenMap.TTL_PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.base = _this.RULE('base', function () {\n            _this.CONSUME(turtleTokenMap.TTL_BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.sparqlBase = _this.RULE('sparqlBase', function () {\n            _this.CONSUME(turtleTokenMap.BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n        });\n        _this.sparqlPrefix = _this.RULE('sparqlPrefix', function () {\n            _this.CONSUME(turtleTokenMap.PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n        });\n        _this.triples = _this.RULE('triples', function () {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.subject);\n                        _this.SUBRULE(_this.predicateObjectList);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.blankNodePropertyList);\n                        _this.OPTION(function () { return _this.SUBRULE1(_this.predicateObjectList); });\n                    },\n                },\n            ]);\n        });\n        _this.predicateObjectList = _this.RULE('predicateObjectList', function () {\n            _this.SUBRULE(_this.verb);\n            _this.SUBRULE(_this.objectList);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.SUBRULE1(_this.verb);\n                    _this.SUBRULE1(_this.objectList);\n                });\n            });\n        });\n        _this.subject = _this.RULE('subject', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n            ]);\n        });\n        _this.predicate = _this.RULE('predicate', function () {\n            _this.SUBRULE(_this.iri);\n        });\n        _this.objectList = _this.RULE('objectList', function () {\n            _this.SUBRULE(_this.object);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Comma);\n                _this.SUBRULE1(_this.object);\n            });\n        });\n        _this.verb = _this.RULE('verb', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.predicate); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.A); } },\n            ]);\n        });\n        _this.literal = _this.RULE('literal', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n            ]);\n        });\n        _this.blankNodePropertyList = _this.RULE('blankNodePropertyList', function () {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.SUBRULE(_this.predicateObjectList);\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.object = _this.RULE('object', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n                { ALT: function () { return _this.SUBRULE(_this.blankNodePropertyList); } },\n                { ALT: function () { return _this.SUBRULE(_this.literal); } },\n            ]);\n        });\n        _this.collection = _this.RULE('collection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () { return _this.SUBRULE(_this.object); });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.NumericLiteral = _this.RULE('NumericLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.INTEGER); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DECIMAL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DOUBLE); } },\n            ]);\n        });\n        _this.RDFLiteral = _this.RULE('RDFLiteral', function () {\n            _this.SUBRULE(_this.String);\n            _this.OPTION(function () {\n                _this.OR([\n                    { ALT: function () { return _this.CONSUME(turtleTokenMap.LANGTAG); } },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(turtleTokenMap.DoubleCaret);\n                            _this.SUBRULE(_this.iri);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.BooleanLiteral = _this.RULE('BooleanLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.TRUE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.FALSE); } },\n            ]);\n        });\n        _this.String = _this.RULE('String', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_QUOTE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE); } },\n                {\n                    ALT: function () {\n                        return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE);\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_QUOTE); } },\n            ]);\n        });\n        _this.iri = _this.RULE('iri', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.IRIREF); } },\n                { ALT: function () { return _this.SUBRULE(_this.PrefixedName); } },\n            ]);\n        });\n        _this.PrefixedName = _this.RULE('PrefixedName', function () {\n            var prefixedNameToken = _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_LN); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_NS); } },\n            ]);\n            var pnameNsImage = prefixedNameToken.image.slice(0, prefixedNameToken.image.indexOf(':'));\n            if (!(pnameNsImage in _this.namespacesMap)) {\n                _this.semanticErrors.push({\n                    name: 'NoNamespacePrefixError',\n                    message: 'A prefix was used for which there was no namespace defined.',\n                    token: prefixedNameToken,\n                    context: {\n                        ruleStack: _this.getHumanReadableRuleStack(),\n                        ruleOccurrenceStack: _this.RULE_OCCURRENCE_STACK.slice(),\n                    },\n                    resyncedTokens: [],\n                });\n            }\n        });\n        _this.BlankNode = _this.RULE('BlankNode', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.BLANK_NODE_LABEL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.ANON); } },\n            ]);\n        });\n        _this.lexer = new Lexer(lexerDefinition);\n        if (performSelfAnalysis) {\n            Parser.performSelfAnalysis(_this);\n        }\n        return _this;\n    }\n    return TurtleParser;\n}(Parser));\nexport { TurtleParser };\n","export var regex = {\n    or: function () {\n        var r = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            r[_i] = arguments[_i];\n        }\n        return new RegExp(r.map(function (_a) {\n            var source = _a.source;\n            return \"(\" + source + \")\";\n        }).join('|'));\n    },\n    and: function () {\n        var r = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            r[_i] = arguments[_i];\n        }\n        return new RegExp(r.map(function (_a) {\n            var source = _a.source;\n            return \"(\" + source + \")\";\n        }).join(''));\n    },\n    option: function (r) {\n        return new RegExp(\"(\" + r.source + \")?\");\n    },\n    many: function (r) {\n        return new RegExp(\"(\" + r.source + \")*\");\n    },\n};\n","import { regex } from './regex';\nexport var CATCH_ALL = /[\\s\\S]*/; // equivalent to /.*/s, which isn't a JS standard yet\nexport var CATCH_ALL_AT_LEAST_ONE = /[\\s\\S]+/; // equivalent to /.+/s, which isn't a JS standard yet\nexport var IRIREF = /<[^<>\\\\{}|\\^`\\u0000-\\u0020]*>/;\nexport var PN_CHARS_BASE = /[A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nexport var LANGTAG = /@[a-zA-Z]+(-[a-zA-Z0-9]+)*/;\nexport var INTEGER = /\\d+/;\nexport var DECIMAL = /(\\d*\\.\\d+)|(\\d+\\.\\d*)/;\nexport var EXPONENT = /[eE][+-]?\\d+/;\nexport var ECHAR = /\\\\[tbnrf\"'\\\\]/;\nexport var WS = /[\\u0020\\u0009\\u000d\\u000a]/;\nexport var HEX = /[0-9A-Fa-f]/;\nexport var PN_LOCAL_ESC = /\\\\[_~.\\-!\\$&'()*+,=\\/?#@%;]/;\nexport var PN_CHARS_U = regex.or(PN_CHARS_BASE, /_/);\nexport var PN_CHARS = regex.or(PN_CHARS_U, /-/, /\\d/, /\\u00b7/, /[\\u0300-\\u036f]/, /[\\u203f-\\u2040]/);\nexport var PN_PREFIX = regex.and(PN_CHARS_BASE, regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./)), PN_CHARS)));\nexport var PERCENT = regex.and(/%/, HEX, HEX);\nexport var PLX = regex.or(PERCENT, PN_LOCAL_ESC);\nexport var PN_LOCAL = regex.and(regex.or(PN_CHARS_U, /:/, /\\d/, PLX), regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./, /:/, PLX)), regex.or(PN_CHARS, /:/, PLX))));\nexport var VARNAME = regex.and(regex.or(PN_CHARS_U, /\\d/), regex.many(regex.or(PN_CHARS_U, /\\d/, /\\u00b7/, /[\\u0300-\\u036f]/, /[\\u203f-\\u2040]/)));\nexport var ANON = regex.and(/\\[/, regex.many(WS), /\\]/);\nexport var NIL = regex.and(/\\(/, regex.many(WS), /\\)/);\nexport var STRING_LITERAL1 = regex.and(/'/, regex.many(regex.or(/[^\\u0027\\u005C\\u000A\\u000D]/, ECHAR)), /'/);\nexport var STRING_LITERAL2 = regex.and(/\"/, regex.many(regex.or(/[^\\u0022\\u005C\\u000A\\u000D]/, ECHAR)), /\"/);\nexport var STRING_LITERAL_LONG1 = regex.and(/'''/, regex.many(regex.and(regex.option(regex.or(/'/, /''/)), regex.or(/[^'\\\\]/, ECHAR))), /'''/);\nexport var STRING_LITERAL_LONG2 = regex.and(/\"\"\"/, regex.many(regex.and(regex.option(regex.or(/\"/, /\"\"/)), regex.or(/[^\"\\\\]/, ECHAR))), /\"\"\"/);\nexport var DOUBLE = regex.or(regex.and(/\\d+\\.\\d*/, EXPONENT), regex.and(/\\.\\d+/, EXPONENT), regex.and(/\\d+/, EXPONENT));\nexport var INTEGER_POSITIVE = regex.and(/\\+/, INTEGER);\nexport var DECIMAL_POSITIVE = regex.and(/\\+/, DECIMAL);\nexport var DOUBLE_POSITIVE = regex.and(/\\+/, DOUBLE);\nexport var INTEGER_NEGATIVE = regex.and(/-/, INTEGER);\nexport var DECIMAL_NEGATIVE = regex.and(/-/, DECIMAL);\nexport var DOUBLE_NEGATIVE = regex.and(/-/, DOUBLE);\nexport var VAR1 = regex.and(/\\?/, VARNAME);\nexport var VAR2 = regex.and(/\\$/, VARNAME);\nexport var BLANK_NODE_LABEL = regex.and(/_:/, regex.or(PN_CHARS_U, /\\d/), regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./)), PN_CHARS)));\nexport var PNAME_NS = regex.and(regex.option(PN_PREFIX), /:/);\nexport var PNAME_LN = regex.and(PNAME_NS, PN_LOCAL);\n","// @ts-ignore: import types for declarations\nimport { createToken } from 'chevrotain';\nimport { STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, PNAME_LN, IRIREF, LANGTAG, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, STRING_LITERAL1, STRING_LITERAL2, NIL, ANON, PNAME_NS, BLANK_NODE_LABEL, VAR1, VAR2, PERCENT, } from 'helpers/matchers';\nvar STRING_LITERAL_LONG1_TOKEN = createToken({\n    name: 'STRING_LITERAL_LONG1',\n    pattern: STRING_LITERAL_LONG1,\n});\nvar STRING_LITERAL_LONG2_TOKEN = createToken({\n    name: 'STRING_LITERAL_LONG2',\n    pattern: STRING_LITERAL_LONG2,\n});\nvar PNAME_LN_TOKEN = createToken({\n    name: 'PNAME_LN',\n    pattern: PNAME_LN,\n});\nexport var terminals = {\n    IRIREF: createToken({\n        name: 'IRIREF',\n        pattern: IRIREF,\n        label: '<http://example.com>',\n    }),\n    LANGTAG: createToken({\n        name: 'LANGTAG',\n        pattern: LANGTAG,\n    }),\n    INTEGER: createToken({\n        name: 'INTEGER',\n        pattern: INTEGER,\n    }),\n    DECIMAL: createToken({\n        name: 'DECIMAL',\n        pattern: DECIMAL,\n    }),\n    DOUBLE: createToken({\n        name: 'DOUBLE',\n        pattern: DOUBLE,\n    }),\n    INTEGER_POSITIVE: createToken({\n        name: 'INTEGER_POSITIVE',\n        pattern: INTEGER_POSITIVE,\n    }),\n    DECIMAL_POSITIVE: createToken({\n        name: 'DECIMAL_POSITIVE',\n        pattern: DECIMAL_POSITIVE,\n    }),\n    DOUBLE_POSITIVE: createToken({\n        name: 'DOUBLE_POSITIVE',\n        pattern: DOUBLE_POSITIVE,\n    }),\n    INTEGER_NEGATIVE: createToken({\n        name: 'INTEGER_NEGATIVE',\n        pattern: INTEGER_NEGATIVE,\n    }),\n    DECIMAL_NEGATIVE: createToken({\n        name: 'DECIMAL_NEGATIVE',\n        pattern: DECIMAL_NEGATIVE,\n    }),\n    DOUBLE_NEGATIVE: createToken({\n        name: 'DOUBLE_NEGATIVE',\n        pattern: DOUBLE_NEGATIVE,\n    }),\n    STRING_LITERAL_LONG1: STRING_LITERAL_LONG1_TOKEN,\n    STRING_LITERAL_LONG2: STRING_LITERAL_LONG2_TOKEN,\n    STRING_LITERAL1: createToken({\n        name: 'STRING_LITERAL1',\n        pattern: STRING_LITERAL1,\n        longer_alt: STRING_LITERAL_LONG1_TOKEN,\n    }),\n    STRING_LITERAL2: createToken({\n        name: 'STRING_LITERAL2',\n        pattern: STRING_LITERAL2,\n        longer_alt: STRING_LITERAL_LONG2_TOKEN,\n    }),\n    NIL: createToken({\n        name: 'NIL',\n        pattern: NIL,\n        label: '()',\n    }),\n    ANON: createToken({\n        name: 'ANON',\n        pattern: ANON,\n        label: '[]',\n    }),\n    PNAME_LN: PNAME_LN_TOKEN,\n    PNAME_NS: createToken({\n        name: 'PNAME_NS',\n        pattern: PNAME_NS,\n        longer_alt: PNAME_LN_TOKEN,\n    }),\n    BLANK_NODE_LABEL: createToken({\n        name: 'BLANK_NODE_LABEL',\n        pattern: BLANK_NODE_LABEL,\n    }),\n    VAR1: createToken({\n        name: 'VAR1',\n        pattern: VAR1,\n        label: '?foo',\n    }),\n    VAR2: createToken({\n        name: 'VAR2',\n        pattern: VAR2,\n        label: '?bar',\n    }),\n    PERCENT: createToken({\n        name: 'PERCENT',\n        pattern: PERCENT,\n    }),\n};\n","// @ts-ignore: import types for declarations\nimport { createToken, Lexer } from 'chevrotain';\nimport { terminals } from './terminals';\nimport { keywords } from './keywords';\nexport var sparqlTokenMap = {\n    IRIREF: terminals.IRIREF,\n    LANGTAG: terminals.LANGTAG,\n    INTEGER: terminals.INTEGER,\n    DECIMAL: terminals.DECIMAL,\n    DOUBLE: terminals.DOUBLE,\n    INTEGER_POSITIVE: terminals.INTEGER_POSITIVE,\n    DECIMAL_POSITIVE: terminals.DECIMAL_POSITIVE,\n    DOUBLE_POSITIVE: terminals.DOUBLE_POSITIVE,\n    INTEGER_NEGATIVE: terminals.INTEGER_NEGATIVE,\n    DECIMAL_NEGATIVE: terminals.DECIMAL_NEGATIVE,\n    DOUBLE_NEGATIVE: terminals.DOUBLE_NEGATIVE,\n    STRING_LITERAL1: terminals.STRING_LITERAL1,\n    STRING_LITERAL2: terminals.STRING_LITERAL2,\n    STRING_LITERAL_LONG1: terminals.STRING_LITERAL_LONG1,\n    STRING_LITERAL_LONG2: terminals.STRING_LITERAL_LONG2,\n    NIL: terminals.NIL,\n    ANON: terminals.ANON,\n    PNAME_NS: terminals.PNAME_NS,\n    PNAME_LN: terminals.PNAME_LN,\n    BLANK_NODE_LABEL: terminals.BLANK_NODE_LABEL,\n    VAR1: terminals.VAR1,\n    VAR2: terminals.VAR2,\n    PERCENT: terminals.PERCENT,\n    Comment: createToken({\n        name: 'Comment',\n        pattern: /#[^\\n]*/,\n        group: 'comments',\n    }),\n    LCurly: createToken({ name: 'LCurly', pattern: '{' }),\n    RCurly: createToken({ name: 'RCurly', pattern: '}' }),\n    LParen: createToken({ name: 'LParen', pattern: '(' }),\n    RParen: createToken({ name: 'RParen', pattern: ')' }),\n    WhiteSpace: createToken({\n        name: 'WhiteSpace',\n        pattern: /\\s+/,\n        group: Lexer.SKIPPED,\n        line_breaks: true,\n    }),\n    Star: createToken({\n        name: 'Star',\n        pattern: '*',\n    }),\n    Unknown: createToken({\n        name: 'Unknown',\n        pattern: /\\w+/,\n    }),\n    Period: createToken({\n        name: 'Period',\n        pattern: '.',\n    }),\n    QuestionMark: createToken({\n        name: 'QuestionMark',\n        pattern: '?',\n    }),\n    Plus: createToken({\n        name: 'Plus',\n        pattern: '+',\n    }),\n    Minus: createToken({\n        name: 'Minus',\n        pattern: '-',\n    }),\n    LBracket: createToken({\n        name: 'LBracket',\n        pattern: '[',\n    }),\n    RBracket: createToken({\n        name: 'RBracket',\n        pattern: ']',\n    }),\n    Semicolon: createToken({\n        name: 'Semicolon',\n        pattern: ';',\n    }),\n    Comma: createToken({\n        name: 'Comma',\n        pattern: ',',\n    }),\n    Pipe: createToken({\n        name: 'Pipe',\n        pattern: '|',\n    }),\n    ForwardSlash: createToken({\n        name: 'ForwardSlash',\n        pattern: '/',\n    }),\n    Caret: createToken({\n        name: 'Caret',\n        pattern: '^',\n    }),\n    DoubleCaret: createToken({\n        name: 'DoubleCaret',\n        pattern: '^^',\n    }),\n    Bang: createToken({\n        name: 'Bang',\n        pattern: '!',\n    }),\n    LogicalOr: createToken({\n        name: 'LogicalOr',\n        pattern: '||',\n    }),\n    LogicalAnd: createToken({\n        name: 'LogicalAnd',\n        pattern: '&&',\n    }),\n    Equals: createToken({\n        name: 'Equals',\n        pattern: '=',\n    }),\n    NotEquals: createToken({\n        name: 'NotEquals',\n        pattern: '!=',\n    }),\n    LessThan: createToken({\n        name: 'LessThan',\n        pattern: '<',\n    }),\n    GreaterThan: createToken({\n        name: 'GreaterThan',\n        pattern: '>',\n    }),\n    LessThanEquals: createToken({\n        name: 'LessThanEquals',\n        pattern: '<=',\n    }),\n    GreaterThanEquals: createToken({\n        name: 'GreaterThanEquals',\n        pattern: '>=',\n    }),\n    SELECT: keywords.SELECT,\n    CONSTRUCT: keywords.CONSTRUCT,\n    DISTINCT: keywords.DISTINCT,\n    START: keywords.START,\n    END: keywords.END,\n    VIA: keywords.VIA,\n    CYCLIC: keywords.CYCLIC,\n    PATHS_SHORTEST: keywords.PATHS_SHORTEST,\n    PATHS_ALL: keywords.PATHS_ALL,\n    PATHS: keywords.PATHS,\n    AS: keywords.AS,\n    WHERE: keywords.WHERE,\n    A: keywords.A,\n    GroupBy: keywords.GroupBy,\n    OrderBy: keywords.OrderBy,\n    By: keywords.By,\n    BASE: keywords.BASE,\n    PREFIX: keywords.PREFIX,\n    DESCRIBE: keywords.DESCRIBE,\n    ASK: keywords.ASK,\n    FROM: keywords.FROM,\n    REDUCED: keywords.REDUCED,\n    NAMED: keywords.NAMED,\n    HAVING: keywords.HAVING,\n    ASC: keywords.ASC,\n    DESC: keywords.DESC,\n    OFFSET: keywords.OFFSET,\n    LIMIT: keywords.LIMIT,\n    VALUES: keywords.VALUES,\n    LOAD: keywords.LOAD,\n    SILENT: keywords.SILENT,\n    INTO: keywords.INTO,\n    CLEAR: keywords.CLEAR,\n    DROP: keywords.DROP,\n    CREATE: keywords.CREATE,\n    ADD: keywords.ADD,\n    TO: keywords.TO,\n    MOVE: keywords.MOVE,\n    COPY: keywords.COPY,\n    INSERT_DATA: keywords.INSERT_DATA,\n    DELETE_DATA: keywords.DELETE_DATA,\n    DELETE_WHERE: keywords.DELETE_WHERE,\n    WITH: keywords.WITH,\n    DELETE: keywords.DELETE,\n    INSERT: keywords.INSERT,\n    USING: keywords.USING,\n    DEFAULT: keywords.DEFAULT,\n    GRAPH: keywords.GRAPH,\n    ALL: keywords.ALL,\n    OPTIONAL: keywords.OPTIONAL,\n    SERVICE: keywords.SERVICE,\n    BIND: keywords.BIND,\n    UNNEST: keywords.UNNEST,\n    UNDEF: keywords.UNDEF,\n    MINUS: keywords.MINUS,\n    UNION: keywords.UNION,\n    FILTER: keywords.FILTER,\n    STR: keywords.STR,\n    LANG: keywords.LANG,\n    LANGMATCHES: keywords.LANGMATCHES,\n    DATATYPE: keywords.DATATYPE,\n    BOUND: keywords.BOUND,\n    IRI: keywords.IRI,\n    URI: keywords.URI,\n    BNODE: keywords.BNODE,\n    RAND: keywords.RAND,\n    ABS: keywords.ABS,\n    CEIL: keywords.CEIL,\n    FLOOR: keywords.FLOOR,\n    ROUND: keywords.ROUND,\n    CONCAT: keywords.CONCAT,\n    STRLEN: keywords.STRLEN,\n    UCASE: keywords.UCASE,\n    LCASE: keywords.LCASE,\n    ENCODE_FOR_URI: keywords.ENCODE_FOR_URI,\n    CONTAINS: keywords.CONTAINS,\n    STRSTARTS: keywords.STRSTARTS,\n    STRENDS: keywords.STRENDS,\n    STRBEFORE: keywords.STRBEFORE,\n    STRAFTER: keywords.STRAFTER,\n    YEAR: keywords.YEAR,\n    MONTH: keywords.MONTH,\n    DAY: keywords.DAY,\n    HOURS: keywords.HOURS,\n    MINUTES: keywords.MINUTES,\n    SECONDS: keywords.SECONDS,\n    TIMEZONE: keywords.TIMEZONE,\n    TZ: keywords.TZ,\n    NOW: keywords.NOW,\n    UUID: keywords.UUID,\n    STRUUID: keywords.STRUUID,\n    MD5: keywords.MD5,\n    SHA1: keywords.SHA1,\n    SHA256: keywords.SHA256,\n    SHA384: keywords.SHA384,\n    SHA512: keywords.SHA512,\n    COALESCE: keywords.COALESCE,\n    IF: keywords.IF,\n    STRLANG: keywords.STRLANG,\n    STRDT: keywords.STRDT,\n    sameTerm: keywords.sameTerm,\n    isIRI: keywords.isIRI,\n    isURI: keywords.isURI,\n    isBlank: keywords.isBlank,\n    isLiteral: keywords.isLiteral,\n    isNumeric: keywords.isNumeric,\n    REGEX: keywords.REGEX,\n    SUBSTR: keywords.SUBSTR,\n    REPLACE: keywords.REPLACE,\n    EXISTS: keywords.EXISTS,\n    NOT_EXISTS: keywords.NOT_EXISTS,\n    COUNT: keywords.COUNT,\n    SUM: keywords.SUM,\n    MIN: keywords.MIN,\n    AVG: keywords.AVG,\n    SAMPLE: keywords.SAMPLE,\n    GROUP_CONCAT: keywords.GROUP_CONCAT,\n    SEPARATOR: keywords.SEPARATOR,\n    TRUE: keywords.TRUE,\n    FALSE: keywords.FALSE,\n    IN: keywords.IN,\n    NOT_IN: keywords.NOT_IN,\n    MAX_LENGTH: keywords.MAX_LENGTH,\n    MAX: keywords.MAX,\n};\nexport var baseTokens = [\n    sparqlTokenMap.NIL,\n    sparqlTokenMap.ANON,\n    sparqlTokenMap.LCurly,\n    sparqlTokenMap.RCurly,\n    sparqlTokenMap.LParen,\n    sparqlTokenMap.RParen,\n    sparqlTokenMap.WhiteSpace,\n    sparqlTokenMap.IRIREF,\n    sparqlTokenMap.LANGTAG,\n    sparqlTokenMap.DOUBLE,\n    sparqlTokenMap.DECIMAL,\n    sparqlTokenMap.INTEGER,\n    sparqlTokenMap.DOUBLE_POSITIVE,\n    sparqlTokenMap.DECIMAL_POSITIVE,\n    sparqlTokenMap.INTEGER_POSITIVE,\n    sparqlTokenMap.DOUBLE_NEGATIVE,\n    sparqlTokenMap.DECIMAL_NEGATIVE,\n    sparqlTokenMap.INTEGER_NEGATIVE,\n    sparqlTokenMap.STRING_LITERAL1,\n    sparqlTokenMap.STRING_LITERAL2,\n    sparqlTokenMap.STRING_LITERAL_LONG1,\n    sparqlTokenMap.STRING_LITERAL_LONG2,\n    sparqlTokenMap.PNAME_NS,\n    sparqlTokenMap.PNAME_LN,\n    sparqlTokenMap.BLANK_NODE_LABEL,\n    sparqlTokenMap.VAR1,\n    sparqlTokenMap.VAR2,\n    sparqlTokenMap.Comment,\n    sparqlTokenMap.SELECT,\n    sparqlTokenMap.CONSTRUCT,\n    sparqlTokenMap.DISTINCT,\n    sparqlTokenMap.Star,\n    sparqlTokenMap.WHERE,\n    sparqlTokenMap.GroupBy,\n    sparqlTokenMap.OrderBy,\n    sparqlTokenMap.By,\n    sparqlTokenMap.Period,\n    sparqlTokenMap.QuestionMark,\n    sparqlTokenMap.Plus,\n    sparqlTokenMap.Minus,\n    sparqlTokenMap.LBracket,\n    sparqlTokenMap.RBracket,\n    sparqlTokenMap.PERCENT,\n    sparqlTokenMap.BASE,\n    sparqlTokenMap.PREFIX,\n    sparqlTokenMap.DESCRIBE,\n    sparqlTokenMap.ASK,\n    sparqlTokenMap.FROM,\n    sparqlTokenMap.REDUCED,\n    sparqlTokenMap.NAMED,\n    sparqlTokenMap.HAVING,\n    sparqlTokenMap.ASC,\n    sparqlTokenMap.DESC,\n    sparqlTokenMap.OFFSET,\n    sparqlTokenMap.LIMIT,\n    sparqlTokenMap.VALUES,\n    sparqlTokenMap.LOAD,\n    sparqlTokenMap.SILENT,\n    sparqlTokenMap.INTO,\n    sparqlTokenMap.AS,\n    sparqlTokenMap.CLEAR,\n    sparqlTokenMap.DROP,\n    sparqlTokenMap.CREATE,\n    sparqlTokenMap.ADD,\n    sparqlTokenMap.TO,\n    sparqlTokenMap.MOVE,\n    sparqlTokenMap.COPY,\n    sparqlTokenMap.INSERT_DATA,\n    sparqlTokenMap.DELETE_DATA,\n    sparqlTokenMap.DELETE_WHERE,\n    sparqlTokenMap.WITH,\n    sparqlTokenMap.DELETE,\n    sparqlTokenMap.INSERT,\n    sparqlTokenMap.USING,\n    sparqlTokenMap.DEFAULT,\n    sparqlTokenMap.GRAPH,\n    sparqlTokenMap.ALL,\n    sparqlTokenMap.OPTIONAL,\n    sparqlTokenMap.SERVICE,\n    sparqlTokenMap.BIND,\n    sparqlTokenMap.UNDEF,\n    sparqlTokenMap.MINUS,\n    sparqlTokenMap.UNION,\n    sparqlTokenMap.FILTER,\n    sparqlTokenMap.LANGMATCHES,\n    sparqlTokenMap.LANG,\n    sparqlTokenMap.DATATYPE,\n    sparqlTokenMap.BOUND,\n    sparqlTokenMap.IRI,\n    sparqlTokenMap.URI,\n    sparqlTokenMap.BNODE,\n    sparqlTokenMap.RAND,\n    sparqlTokenMap.ABS,\n    sparqlTokenMap.CEIL,\n    sparqlTokenMap.FLOOR,\n    sparqlTokenMap.ROUND,\n    sparqlTokenMap.CONCAT,\n    sparqlTokenMap.STRLEN,\n    sparqlTokenMap.UCASE,\n    sparqlTokenMap.LCASE,\n    sparqlTokenMap.ENCODE_FOR_URI,\n    sparqlTokenMap.CONTAINS,\n    sparqlTokenMap.STRSTARTS,\n    sparqlTokenMap.STRENDS,\n    sparqlTokenMap.STRBEFORE,\n    sparqlTokenMap.STRAFTER,\n    sparqlTokenMap.YEAR,\n    sparqlTokenMap.MONTH,\n    sparqlTokenMap.DAY,\n    sparqlTokenMap.HOURS,\n    sparqlTokenMap.MINUTES,\n    sparqlTokenMap.SECONDS,\n    sparqlTokenMap.TIMEZONE,\n    sparqlTokenMap.TZ,\n    sparqlTokenMap.NOW,\n    sparqlTokenMap.UUID,\n    sparqlTokenMap.STRUUID,\n    sparqlTokenMap.MD5,\n    sparqlTokenMap.SHA1,\n    sparqlTokenMap.SHA256,\n    sparqlTokenMap.SHA384,\n    sparqlTokenMap.SHA512,\n    sparqlTokenMap.COALESCE,\n    sparqlTokenMap.IF,\n    sparqlTokenMap.STRLANG,\n    sparqlTokenMap.STRDT,\n    sparqlTokenMap.STR,\n    sparqlTokenMap.sameTerm,\n    sparqlTokenMap.isIRI,\n    sparqlTokenMap.isURI,\n    sparqlTokenMap.isBlank,\n    sparqlTokenMap.isLiteral,\n    sparqlTokenMap.isNumeric,\n    sparqlTokenMap.REGEX,\n    sparqlTokenMap.SUBSTR,\n    sparqlTokenMap.REPLACE,\n    sparqlTokenMap.EXISTS,\n    sparqlTokenMap.NOT_EXISTS,\n    sparqlTokenMap.COUNT,\n    sparqlTokenMap.SUM,\n    sparqlTokenMap.MIN,\n    sparqlTokenMap.MAX_LENGTH,\n    sparqlTokenMap.MAX,\n    sparqlTokenMap.AVG,\n    sparqlTokenMap.SAMPLE,\n    sparqlTokenMap.GROUP_CONCAT,\n    sparqlTokenMap.SEPARATOR,\n    sparqlTokenMap.TRUE,\n    sparqlTokenMap.FALSE,\n    sparqlTokenMap.Semicolon,\n    sparqlTokenMap.Comma,\n    sparqlTokenMap.ForwardSlash,\n    sparqlTokenMap.DoubleCaret,\n    sparqlTokenMap.Caret,\n    sparqlTokenMap.LogicalOr,\n    sparqlTokenMap.Pipe,\n    sparqlTokenMap.LogicalAnd,\n    sparqlTokenMap.NotEquals,\n    sparqlTokenMap.Bang,\n    sparqlTokenMap.Equals,\n    sparqlTokenMap.LessThanEquals,\n    sparqlTokenMap.GreaterThanEquals,\n    sparqlTokenMap.LessThan,\n    sparqlTokenMap.GreaterThan,\n    sparqlTokenMap.IN,\n    sparqlTokenMap.NOT_IN,\n    sparqlTokenMap.A,\n    sparqlTokenMap.Unknown,\n];\nexport var pathsTokens = [\n    sparqlTokenMap.START,\n    sparqlTokenMap.END,\n    sparqlTokenMap.VIA,\n    sparqlTokenMap.CYCLIC,\n    sparqlTokenMap.PATHS_SHORTEST,\n    sparqlTokenMap.PATHS_ALL,\n    sparqlTokenMap.PATHS,\n];\nexport var nonStandardTokens = pathsTokens.concat([sparqlTokenMap.UNNEST]);\nvar indexOfSelect = baseTokens.indexOf(sparqlTokenMap.SELECT);\nexport var stardogSparqlTokens = baseTokens.slice(0, indexOfSelect).concat(nonStandardTokens, baseTokens.slice(indexOfSelect));\nexport var sparqlTokenTypes = baseTokens.concat(nonStandardTokens);\n","export * from './TurtleParser';\n// Convenience imports/exports that aren't core functionality:\n// NOTE: Tokens MUST be imported using CommonJS syntax; see here: https://github.com/SAP/chevrotain/issues/345\nexport var turtleTokens = require('./tokens');\n"],"sourceRoot":""}