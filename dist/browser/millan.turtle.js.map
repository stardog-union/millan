{"version":3,"sources":["webpack://millan.[name]/webpack/universalModuleDefinition","webpack://millan.[name]/webpack/bootstrap","webpack://millan.[name]/./src/helpers/chevrotain/tokens.ts","webpack://millan.[name]/./src/sparql/keywords.ts","webpack://millan.[name]/./src/turtle/TurtleParser.ts","webpack://millan.[name]/./src/helpers/regex.ts","webpack://millan.[name]/./src/helpers/matchers.ts","webpack://millan.[name]/./src/sparql/terminals.ts","webpack://millan.[name]/./src/sparql/tokens.ts","webpack://millan.[name]/./src/turtle/index.ts","webpack://millan.[name]/./src/helpers/unescape.ts","webpack://millan.[name]/./src/turtle/tokens.ts"],"names":["root","factory","exports","module","define","amd","self","this","webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","8","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","oldJsonpFunction","slice","__assign","assign","arguments","__rest","e","indexOf","getOwnPropertySymbols","__webpack_exports__","keywords_createKeyword","keywords","keywords_assign","keywords_rest","_a","_b","longer_alt","UNKNOWN","props","pattern","api","RegExp","createKeyword","SELECT","CONSTRUCT","DISTINCT","START","END","VIA","PATHS","PATHS_ALL","PATHS_SHORTEST","CYCLIC","AS","WHERE","A","GROUP_BY","ORDER_BY","BY","BASE","PREFIX","DESCRIBE","ASK","FROM","REDUCED","NAMED","HAVING","ASC","DESC","OFFSET","LIMIT","VALUES","LOAD","SILENT","INTO","CLEAR","DROP","CREATE","ADD","TO","MOVE","COPY","INSERT_DATA","DELETE_DATA","DELETE_WHERE","WITH","DELETE","INSERT","USING","DEFAULT","GRAPH","ALL","OPTIONAL","SERVICE","BIND","UNNEST","UNDEF","MINUS","UNION","FILTER","STR","LANG","LANGMATCHES","DATATYPE","BOUND","IRI","URI","BNODE","RAND","ABS","CEIL","FLOOR","ROUND","CONCAT","STRLEN","UCASE","LCASE","ENCODE_FOR_URI","CONTAINS","STRSTARTS","STRENDS","STRBEFORE","STRAFTER","YEAR","MONTH","DAY","HOURS","MINUTES","SECONDS","TIMEZONE","TZ","NOW","UUID","STRUUID","MD5","SHA1","SHA256","SHA384","SHA512","COALESCE","IF","STRLANG","STRDT","sameTerm","isIRI","isURI","isBLANK","isLITERAL","isNUMERIC","REGEX","SUBSTR","REPLACE","EXISTS","NOT_EXISTS","COUNT","SUM","MIN","AVG","SAMPLE","GROUP_CONCAT","SEPARATOR","TRUE","FALSE","IN","NOT_IN","MAX_LENGTH","MAX","TurtleParser","extendStatics","chevrotain__WEBPACK_IMPORTED_MODULE_0__","__extends","b","setPrototypeOf","__proto__","Array","__","constructor","turtleTokenTypes","turtleTokenMap","_super","config","tokens","lexerDefinition","performSelfAnalysis","_this","outputCst","recoveryEnabled","namespacesMap","semanticErrors","resetManagedState","tokenize","document","lexer","parse","input","cst","turtleDoc","errors","RULE","allowEdgeProperties","MANY","SUBRULE","statement","ARGS","OR","ALT","directive","triples","CONSUME","Period","prefixID","base","sparqlPrefix","sparqlBase","TTL_PREFIX","pnameNsToken","PNAME_NS","iriToken","IRIREF","pnameImageWithoutColon","image","iriImage","TTL_BASE","subject","SUBRULE1","predicateObjectList","GATE","Boolean","EmbeddedTriplePattern","blankNodePropertyList","OPTION","SUBRULE2","LEmbed","REmbed","verb","objectList","EmbeddedPredicateObjectList","Semicolon","OR1","LCurly","RCurly","iri","BlankNode","collection","predicate","Comma","literal","RDFLiteral","NumericLiteral","BooleanLiteral","LBracket","RBracket","LParen","RParen","INTEGER","DECIMAL","DOUBLE","String","LANGTAG","DoubleCaret","STRING_LITERAL_QUOTE","STRING_LITERAL_SINGLE_QUOTE","STRING_LITERAL_LONG_SINGLE_QUOTE","STRING_LITERAL_LONG_QUOTE","PrefixedName","prefixedNameToken","PNAME_LN","message","token","context","ruleStack","getHumanReadableRuleStack","ruleOccurrenceStack","RULE_OCCURRENCE_STACK","resyncedTokens","BLANK_NODE_LABEL","ANON","regex","or","_i","map","source","join","and","option","many","CATCH_ALL_AT_LEAST_ONE","PN_CHARS_BASE","EXPONENT","ECHAR","HEX","PN_LOCAL_ESC","PN_CHARS_U","PN_CHARS","PN_PREFIX","PERCENT","PLX","PN_LOCAL","NIL","STRING_LITERAL1","STRING_LITERAL2","STRING_LITERAL_LONG1","STRING_LITERAL_LONG2","INTEGER_POSITIVE","DECIMAL_POSITIVE","DOUBLE_POSITIVE","INTEGER_NEGATIVE","DECIMAL_NEGATIVE","DOUBLE_NEGATIVE","VAR1","VAR2","_regex__WEBPACK_IMPORTED_MODULE_0__","WS","VARNAME","terminals","helpers_matchers__WEBPACK_IMPORTED_MODULE_1__","STRING_LITERAL_LONG1_TOKEN","STRING_LITERAL_LONG2_TOKEN","PNAME_LN_TOKEN","label","sparqlTokenMap","baseTokens","pathsTokens","nonStandardTokens","stardogSparqlTokens","sparqlTokenTypes","_terminals__WEBPACK_IMPORTED_MODULE_1__","_keywords__WEBPACK_IMPORTED_MODULE_2__","Comment","group","WhiteSpace","SKIPPED","line_breaks","Star","QuestionMark","Plus","Minus","Pipe","ForwardSlash","Caret","Bang","LogicalOr","LogicalAnd","Equals","NotEquals","LessThan","GreaterThan","LessThanEquals","GreaterThanEquals","concat","indexOfSelect","turtleTokens","_TurtleParser__WEBPACK_IMPORTED_MODULE_0__","escapeSequence","escapeReplacements","\\","'","\"","f","_","~",".","-","!","$","&","(",")","*","+",",",";","=","/","?","#","@","%","unescapedStringLiteralQuote","unescapedStringLiteralSingleQuote","stringLiteralQuote","stringLiteralSingleQuote","stringLiteralLongQuote","stringLiteralLongSingleQuote","illegalIriChars","escapedIri","unescapedIri","unescape_unescape","item","replace","unicode4","unicode8","escapedChar","fromCharCode","parseInt","charCode","replacement","Error","error","unicodeRegexp","matchers","text","startOffset","match","exec","textToMatch","UCHAR","test"],"mappings":"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","file":"millan.turtle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"turtle\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"turtle\"] = factory();\n\telse\n\t\troot[\"millan\"] = root[\"millan\"] || {}, root[\"millan\"][\"turtle\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t8: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([63,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { createToken } from 'chevrotain';\nexport var createKeyword = function (_a) {\n    var name = _a.name, pattern = _a.pattern, props = __rest(_a, [\"name\", \"pattern\"]);\n    return createToken(__assign({ name: name, pattern: pattern || new RegExp(name, 'i') }, props));\n};\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport { createToken } from 'chevrotain';\nimport { createKeyword as createKeywordToken } from 'helpers/chevrotain/tokens';\nexport var createKeyword = function (_a) {\n    var _b = _a.longer_alt, longer_alt = _b === void 0 ? UNKNOWN : _b, props = __rest(_a, [\"longer_alt\"]);\n    return createKeywordToken(__assign({ longer_alt: longer_alt }, props));\n};\nvar UNKNOWN = createToken({ name: 'UNKNOWN', pattern: /\\w+/i });\nexport var keywords = {\n    SELECT: createKeyword({ name: 'SELECT' }),\n    CONSTRUCT: createKeyword({ name: 'CONSTRUCT' }),\n    DISTINCT: createKeyword({ name: 'DISTINCT' }),\n    START: createKeyword({ name: 'START' }),\n    END: createKeyword({ name: 'END' }),\n    VIA: createKeyword({ name: 'VIA' }),\n    PATHS: createKeyword({ name: 'PATHS' }),\n    PATHS_ALL: createKeyword({\n        name: 'PATHS_ALL',\n        pattern: /PATHS ALL/i,\n    }),\n    PATHS_SHORTEST: createKeyword({\n        name: 'PATHS_SHORTEST',\n        pattern: /PATHS SHORTEST/i,\n    }),\n    CYCLIC: createKeyword({ name: 'CYCLIC' }),\n    AS: createKeyword({ name: 'AS' }),\n    WHERE: createKeyword({ name: 'WHERE' }),\n    A: createKeyword({ name: 'A', pattern: /a/ }),\n    GROUP_BY: createKeyword({\n        name: 'GROUP_BY',\n        pattern: /GROUP BY/i,\n    }),\n    ORDER_BY: createKeyword({\n        name: 'ORDER_BY',\n        pattern: /ORDER BY/i,\n    }),\n    BY: createKeyword({ name: 'BY' }),\n    BASE: createKeyword({ name: 'BASE' }),\n    PREFIX: createKeyword({ name: 'PREFIX' }),\n    DESCRIBE: createKeyword({ name: 'DESCRIBE' }),\n    ASK: createKeyword({ name: 'ASK' }),\n    FROM: createKeyword({ name: 'FROM' }),\n    REDUCED: createKeyword({ name: 'REDUCED' }),\n    NAMED: createKeyword({ name: 'NAMED' }),\n    HAVING: createKeyword({ name: 'HAVING' }),\n    ASC: createKeyword({ name: 'ASC' }),\n    DESC: createKeyword({ name: 'DESC' }),\n    OFFSET: createKeyword({ name: 'OFFSET' }),\n    LIMIT: createKeyword({ name: 'LIMIT' }),\n    VALUES: createKeyword({ name: 'VALUES' }),\n    LOAD: createKeyword({ name: 'LOAD' }),\n    SILENT: createKeyword({ name: 'SILENT' }),\n    INTO: createKeyword({ name: 'INTO' }),\n    CLEAR: createKeyword({ name: 'CLEAR' }),\n    DROP: createKeyword({ name: 'DROP' }),\n    CREATE: createKeyword({ name: 'CREATE' }),\n    ADD: createKeyword({ name: 'ADD' }),\n    TO: createKeyword({ name: 'TO' }),\n    MOVE: createKeyword({ name: 'MOVE' }),\n    COPY: createKeyword({ name: 'COPY' }),\n    INSERT_DATA: createKeyword({\n        name: 'INSERT_DATA',\n        pattern: /INSERT +DATA/i,\n    }),\n    DELETE_DATA: createKeyword({\n        name: 'DELETE_DATA',\n        pattern: /DELETE +DATA/i,\n    }),\n    DELETE_WHERE: createKeyword({\n        name: 'DELETE_WHERE',\n        pattern: /DELETE +WHERE/i,\n    }),\n    WITH: createKeyword({ name: 'WITH' }),\n    DELETE: createKeyword({ name: 'DELETE' }),\n    INSERT: createKeyword({ name: 'INSERT' }),\n    USING: createKeyword({ name: 'USING' }),\n    DEFAULT: createKeyword({ name: 'DEFAULT' }),\n    GRAPH: createKeyword({ name: 'GRAPH' }),\n    ALL: createKeyword({ name: 'ALL' }),\n    OPTIONAL: createKeyword({ name: 'OPTIONAL' }),\n    SERVICE: createKeyword({ name: 'SERVICE' }),\n    BIND: createKeyword({ name: 'BIND' }),\n    UNNEST: createKeyword({ name: 'UNNEST' }),\n    UNDEF: createKeyword({ name: 'UNDEF' }),\n    MINUS: createKeyword({ name: 'MINUS' }),\n    UNION: createKeyword({ name: 'UNION' }),\n    FILTER: createKeyword({ name: 'FILTER' }),\n    STR: createKeyword({ name: 'STR' }),\n    LANG: createKeyword({ name: 'LANG' }),\n    LANGMATCHES: createKeyword({ name: 'LANGMATCHES' }),\n    DATATYPE: createKeyword({ name: 'DATATYPE' }),\n    BOUND: createKeyword({ name: 'BOUND' }),\n    IRI: createKeyword({ name: 'IRI' }),\n    URI: createKeyword({ name: 'URI' }),\n    BNODE: createKeyword({ name: 'BNODE' }),\n    RAND: createKeyword({ name: 'RAND' }),\n    ABS: createKeyword({ name: 'ABS' }),\n    CEIL: createKeyword({ name: 'CEIL' }),\n    FLOOR: createKeyword({ name: 'FLOOR' }),\n    ROUND: createKeyword({ name: 'ROUND' }),\n    CONCAT: createKeyword({ name: 'CONCAT' }),\n    STRLEN: createKeyword({ name: 'STRLEN' }),\n    UCASE: createKeyword({ name: 'UCASE' }),\n    LCASE: createKeyword({ name: 'LCASE' }),\n    ENCODE_FOR_URI: createKeyword({ name: 'ENCODE_FOR_URI' }),\n    CONTAINS: createKeyword({ name: 'CONTAINS' }),\n    STRSTARTS: createKeyword({ name: 'STRSTARTS' }),\n    STRENDS: createKeyword({ name: 'STRENDS' }),\n    STRBEFORE: createKeyword({ name: 'STRBEFORE' }),\n    STRAFTER: createKeyword({ name: 'STRAFTER' }),\n    YEAR: createKeyword({ name: 'YEAR' }),\n    MONTH: createKeyword({ name: 'MONTH' }),\n    DAY: createKeyword({ name: 'DAY' }),\n    HOURS: createKeyword({ name: 'HOURS' }),\n    MINUTES: createKeyword({ name: 'MINUTES' }),\n    SECONDS: createKeyword({ name: 'SECONDS' }),\n    TIMEZONE: createKeyword({ name: 'TIMEZONE' }),\n    TZ: createKeyword({ name: 'TZ' }),\n    NOW: createKeyword({ name: 'NOW' }),\n    UUID: createKeyword({ name: 'UUID' }),\n    STRUUID: createKeyword({ name: 'STRUUID' }),\n    MD5: createKeyword({ name: 'MD5' }),\n    SHA1: createKeyword({ name: 'SHA1' }),\n    SHA256: createKeyword({ name: 'SHA256' }),\n    SHA384: createKeyword({ name: 'SHA384' }),\n    SHA512: createKeyword({ name: 'SHA512' }),\n    COALESCE: createKeyword({ name: 'COALESCE' }),\n    IF: createKeyword({ name: 'IF' }),\n    STRLANG: createKeyword({ name: 'STRLANG' }),\n    STRDT: createKeyword({ name: 'STRDT' }),\n    sameTerm: createKeyword({ name: 'sameTerm' }),\n    isIRI: createKeyword({ name: 'isIRI' }),\n    isURI: createKeyword({ name: 'isURI' }),\n    isBLANK: createKeyword({ name: 'isBLANK' }),\n    isLITERAL: createKeyword({ name: 'isLITERAL' }),\n    isNUMERIC: createKeyword({ name: 'isNUMERIC' }),\n    REGEX: createKeyword({ name: 'REGEX' }),\n    SUBSTR: createKeyword({ name: 'SUBSTR' }),\n    REPLACE: createKeyword({ name: 'REPLACE' }),\n    EXISTS: createKeyword({ name: 'EXISTS' }),\n    NOT_EXISTS: createKeyword({\n        name: 'NOT_EXISTS',\n        pattern: /NOT EXISTS/i,\n    }),\n    COUNT: createKeyword({ name: 'COUNT' }),\n    SUM: createKeyword({ name: 'SUM' }),\n    MIN: createKeyword({ name: 'MIN' }),\n    AVG: createKeyword({ name: 'AVG' }),\n    SAMPLE: createKeyword({ name: 'SAMPLE' }),\n    GROUP_CONCAT: createKeyword({ name: 'GROUP_CONCAT' }),\n    SEPARATOR: createKeyword({ name: 'SEPARATOR' }),\n    TRUE: createKeyword({ name: 'TRUE' }),\n    FALSE: createKeyword({ name: 'FALSE' }),\n    IN: createKeyword({ name: 'IN' }),\n    NOT_IN: createKeyword({\n        name: 'NOT_IN',\n        pattern: /NOT IN/i,\n    }),\n    MAX_LENGTH: createKeyword({\n        name: 'MAX_LENGTH',\n        pattern: /MAX LENGTH/i,\n    }),\n    MAX: createKeyword({ name: 'MAX' }),\n    UNKNOWN: UNKNOWN,\n};\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a = require('./tokens'), turtleTokenTypes = _a.turtleTokenTypes, turtleTokenMap = _a.turtleTokenMap;\nimport { Parser, Lexer, } from 'chevrotain';\nvar TurtleParser = /** @class */ (function (_super) {\n    __extends(TurtleParser, _super);\n    function TurtleParser(config, tokens, lexerDefinition, performSelfAnalysis) {\n        if (config === void 0) { config = {}; }\n        if (tokens === void 0) { tokens = turtleTokenTypes; }\n        if (lexerDefinition === void 0) { lexerDefinition = tokens; }\n        if (performSelfAnalysis === void 0) { performSelfAnalysis = true; }\n        var _this = _super.call(this, tokens, __assign({ outputCst: true, recoveryEnabled: true }, config)) || this;\n        // Parsing Turtle requires that the parser keep a map of namespaces in state.\n        // Empty prefixes, for example, are allowed only if the empty prefix has been\n        // added to the namespaces map (for now, that's all this tracks). (TODO: We\n        // might want to use a visitor for this, but I'm doing it quick-and-dirty for\n        // now.)\n        // See here: https://www.w3.org/TR/turtle/#handle-PNAME_LN\n        _this.namespacesMap = {};\n        _this.semanticErrors = [];\n        // Clears the state that we have to manage on our own for each parse (see\n        // above for details).\n        _this.resetManagedState = function () {\n            _this.namespacesMap = {};\n            _this.semanticErrors = [];\n        };\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        // NOTE: This parser can parse in two modes, 'standard' and 'stardog'. The\n        // latter includes non-standard features like embedded triples patterns (edge\n        // properties).\n        _this.parse = function (document, mode) {\n            if (mode === void 0) { mode = 'standard'; }\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = _this.turtleDoc(0, [mode]);\n            // Next two items are copied so that they can be returned/held after parse\n            // state is cleared.\n            var errors = _this.errors.slice();\n            var semanticErrors = _this.semanticErrors.slice();\n            _this.resetManagedState();\n            return {\n                errors: errors,\n                semanticErrors: semanticErrors,\n                cst: cst,\n            };\n        };\n        _this.turtleDoc = _this.RULE('turtleDoc', function (mode) {\n            var allowEdgeProperties = mode === 'stardog';\n            _this.MANY(function () {\n                return _this.SUBRULE(_this.statement, { ARGS: [allowEdgeProperties] });\n            });\n        });\n        _this.statement = _this.RULE('statement', function (allowEdgeProperties) {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.directive); } },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.triples, { ARGS: [allowEdgeProperties] });\n                        _this.CONSUME(turtleTokenMap.Period);\n                    },\n                },\n            ]);\n        });\n        _this.directive = _this.RULE('directive', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.prefixID); } },\n                { ALT: function () { return _this.SUBRULE(_this.base); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlPrefix); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlBase); } },\n            ]);\n        });\n        _this.prefixID = _this.RULE('prefixID', function () {\n            _this.CONSUME(turtleTokenMap.TTL_PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.base = _this.RULE('base', function () {\n            _this.CONSUME(turtleTokenMap.TTL_BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.sparqlBase = _this.RULE('sparqlBase', function () {\n            _this.CONSUME(turtleTokenMap.BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n        });\n        _this.sparqlPrefix = _this.RULE('sparqlPrefix', function () {\n            _this.CONSUME(turtleTokenMap.PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        // ALSO NOTE: Intentionally does not conform to the RDF* spec.\n        // Stardog does not allow nesting of embedded triples.\n        _this.triples = _this.RULE('triples', function (allowEdgeProperties) {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.subject);\n                        _this.SUBRULE1(_this.predicateObjectList, {\n                            ARGS: [allowEdgeProperties],\n                        });\n                    },\n                },\n                {\n                    GATE: function () { return Boolean(allowEdgeProperties); },\n                    ALT: function () {\n                        _this.SUBRULE(_this.EmbeddedTriplePattern);\n                        _this.SUBRULE(_this.predicateObjectList);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.blankNodePropertyList, {\n                            ARGS: [allowEdgeProperties],\n                        });\n                        _this.OPTION(function () {\n                            return _this.SUBRULE2(_this.predicateObjectList, {\n                                ARGS: [allowEdgeProperties],\n                            });\n                        });\n                    },\n                },\n            ]);\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        // ALSO NOTE: Intentionally does not conform to the RDF* spec.\n        // Stardog does not allow nesting of embedded triples.\n        _this.EmbeddedTriplePattern = _this.RULE('EmbeddedTriplePattern', function () {\n            _this.CONSUME(turtleTokenMap.LEmbed);\n            _this.SUBRULE(_this.triples);\n            _this.CONSUME(turtleTokenMap.REmbed);\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        // ALSO NOTE: Intentionally does not conform to the RDF* spec.\n        // Stardog does not allow embedded triples with object lists.\n        _this.predicateObjectList = _this.RULE('predicateObjectList', function (allowEdgeProperties) {\n            _this.SUBRULE(_this.verb);\n            _this.OR([\n                {\n                    ALT: function () {\n                        return _this.SUBRULE(_this.objectList, { ARGS: [allowEdgeProperties] });\n                    },\n                },\n                {\n                    GATE: function () { return Boolean(allowEdgeProperties); },\n                    ALT: function () {\n                        _this.SUBRULE(_this.EmbeddedPredicateObjectList);\n                        _this.SUBRULE(_this.object, { ARGS: [allowEdgeProperties] });\n                    },\n                },\n            ]);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.SUBRULE1(_this.verb);\n                    _this.OR1([\n                        {\n                            ALT: function () {\n                                return _this.SUBRULE1(_this.objectList, { ARGS: [allowEdgeProperties] });\n                            },\n                        },\n                        {\n                            GATE: function () { return Boolean(allowEdgeProperties); },\n                            ALT: function () {\n                                _this.SUBRULE1(_this.EmbeddedPredicateObjectList);\n                                _this.SUBRULE1(_this.object, { ARGS: [allowEdgeProperties] });\n                            },\n                        },\n                    ]);\n                });\n            });\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        // ALSO NOTE: Intentionally does not conform to the RDF* spec.\n        // Stardog does not allow nesting of embedded triples.\n        _this.EmbeddedPredicateObjectList = _this.RULE('EmbeddedPredicateObjectList', function () {\n            _this.CONSUME(turtleTokenMap.LCurly);\n            _this.SUBRULE(_this.predicateObjectList);\n            _this.CONSUME(turtleTokenMap.RCurly);\n        });\n        _this.subject = _this.RULE('subject', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n            ]);\n        });\n        _this.predicate = _this.RULE('predicate', function () {\n            _this.SUBRULE(_this.iri);\n        });\n        _this.objectList = _this.RULE('objectList', function (allowEdgeProperties) {\n            _this.SUBRULE(_this.object, { ARGS: [allowEdgeProperties] });\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Comma);\n                _this.SUBRULE1(_this.object, { ARGS: [allowEdgeProperties] });\n            });\n        });\n        _this.verb = _this.RULE('verb', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.predicate); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.A); } },\n            ]);\n        });\n        _this.literal = _this.RULE('literal', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n            ]);\n        });\n        _this.blankNodePropertyList = _this.RULE('blankNodePropertyList', function (allowEdgeProperties) {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.SUBRULE(_this.predicateObjectList, { ARGS: [allowEdgeProperties] });\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.object = _this.RULE('object', function (allowEdgeProperties) {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n                {\n                    ALT: function () {\n                        return _this.SUBRULE(_this.blankNodePropertyList, {\n                            ARGS: [allowEdgeProperties],\n                        });\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE(_this.literal); } },\n            ]);\n        });\n        _this.collection = _this.RULE('collection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () { return _this.SUBRULE(_this.object); });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.NumericLiteral = _this.RULE('NumericLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.INTEGER); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DECIMAL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DOUBLE); } },\n            ]);\n        });\n        _this.RDFLiteral = _this.RULE('RDFLiteral', function () {\n            _this.SUBRULE(_this.String);\n            _this.OPTION(function () {\n                _this.OR([\n                    { ALT: function () { return _this.CONSUME(turtleTokenMap.LANGTAG); } },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(turtleTokenMap.DoubleCaret);\n                            _this.SUBRULE(_this.iri);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.BooleanLiteral = _this.RULE('BooleanLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.TRUE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.FALSE); } },\n            ]);\n        });\n        _this.String = _this.RULE('String', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_QUOTE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE); } },\n                {\n                    ALT: function () {\n                        return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE);\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_QUOTE); } },\n            ]);\n        });\n        _this.iri = _this.RULE('iri', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.IRIREF); } },\n                { ALT: function () { return _this.SUBRULE(_this.PrefixedName); } },\n            ]);\n        });\n        _this.PrefixedName = _this.RULE('PrefixedName', function () {\n            var prefixedNameToken = _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_LN); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_NS); } },\n            ]);\n            var pnameNsImage = prefixedNameToken.image.slice(0, prefixedNameToken.image.indexOf(':'));\n            if (!(pnameNsImage in _this.namespacesMap)) {\n                _this.semanticErrors.push({\n                    name: 'NoNamespacePrefixError',\n                    message: 'A prefix was used for which there was no namespace defined.',\n                    token: prefixedNameToken,\n                    context: {\n                        ruleStack: _this.getHumanReadableRuleStack(),\n                        ruleOccurrenceStack: _this.RULE_OCCURRENCE_STACK.slice(),\n                    },\n                    resyncedTokens: [],\n                });\n            }\n        });\n        _this.BlankNode = _this.RULE('BlankNode', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.BLANK_NODE_LABEL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.ANON); } },\n            ]);\n        });\n        _this.lexer = new Lexer(lexerDefinition);\n        if (performSelfAnalysis) {\n            Parser.performSelfAnalysis(_this);\n        }\n        return _this;\n    }\n    return TurtleParser;\n}(Parser));\nexport { TurtleParser };\n","export var regex = {\n    or: function () {\n        var r = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            r[_i] = arguments[_i];\n        }\n        return new RegExp(r.map(function (_a) {\n            var source = _a.source;\n            return \"(\" + source + \")\";\n        }).join('|'));\n    },\n    and: function () {\n        var r = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            r[_i] = arguments[_i];\n        }\n        return new RegExp(r.map(function (_a) {\n            var source = _a.source;\n            return \"(\" + source + \")\";\n        }).join(''));\n    },\n    option: function (r) {\n        return new RegExp(\"(\" + r.source + \")?\");\n    },\n    many: function (r) {\n        return new RegExp(\"(\" + r.source + \")*\");\n    },\n};\n","import { regex } from './regex';\nexport var CATCH_ALL = /[\\s\\S]*/; // equivalent to /.*/s, which isn't a JS standard yet\nexport var CATCH_ALL_AT_LEAST_ONE = /[\\s\\S]+/; // equivalent to /.+/s, which isn't a JS standard yet\nexport var IRIREF = /<[^<>\\\\{}|\\^`\\u0000-\\u0020]*>/;\nexport var PN_CHARS_BASE = /[A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nexport var LANGTAG = /@[a-zA-Z]+(-[a-zA-Z0-9]+)*/;\nexport var INTEGER = /\\d+/;\nexport var DECIMAL = /(\\d*\\.\\d+)|(\\d+\\.\\d*)/;\nexport var EXPONENT = /[eE][+-]?\\d+/;\nexport var ECHAR = /\\\\[tbnrf\"'\\\\]/;\nexport var WS = /[\\u0020\\u0009\\u000d\\u000a]/;\nexport var HEX = /[0-9A-Fa-f]/;\nexport var PN_LOCAL_ESC = /\\\\[_~.\\-!\\$&'()*+,=\\/?#@%;]/;\nexport var PN_CHARS_U = regex.or(PN_CHARS_BASE, /_/);\nexport var PN_CHARS = regex.or(PN_CHARS_U, /-/, /\\d/, /\\u00b7/, /[\\u0300-\\u036f]/, /[\\u203f-\\u2040]/);\nexport var PN_PREFIX = regex.and(PN_CHARS_BASE, regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./)), PN_CHARS)));\nexport var PERCENT = regex.and(/%/, HEX, HEX);\nexport var PLX = regex.or(PERCENT, PN_LOCAL_ESC);\nexport var PN_LOCAL = regex.and(regex.or(PN_CHARS_U, /:/, /\\d/, PLX), regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./, /:/, PLX)), regex.or(PN_CHARS, /:/, PLX))));\nexport var VARNAME = regex.and(regex.or(PN_CHARS_U, /\\d/), regex.many(regex.or(PN_CHARS_U, /\\d/, /\\u00b7/, /[\\u0300-\\u036f]/, /[\\u203f-\\u2040]/)));\nexport var ANON = regex.and(/\\[/, regex.many(WS), /\\]/);\nexport var NIL = regex.and(/\\(/, regex.many(WS), /\\)/);\nexport var STRING_LITERAL1 = regex.and(/'/, regex.many(regex.or(/[^\\u0027\\u005C\\u000A\\u000D]/, ECHAR)), /'/);\nexport var STRING_LITERAL2 = regex.and(/\"/, regex.many(regex.or(/[^\\u0022\\u005C\\u000A\\u000D]/, ECHAR)), /\"/);\nexport var STRING_LITERAL_LONG1 = regex.and(/'''/, regex.many(regex.and(regex.option(regex.or(/'/, /''/)), regex.or(/[^'\\\\]/, ECHAR))), /'''/);\nexport var STRING_LITERAL_LONG2 = regex.and(/\"\"\"/, regex.many(regex.and(regex.option(regex.or(/\"/, /\"\"/)), regex.or(/[^\"\\\\]/, ECHAR))), /\"\"\"/);\nexport var DOUBLE = regex.or(regex.and(/\\d+\\.\\d*/, EXPONENT), regex.and(/\\.\\d+/, EXPONENT), regex.and(/\\d+/, EXPONENT));\nexport var INTEGER_POSITIVE = regex.and(/\\+/, INTEGER);\nexport var DECIMAL_POSITIVE = regex.and(/\\+/, DECIMAL);\nexport var DOUBLE_POSITIVE = regex.and(/\\+/, DOUBLE);\nexport var INTEGER_NEGATIVE = regex.and(/-/, INTEGER);\nexport var DECIMAL_NEGATIVE = regex.and(/-/, DECIMAL);\nexport var DOUBLE_NEGATIVE = regex.and(/-/, DOUBLE);\nexport var VAR1 = regex.and(/\\?/, VARNAME);\nexport var VAR2 = regex.and(/\\$/, VARNAME);\nexport var BLANK_NODE_LABEL = regex.and(/_:/, regex.or(PN_CHARS_U, /\\d/), regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./)), PN_CHARS)));\nexport var PNAME_NS = regex.and(regex.option(PN_PREFIX), /:/);\nexport var PNAME_LN = regex.and(PNAME_NS, PN_LOCAL);\n","// @ts-ignore: import types for declarations\nimport { createToken } from 'chevrotain';\nimport { STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, PNAME_LN, IRIREF, LANGTAG, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, STRING_LITERAL1, STRING_LITERAL2, NIL, ANON, PNAME_NS, BLANK_NODE_LABEL, VAR1, VAR2, PERCENT, } from 'helpers/matchers';\nvar STRING_LITERAL_LONG1_TOKEN = createToken({\n    name: 'STRING_LITERAL_LONG1',\n    pattern: STRING_LITERAL_LONG1,\n});\nvar STRING_LITERAL_LONG2_TOKEN = createToken({\n    name: 'STRING_LITERAL_LONG2',\n    pattern: STRING_LITERAL_LONG2,\n});\nvar PNAME_LN_TOKEN = createToken({\n    name: 'PNAME_LN',\n    pattern: PNAME_LN,\n});\nexport var terminals = {\n    IRIREF: createToken({\n        name: 'IRIREF',\n        pattern: IRIREF,\n        label: '<http://example.com>',\n    }),\n    LANGTAG: createToken({\n        name: 'LANGTAG',\n        pattern: LANGTAG,\n    }),\n    INTEGER: createToken({\n        name: 'INTEGER',\n        pattern: INTEGER,\n    }),\n    DECIMAL: createToken({\n        name: 'DECIMAL',\n        pattern: DECIMAL,\n    }),\n    DOUBLE: createToken({\n        name: 'DOUBLE',\n        pattern: DOUBLE,\n    }),\n    INTEGER_POSITIVE: createToken({\n        name: 'INTEGER_POSITIVE',\n        pattern: INTEGER_POSITIVE,\n    }),\n    DECIMAL_POSITIVE: createToken({\n        name: 'DECIMAL_POSITIVE',\n        pattern: DECIMAL_POSITIVE,\n    }),\n    DOUBLE_POSITIVE: createToken({\n        name: 'DOUBLE_POSITIVE',\n        pattern: DOUBLE_POSITIVE,\n    }),\n    INTEGER_NEGATIVE: createToken({\n        name: 'INTEGER_NEGATIVE',\n        pattern: INTEGER_NEGATIVE,\n    }),\n    DECIMAL_NEGATIVE: createToken({\n        name: 'DECIMAL_NEGATIVE',\n        pattern: DECIMAL_NEGATIVE,\n    }),\n    DOUBLE_NEGATIVE: createToken({\n        name: 'DOUBLE_NEGATIVE',\n        pattern: DOUBLE_NEGATIVE,\n    }),\n    STRING_LITERAL_LONG1: STRING_LITERAL_LONG1_TOKEN,\n    STRING_LITERAL_LONG2: STRING_LITERAL_LONG2_TOKEN,\n    STRING_LITERAL1: createToken({\n        name: 'STRING_LITERAL1',\n        pattern: STRING_LITERAL1,\n        longer_alt: STRING_LITERAL_LONG1_TOKEN,\n    }),\n    STRING_LITERAL2: createToken({\n        name: 'STRING_LITERAL2',\n        pattern: STRING_LITERAL2,\n        longer_alt: STRING_LITERAL_LONG2_TOKEN,\n    }),\n    NIL: createToken({\n        name: 'NIL',\n        pattern: NIL,\n        label: '()',\n    }),\n    ANON: createToken({\n        name: 'ANON',\n        pattern: ANON,\n        label: '[]',\n    }),\n    PNAME_LN: PNAME_LN_TOKEN,\n    PNAME_NS: createToken({\n        name: 'PNAME_NS',\n        pattern: PNAME_NS,\n        longer_alt: PNAME_LN_TOKEN,\n    }),\n    BLANK_NODE_LABEL: createToken({\n        name: 'BLANK_NODE_LABEL',\n        pattern: BLANK_NODE_LABEL,\n    }),\n    VAR1: createToken({\n        name: 'VAR1',\n        pattern: VAR1,\n        label: '?foo',\n    }),\n    VAR2: createToken({\n        name: 'VAR2',\n        pattern: VAR2,\n        label: '?bar',\n    }),\n    PERCENT: createToken({\n        name: 'PERCENT',\n        pattern: PERCENT,\n    }),\n};\n","// @ts-ignore: import types for declarations\nimport { createToken, Lexer } from 'chevrotain';\nimport { terminals } from './terminals';\nimport { keywords } from './keywords';\nexport var sparqlTokenMap = {\n    IRIREF: terminals.IRIREF,\n    LANGTAG: terminals.LANGTAG,\n    INTEGER: terminals.INTEGER,\n    DECIMAL: terminals.DECIMAL,\n    DOUBLE: terminals.DOUBLE,\n    INTEGER_POSITIVE: terminals.INTEGER_POSITIVE,\n    DECIMAL_POSITIVE: terminals.DECIMAL_POSITIVE,\n    DOUBLE_POSITIVE: terminals.DOUBLE_POSITIVE,\n    INTEGER_NEGATIVE: terminals.INTEGER_NEGATIVE,\n    DECIMAL_NEGATIVE: terminals.DECIMAL_NEGATIVE,\n    DOUBLE_NEGATIVE: terminals.DOUBLE_NEGATIVE,\n    STRING_LITERAL1: terminals.STRING_LITERAL1,\n    STRING_LITERAL2: terminals.STRING_LITERAL2,\n    STRING_LITERAL_LONG1: terminals.STRING_LITERAL_LONG1,\n    STRING_LITERAL_LONG2: terminals.STRING_LITERAL_LONG2,\n    NIL: terminals.NIL,\n    ANON: terminals.ANON,\n    PNAME_NS: terminals.PNAME_NS,\n    PNAME_LN: terminals.PNAME_LN,\n    BLANK_NODE_LABEL: terminals.BLANK_NODE_LABEL,\n    VAR1: terminals.VAR1,\n    VAR2: terminals.VAR2,\n    PERCENT: terminals.PERCENT,\n    Comment: createToken({\n        name: 'Comment',\n        pattern: /#[^\\n]*/,\n        group: 'comments',\n    }),\n    LCurly: createToken({ name: 'LCurly', pattern: '{' }),\n    RCurly: createToken({ name: 'RCurly', pattern: '}' }),\n    LParen: createToken({ name: 'LParen', pattern: '(' }),\n    RParen: createToken({ name: 'RParen', pattern: ')' }),\n    WhiteSpace: createToken({\n        name: 'WhiteSpace',\n        pattern: /\\s+/,\n        group: Lexer.SKIPPED,\n        line_breaks: true,\n    }),\n    Star: createToken({\n        name: 'Star',\n        pattern: '*',\n    }),\n    UNKNOWN: keywords.UNKNOWN,\n    Period: createToken({\n        name: 'Period',\n        pattern: '.',\n    }),\n    QuestionMark: createToken({\n        name: 'QuestionMark',\n        pattern: '?',\n    }),\n    Plus: createToken({\n        name: 'Plus',\n        pattern: '+',\n    }),\n    Minus: createToken({\n        name: 'Minus',\n        pattern: '-',\n    }),\n    LBracket: createToken({\n        name: 'LBracket',\n        pattern: '[',\n    }),\n    RBracket: createToken({\n        name: 'RBracket',\n        pattern: ']',\n    }),\n    Semicolon: createToken({\n        name: 'Semicolon',\n        pattern: ';',\n    }),\n    Comma: createToken({\n        name: 'Comma',\n        pattern: ',',\n    }),\n    Pipe: createToken({\n        name: 'Pipe',\n        pattern: '|',\n    }),\n    ForwardSlash: createToken({\n        name: 'ForwardSlash',\n        pattern: '/',\n    }),\n    Caret: createToken({\n        name: 'Caret',\n        pattern: '^',\n    }),\n    DoubleCaret: createToken({\n        name: 'DoubleCaret',\n        pattern: '^^',\n    }),\n    Bang: createToken({\n        name: 'Bang',\n        pattern: '!',\n    }),\n    LogicalOr: createToken({\n        name: 'LogicalOr',\n        pattern: '||',\n    }),\n    LogicalAnd: createToken({\n        name: 'LogicalAnd',\n        pattern: '&&',\n    }),\n    Equals: createToken({\n        name: 'Equals',\n        pattern: '=',\n    }),\n    NotEquals: createToken({\n        name: 'NotEquals',\n        pattern: '!=',\n    }),\n    LessThan: createToken({\n        name: 'LessThan',\n        pattern: '<',\n    }),\n    GreaterThan: createToken({\n        name: 'GreaterThan',\n        pattern: '>',\n    }),\n    LessThanEquals: createToken({\n        name: 'LessThanEquals',\n        pattern: '<=',\n    }),\n    GreaterThanEquals: createToken({\n        name: 'GreaterThanEquals',\n        pattern: '>=',\n    }),\n    LEmbed: createToken({\n        name: 'LEmbed',\n        pattern: '<<',\n    }),\n    REmbed: createToken({\n        name: 'REmbed',\n        pattern: '>>',\n    }),\n    SELECT: keywords.SELECT,\n    CONSTRUCT: keywords.CONSTRUCT,\n    DISTINCT: keywords.DISTINCT,\n    START: keywords.START,\n    END: keywords.END,\n    VIA: keywords.VIA,\n    CYCLIC: keywords.CYCLIC,\n    PATHS_SHORTEST: keywords.PATHS_SHORTEST,\n    PATHS_ALL: keywords.PATHS_ALL,\n    PATHS: keywords.PATHS,\n    AS: keywords.AS,\n    WHERE: keywords.WHERE,\n    A: keywords.A,\n    GROUP_BY: keywords.GROUP_BY,\n    ORDER_BY: keywords.ORDER_BY,\n    BY: keywords.BY,\n    BASE: keywords.BASE,\n    PREFIX: keywords.PREFIX,\n    DESCRIBE: keywords.DESCRIBE,\n    ASK: keywords.ASK,\n    FROM: keywords.FROM,\n    REDUCED: keywords.REDUCED,\n    NAMED: keywords.NAMED,\n    HAVING: keywords.HAVING,\n    ASC: keywords.ASC,\n    DESC: keywords.DESC,\n    OFFSET: keywords.OFFSET,\n    LIMIT: keywords.LIMIT,\n    VALUES: keywords.VALUES,\n    LOAD: keywords.LOAD,\n    SILENT: keywords.SILENT,\n    INTO: keywords.INTO,\n    CLEAR: keywords.CLEAR,\n    DROP: keywords.DROP,\n    CREATE: keywords.CREATE,\n    ADD: keywords.ADD,\n    TO: keywords.TO,\n    MOVE: keywords.MOVE,\n    COPY: keywords.COPY,\n    INSERT_DATA: keywords.INSERT_DATA,\n    DELETE_DATA: keywords.DELETE_DATA,\n    DELETE_WHERE: keywords.DELETE_WHERE,\n    WITH: keywords.WITH,\n    DELETE: keywords.DELETE,\n    INSERT: keywords.INSERT,\n    USING: keywords.USING,\n    DEFAULT: keywords.DEFAULT,\n    GRAPH: keywords.GRAPH,\n    ALL: keywords.ALL,\n    OPTIONAL: keywords.OPTIONAL,\n    SERVICE: keywords.SERVICE,\n    BIND: keywords.BIND,\n    UNNEST: keywords.UNNEST,\n    UNDEF: keywords.UNDEF,\n    MINUS: keywords.MINUS,\n    UNION: keywords.UNION,\n    FILTER: keywords.FILTER,\n    STR: keywords.STR,\n    LANG: keywords.LANG,\n    LANGMATCHES: keywords.LANGMATCHES,\n    DATATYPE: keywords.DATATYPE,\n    BOUND: keywords.BOUND,\n    IRI: keywords.IRI,\n    URI: keywords.URI,\n    BNODE: keywords.BNODE,\n    RAND: keywords.RAND,\n    ABS: keywords.ABS,\n    CEIL: keywords.CEIL,\n    FLOOR: keywords.FLOOR,\n    ROUND: keywords.ROUND,\n    CONCAT: keywords.CONCAT,\n    STRLEN: keywords.STRLEN,\n    UCASE: keywords.UCASE,\n    LCASE: keywords.LCASE,\n    ENCODE_FOR_URI: keywords.ENCODE_FOR_URI,\n    CONTAINS: keywords.CONTAINS,\n    STRSTARTS: keywords.STRSTARTS,\n    STRENDS: keywords.STRENDS,\n    STRBEFORE: keywords.STRBEFORE,\n    STRAFTER: keywords.STRAFTER,\n    YEAR: keywords.YEAR,\n    MONTH: keywords.MONTH,\n    DAY: keywords.DAY,\n    HOURS: keywords.HOURS,\n    MINUTES: keywords.MINUTES,\n    SECONDS: keywords.SECONDS,\n    TIMEZONE: keywords.TIMEZONE,\n    TZ: keywords.TZ,\n    NOW: keywords.NOW,\n    UUID: keywords.UUID,\n    STRUUID: keywords.STRUUID,\n    MD5: keywords.MD5,\n    SHA1: keywords.SHA1,\n    SHA256: keywords.SHA256,\n    SHA384: keywords.SHA384,\n    SHA512: keywords.SHA512,\n    COALESCE: keywords.COALESCE,\n    IF: keywords.IF,\n    STRLANG: keywords.STRLANG,\n    STRDT: keywords.STRDT,\n    sameTerm: keywords.sameTerm,\n    isIRI: keywords.isIRI,\n    isURI: keywords.isURI,\n    isBLANK: keywords.isBLANK,\n    isLITERAL: keywords.isLITERAL,\n    isNUMERIC: keywords.isNUMERIC,\n    REGEX: keywords.REGEX,\n    SUBSTR: keywords.SUBSTR,\n    REPLACE: keywords.REPLACE,\n    EXISTS: keywords.EXISTS,\n    NOT_EXISTS: keywords.NOT_EXISTS,\n    COUNT: keywords.COUNT,\n    SUM: keywords.SUM,\n    MIN: keywords.MIN,\n    AVG: keywords.AVG,\n    SAMPLE: keywords.SAMPLE,\n    GROUP_CONCAT: keywords.GROUP_CONCAT,\n    SEPARATOR: keywords.SEPARATOR,\n    TRUE: keywords.TRUE,\n    FALSE: keywords.FALSE,\n    IN: keywords.IN,\n    NOT_IN: keywords.NOT_IN,\n    MAX_LENGTH: keywords.MAX_LENGTH,\n    MAX: keywords.MAX,\n};\nexport var baseTokens = [\n    sparqlTokenMap.NIL,\n    sparqlTokenMap.ANON,\n    sparqlTokenMap.LCurly,\n    sparqlTokenMap.RCurly,\n    sparqlTokenMap.LParen,\n    sparqlTokenMap.RParen,\n    sparqlTokenMap.WhiteSpace,\n    sparqlTokenMap.IRIREF,\n    sparqlTokenMap.LANGTAG,\n    sparqlTokenMap.DOUBLE,\n    sparqlTokenMap.DECIMAL,\n    sparqlTokenMap.INTEGER,\n    sparqlTokenMap.DOUBLE_POSITIVE,\n    sparqlTokenMap.DECIMAL_POSITIVE,\n    sparqlTokenMap.INTEGER_POSITIVE,\n    sparqlTokenMap.DOUBLE_NEGATIVE,\n    sparqlTokenMap.DECIMAL_NEGATIVE,\n    sparqlTokenMap.INTEGER_NEGATIVE,\n    sparqlTokenMap.STRING_LITERAL1,\n    sparqlTokenMap.STRING_LITERAL2,\n    sparqlTokenMap.STRING_LITERAL_LONG1,\n    sparqlTokenMap.STRING_LITERAL_LONG2,\n    sparqlTokenMap.PNAME_NS,\n    sparqlTokenMap.PNAME_LN,\n    sparqlTokenMap.BLANK_NODE_LABEL,\n    sparqlTokenMap.VAR1,\n    sparqlTokenMap.VAR2,\n    sparqlTokenMap.Comment,\n    sparqlTokenMap.SELECT,\n    sparqlTokenMap.CONSTRUCT,\n    sparqlTokenMap.DISTINCT,\n    sparqlTokenMap.Star,\n    sparqlTokenMap.WHERE,\n    sparqlTokenMap.GROUP_BY,\n    sparqlTokenMap.ORDER_BY,\n    sparqlTokenMap.BY,\n    sparqlTokenMap.Period,\n    sparqlTokenMap.QuestionMark,\n    sparqlTokenMap.Plus,\n    sparqlTokenMap.Minus,\n    sparqlTokenMap.LBracket,\n    sparqlTokenMap.RBracket,\n    sparqlTokenMap.PERCENT,\n    sparqlTokenMap.BASE,\n    sparqlTokenMap.PREFIX,\n    sparqlTokenMap.DESCRIBE,\n    sparqlTokenMap.ASK,\n    sparqlTokenMap.FROM,\n    sparqlTokenMap.REDUCED,\n    sparqlTokenMap.NAMED,\n    sparqlTokenMap.HAVING,\n    sparqlTokenMap.ASC,\n    sparqlTokenMap.DESC,\n    sparqlTokenMap.OFFSET,\n    sparqlTokenMap.LIMIT,\n    sparqlTokenMap.VALUES,\n    sparqlTokenMap.LOAD,\n    sparqlTokenMap.SILENT,\n    sparqlTokenMap.INTO,\n    sparqlTokenMap.AS,\n    sparqlTokenMap.CLEAR,\n    sparqlTokenMap.DROP,\n    sparqlTokenMap.CREATE,\n    sparqlTokenMap.ADD,\n    sparqlTokenMap.TO,\n    sparqlTokenMap.MOVE,\n    sparqlTokenMap.COPY,\n    sparqlTokenMap.INSERT_DATA,\n    sparqlTokenMap.DELETE_DATA,\n    sparqlTokenMap.DELETE_WHERE,\n    sparqlTokenMap.WITH,\n    sparqlTokenMap.DELETE,\n    sparqlTokenMap.INSERT,\n    sparqlTokenMap.USING,\n    sparqlTokenMap.DEFAULT,\n    sparqlTokenMap.GRAPH,\n    sparqlTokenMap.ALL,\n    sparqlTokenMap.OPTIONAL,\n    sparqlTokenMap.SERVICE,\n    sparqlTokenMap.BIND,\n    sparqlTokenMap.UNDEF,\n    sparqlTokenMap.MINUS,\n    sparqlTokenMap.UNION,\n    sparqlTokenMap.FILTER,\n    sparqlTokenMap.LANGMATCHES,\n    sparqlTokenMap.LANG,\n    sparqlTokenMap.DATATYPE,\n    sparqlTokenMap.BOUND,\n    sparqlTokenMap.IRI,\n    sparqlTokenMap.URI,\n    sparqlTokenMap.BNODE,\n    sparqlTokenMap.RAND,\n    sparqlTokenMap.ABS,\n    sparqlTokenMap.CEIL,\n    sparqlTokenMap.FLOOR,\n    sparqlTokenMap.ROUND,\n    sparqlTokenMap.CONCAT,\n    sparqlTokenMap.STRLEN,\n    sparqlTokenMap.UCASE,\n    sparqlTokenMap.LCASE,\n    sparqlTokenMap.ENCODE_FOR_URI,\n    sparqlTokenMap.CONTAINS,\n    sparqlTokenMap.STRSTARTS,\n    sparqlTokenMap.STRENDS,\n    sparqlTokenMap.STRBEFORE,\n    sparqlTokenMap.STRAFTER,\n    sparqlTokenMap.YEAR,\n    sparqlTokenMap.MONTH,\n    sparqlTokenMap.DAY,\n    sparqlTokenMap.HOURS,\n    sparqlTokenMap.MINUTES,\n    sparqlTokenMap.SECONDS,\n    sparqlTokenMap.TIMEZONE,\n    sparqlTokenMap.TZ,\n    sparqlTokenMap.NOW,\n    sparqlTokenMap.UUID,\n    sparqlTokenMap.STRUUID,\n    sparqlTokenMap.MD5,\n    sparqlTokenMap.SHA1,\n    sparqlTokenMap.SHA256,\n    sparqlTokenMap.SHA384,\n    sparqlTokenMap.SHA512,\n    sparqlTokenMap.COALESCE,\n    sparqlTokenMap.IF,\n    sparqlTokenMap.STRLANG,\n    sparqlTokenMap.STRDT,\n    sparqlTokenMap.STR,\n    sparqlTokenMap.sameTerm,\n    sparqlTokenMap.isIRI,\n    sparqlTokenMap.isURI,\n    sparqlTokenMap.isBLANK,\n    sparqlTokenMap.isLITERAL,\n    sparqlTokenMap.isNUMERIC,\n    sparqlTokenMap.REGEX,\n    sparqlTokenMap.SUBSTR,\n    sparqlTokenMap.REPLACE,\n    sparqlTokenMap.EXISTS,\n    sparqlTokenMap.NOT_EXISTS,\n    sparqlTokenMap.COUNT,\n    sparqlTokenMap.SUM,\n    sparqlTokenMap.MIN,\n    sparqlTokenMap.MAX_LENGTH,\n    sparqlTokenMap.MAX,\n    sparqlTokenMap.AVG,\n    sparqlTokenMap.SAMPLE,\n    sparqlTokenMap.GROUP_CONCAT,\n    sparqlTokenMap.SEPARATOR,\n    sparqlTokenMap.TRUE,\n    sparqlTokenMap.FALSE,\n    sparqlTokenMap.Semicolon,\n    sparqlTokenMap.Comma,\n    sparqlTokenMap.ForwardSlash,\n    sparqlTokenMap.DoubleCaret,\n    sparqlTokenMap.Caret,\n    sparqlTokenMap.LogicalOr,\n    sparqlTokenMap.Pipe,\n    sparqlTokenMap.LogicalAnd,\n    sparqlTokenMap.NotEquals,\n    sparqlTokenMap.Bang,\n    sparqlTokenMap.Equals,\n    sparqlTokenMap.LessThanEquals,\n    sparqlTokenMap.GreaterThanEquals,\n    sparqlTokenMap.LEmbed,\n    sparqlTokenMap.REmbed,\n    sparqlTokenMap.LessThan,\n    sparqlTokenMap.GreaterThan,\n    sparqlTokenMap.IN,\n    sparqlTokenMap.NOT_IN,\n    sparqlTokenMap.A,\n    sparqlTokenMap.UNKNOWN,\n];\nexport var pathsTokens = [\n    sparqlTokenMap.START,\n    sparqlTokenMap.END,\n    sparqlTokenMap.VIA,\n    sparqlTokenMap.CYCLIC,\n    sparqlTokenMap.PATHS_SHORTEST,\n    sparqlTokenMap.PATHS_ALL,\n    sparqlTokenMap.PATHS,\n];\nexport var nonStandardTokens = pathsTokens.concat([sparqlTokenMap.UNNEST]);\nvar indexOfSelect = baseTokens.indexOf(sparqlTokenMap.SELECT);\nexport var stardogSparqlTokens = baseTokens.slice(0, indexOfSelect).concat(nonStandardTokens, baseTokens.slice(indexOfSelect));\nexport var sparqlTokenTypes = baseTokens.concat(nonStandardTokens);\n","export * from './TurtleParser';\n// Convenience imports/exports that aren't core functionality:\n// NOTE: Tokens MUST be imported using CommonJS syntax; see here: https://github.com/SAP/chevrotain/issues/345\nexport var turtleTokens = require('./tokens');\n","/*\nCopyright ©2012–2018 Ruben Verborgh\nWith modifications Copyright ©2018 Stardog Union\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nvar escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\[uU]|\\\\(.)/g;\nvar escapeReplacements = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\"': '\"',\n    n: '\\n',\n    r: '\\r',\n    t: '\\t',\n    f: '\\f',\n    b: '\\b',\n    _: '_',\n    '~': '~',\n    '.': '.',\n    '-': '-',\n    '!': '!',\n    $: '$',\n    '&': '&',\n    '(': '(',\n    ')': ')',\n    '*': '*',\n    '+': '+',\n    ',': ',',\n    ';': ';',\n    '=': '=',\n    '/': '/',\n    '?': '?',\n    '#': '#',\n    '@': '@',\n    '%': '%',\n};\nexport var unescapedStringLiteralQuote = /^\"([^\"\\\\\\r\\n]+)\"/; // non-empty string without escape sequences\nexport var unescapedStringLiteralSingleQuote = /^'([^'\\\\\\r\\n]+)'/;\nexport var stringLiteralQuote = /^\"((?:[^\"\\\\\\r\\n]|\\\\.)*)\"(?=[^\"])/;\nexport var stringLiteralSingleQuote = /^'((?:[^'\\\\\\r\\n]|\\\\.)*)'(?=[^'])/;\nexport var stringLiteralLongQuote = /^\"\"\"([^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*)\"\"\"/;\nexport var stringLiteralLongSingleQuote = /^'''([^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*)'''/;\nexport var illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\nexport var escapedIri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/;\nexport var unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/;\n// Handle special unescaping needs related to the IRIREF rule and others.\nexport var unescape = function (item) {\n    try {\n        return item.replace(escapeSequence, function (_, unicode4, unicode8, escapedChar) {\n            if (unicode4) {\n                return String.fromCharCode(parseInt(unicode4, 16));\n            }\n            else if (unicode8) {\n                var charCode = parseInt(unicode8, 16);\n                if (charCode <= 0xffff) {\n                    return String.fromCharCode(charCode);\n                }\n                return String.fromCharCode(0xd800 + (charCode -= 0x10000) / 0x400, 0xdc00 + (charCode & 0x3ff));\n            }\n            else {\n                var replacement = escapeReplacements[escapedChar];\n                if (!replacement) {\n                    throw new Error();\n                }\n                return replacement;\n            }\n        });\n    }\n    catch (error) {\n        return null;\n    }\n};\n","var sparqlTokenMap = require('../sparql/tokens').sparqlTokenMap;\nimport { createToken } from 'chevrotain';\nimport { regex } from '../helpers/regex';\nimport { EXPONENT, ECHAR, PLX, HEX, PN_CHARS_BASE, PN_CHARS_U, PN_CHARS, PN_PREFIX, PN_LOCAL, PN_LOCAL_ESC, } from '../helpers/matchers';\nimport { unescape, stringLiteralLongSingleQuote, stringLiteralLongQuote, unescapedStringLiteralQuote, stringLiteralQuote, unescapedStringLiteralSingleQuote, stringLiteralSingleQuote, unescapedIri, escapedIri, illegalIriChars, } from '../helpers/unescape';\nvar unicodeRegexp = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nexport var turtleTokenMap = {\n    Comment: createToken({\n        name: 'Comment',\n        pattern: /#[^\\n]*/,\n        group: 'comments',\n    }),\n    LBracket: sparqlTokenMap.LBracket,\n    RBracket: sparqlTokenMap.RBracket,\n    LCurly: sparqlTokenMap.LCurly,\n    RCurly: sparqlTokenMap.RCurly,\n    LParen: sparqlTokenMap.LParen,\n    RParen: sparqlTokenMap.RParen,\n    Period: sparqlTokenMap.Period,\n    WhiteSpace: sparqlTokenMap.WhiteSpace,\n    // 'true' and 'false' are case sensitive in Turtle but not in SPARQL\n    TRUE: createToken({\n        name: 'TRUE',\n        pattern: /true/,\n    }),\n    FALSE: createToken({\n        name: 'FALSE',\n        pattern: /false/,\n    }),\n    DoubleCaret: sparqlTokenMap.DoubleCaret,\n    LEmbed: sparqlTokenMap.LEmbed,\n    REmbed: sparqlTokenMap.REmbed,\n    Comma: sparqlTokenMap.Comma,\n    Semicolon: sparqlTokenMap.Semicolon,\n    A: sparqlTokenMap.A,\n    PREFIX: sparqlTokenMap.PREFIX,\n    BASE: sparqlTokenMap.BASE,\n    PNAME_NS: sparqlTokenMap.PNAME_NS,\n    PNAME_LN: sparqlTokenMap.PNAME_LN,\n    BLANK_NODE_LABEL: sparqlTokenMap.BLANK_NODE_LABEL,\n    TTL_BASE: createToken({ name: 'TTL_BASE', pattern: /@base/ }),\n    TTL_PREFIX: createToken({ name: 'TTL_PREFIX', pattern: /@prefix/ }),\n    LANGTAG: sparqlTokenMap.LANGTAG,\n    INTEGER: createToken({\n        name: 'INTEGER',\n        pattern: regex.and(regex.option(/[+-]/), /\\d+/),\n    }),\n    DECIMAL: createToken({\n        name: 'DECIMAL',\n        pattern: regex.and(regex.option(/[+-]/), /(\\d*\\.\\d+)/),\n    }),\n    DOUBLE: createToken({\n        name: 'DOUBLE',\n        pattern: regex.and(regex.option(/[+-]/), regex.or(regex.and(/\\d+\\.\\d*/, EXPONENT), regex.and(/\\.\\d+/, EXPONENT), regex.and(/\\d+/, EXPONENT))),\n    }),\n    EXPONENT: createToken({ name: 'EXPONENT', pattern: EXPONENT }),\n    ECHAR: createToken({ name: 'ECHAR', pattern: ECHAR }),\n    ANON: sparqlTokenMap.ANON,\n    PLX: createToken({ name: 'PLX', pattern: PLX }),\n    PERCENT: sparqlTokenMap.PERCENT,\n    HEX: createToken({ name: 'HEX', pattern: HEX }),\n    STRING_LITERAL_LONG_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongSingleQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_LONG_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_QUOTE: createToken({\n        name: 'STRING_LITERAL_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    STRING_LITERAL_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralSingleQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralSingleQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    UCHAR: createToken({\n        name: 'UCHAR',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            return unicodeRegexp.exec(text.slice(startOffset));\n        },\n        line_breaks: false,\n    }),\n    IRIREF: createToken({\n        name: 'IRIREF',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedIri.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = escapedIri.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            var value = unescape(match[1]);\n            if (value === null || illegalIriChars.test(value)) {\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    PN_CHARS_BASE: createToken({ name: 'PN_CHARS_BASE', pattern: PN_CHARS_BASE }),\n    PN_CHARS_U: createToken({ name: 'PN_CHARS_U', pattern: PN_CHARS_U }),\n    PN_CHARS: createToken({ name: 'PN_CHARS', pattern: PN_CHARS }),\n    PN_PREFIX: createToken({ name: 'PN_PREFIX', pattern: PN_PREFIX }),\n    PN_LOCAL: createToken({ name: 'PN_LOCAL', pattern: PN_LOCAL }),\n    PN_LOCAL_ESC: createToken({ name: 'PN_LOCAL_ESC', pattern: PN_LOCAL_ESC }),\n    UNKNOWN: sparqlTokenMap.UNKNOWN,\n};\nexport var turtleTokenTypes = [\n    turtleTokenMap.Comment,\n    sparqlTokenMap.ANON,\n    sparqlTokenMap.LBracket,\n    sparqlTokenMap.RBracket,\n    sparqlTokenMap.LCurly,\n    sparqlTokenMap.RCurly,\n    sparqlTokenMap.LParen,\n    sparqlTokenMap.RParen,\n    sparqlTokenMap.WhiteSpace,\n    turtleTokenMap.TRUE,\n    turtleTokenMap.FALSE,\n    sparqlTokenMap.Comma,\n    sparqlTokenMap.Semicolon,\n    sparqlTokenMap.PNAME_NS,\n    sparqlTokenMap.A,\n    sparqlTokenMap.PREFIX,\n    sparqlTokenMap.BASE,\n    sparqlTokenMap.PNAME_LN,\n    sparqlTokenMap.BLANK_NODE_LABEL,\n    turtleTokenMap.TTL_BASE,\n    turtleTokenMap.TTL_PREFIX,\n    sparqlTokenMap.LANGTAG,\n    turtleTokenMap.DOUBLE,\n    turtleTokenMap.DECIMAL,\n    sparqlTokenMap.Period,\n    sparqlTokenMap.DoubleCaret,\n    turtleTokenMap.LEmbed,\n    turtleTokenMap.REmbed,\n    turtleTokenMap.IRIREF,\n    turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE,\n    turtleTokenMap.STRING_LITERAL_LONG_QUOTE,\n    turtleTokenMap.STRING_LITERAL_QUOTE,\n    turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE,\n    turtleTokenMap.INTEGER,\n    turtleTokenMap.EXPONENT,\n    turtleTokenMap.PLX,\n    sparqlTokenMap.PERCENT,\n    turtleTokenMap.HEX,\n    turtleTokenMap.PN_CHARS_BASE,\n    turtleTokenMap.PN_CHARS_U,\n    turtleTokenMap.PN_CHARS,\n    turtleTokenMap.PN_PREFIX,\n    turtleTokenMap.PN_LOCAL,\n    turtleTokenMap.PN_LOCAL_ESC,\n    turtleTokenMap.ECHAR,\n    turtleTokenMap.UCHAR,\n    turtleTokenMap.UNKNOWN,\n];\n"],"sourceRoot":""}