{"version":3,"sources":["webpack://millan.[name]/webpack/universalModuleDefinition","webpack://millan.[name]/webpack/bootstrap","webpack://millan.[name]/./src/sparql/keywords.ts","webpack://millan.[name]/./src/turtle/TurtleParser.ts","webpack://millan.[name]/./src/helpers/regex.ts","webpack://millan.[name]/./src/helpers/matchers.ts","webpack://millan.[name]/./src/sparql/terminals.ts","webpack://millan.[name]/./src/sparql/tokens.ts","webpack://millan.[name]/./src/turtle/index.ts","webpack://millan.[name]/./src/helpers/unescape.ts","webpack://millan.[name]/./src/turtle/tokens.ts"],"names":["root","factory","exports","module","define","amd","self","this","webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","8","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","oldJsonpFunction","slice","__webpack_exports__","keywords","chevrotain__WEBPACK_IMPORTED_MODULE_0__","MAX_LENGTH","pattern","SELECT","CONSTRUCT","DISTINCT","START","END","VIA","PATHS","PATHS_ALL","PATHS_SHORTEST","CYCLIC","AS","WHERE","A","GroupBy","OrderBy","By","BASE","PREFIX","DESCRIBE","ASK","FROM","REDUCED","NAMED","HAVING","ASC","DESC","OFFSET","LIMIT","VALUES","LOAD","SILENT","INTO","CLEAR","DROP","CREATE","ADD","TO","MOVE","COPY","INSERT_DATA","DELETE_DATA","DELETE_WHERE","WITH","DELETE","INSERT","USING","DEFAULT","GRAPH","ALL","OPTIONAL","SERVICE","BIND","UNNEST","UNDEF","MINUS","UNION","FILTER","STR","LANG","LANGMATCHES","DATATYPE","BOUND","IRI","URI","BNODE","RAND","ABS","CEIL","FLOOR","ROUND","CONCAT","STRLEN","UCASE","LCASE","ENCODE_FOR_URI","CONTAINS","STRSTARTS","STRENDS","STRBEFORE","STRAFTER","YEAR","MONTH","DAY","HOURS","MINUTES","SECONDS","TIMEZONE","TZ","NOW","UUID","STRUUID","MD5","SHA1","SHA256","SHA384","SHA512","COALESCE","IF","STRLANG","STRDT","sameTerm","isIRI","isURI","isBlank","isLiteral","isNumeric","REGEX","SUBSTR","REPLACE","EXISTS","NOT_EXISTS","COUNT","SUM","MIN","AVG","SAMPLE","GROUP_CONCAT","SEPARATOR","TRUE","FALSE","IN","NOT_IN","MAX","longer_alt","TurtleParser","extendStatics","__extends","b","setPrototypeOf","__proto__","Array","__","constructor","__assign","assign","arguments","_a","turtleTokenTypes","turtleTokenMap","_super","config","tokens","lexerDefinition","performSelfAnalysis","_this","outputCst","recoveryEnabled","namespacesMap","semanticErrors","resetManagedState","tokenize","document","lexer","parse","input","cst","turtleDoc","errors","RULE","MANY","SUBRULE","statement","OR","ALT","directive","triples","CONSUME","Period","prefixID","base","sparqlPrefix","sparqlBase","TTL_PREFIX","pnameNsToken","PNAME_NS","iriToken","IRIREF","pnameImageWithoutColon","image","iriImage","TTL_BASE","subject","predicateObjectList","blankNodePropertyList","OPTION","SUBRULE1","verb","objectList","Semicolon","iri","BlankNode","collection","predicate","Comma","literal","RDFLiteral","NumericLiteral","BooleanLiteral","LBracket","RBracket","LParen","RParen","INTEGER","DECIMAL","DOUBLE","String","LANGTAG","DoubleCaret","STRING_LITERAL_QUOTE","STRING_LITERAL_SINGLE_QUOTE","STRING_LITERAL_LONG_SINGLE_QUOTE","STRING_LITERAL_LONG_QUOTE","PrefixedName","prefixedNameToken","PNAME_LN","indexOf","message","token","context","ruleStack","getHumanReadableRuleStack","ruleOccurrenceStack","RULE_OCCURRENCE_STACK","resyncedTokens","BLANK_NODE_LABEL","ANON","regex","or","_i","RegExp","map","source","join","and","option","many","CATCH_ALL_AT_LEAST_ONE","PN_CHARS_BASE","EXPONENT","ECHAR","HEX","PN_LOCAL_ESC","PN_CHARS_U","PN_CHARS","PN_PREFIX","PERCENT","PLX","PN_LOCAL","NIL","STRING_LITERAL1","STRING_LITERAL2","STRING_LITERAL_LONG1","STRING_LITERAL_LONG2","INTEGER_POSITIVE","DECIMAL_POSITIVE","DOUBLE_POSITIVE","INTEGER_NEGATIVE","DECIMAL_NEGATIVE","DOUBLE_NEGATIVE","VAR1","VAR2","_regex__WEBPACK_IMPORTED_MODULE_0__","WS","VARNAME","terminals","helpers_matchers__WEBPACK_IMPORTED_MODULE_1__","STRING_LITERAL_LONG1_TOKEN","STRING_LITERAL_LONG2_TOKEN","PNAME_LN_TOKEN","label","sparqlTokenMap","baseTokens","pathsTokens","nonStandardTokens","stardogSparqlTokens","sparqlTokenTypes","_terminals__WEBPACK_IMPORTED_MODULE_1__","_keywords__WEBPACK_IMPORTED_MODULE_2__","Comment","group","LCurly","RCurly","WhiteSpace","SKIPPED","line_breaks","Star","Unknown","QuestionMark","Plus","Minus","Pipe","ForwardSlash","Caret","Bang","LogicalOr","LogicalAnd","Equals","NotEquals","LessThan","GreaterThan","LessThanEquals","GreaterThanEquals","concat","indexOfSelect","turtleTokens","_TurtleParser__WEBPACK_IMPORTED_MODULE_0__","escapeSequence","escapeReplacements","\\","'","\"","f","_","~",".","-","!","$","&","(",")","*","+",",",";","=","/","?","#","@","%","unescapedStringLiteralQuote","unescapedStringLiteralSingleQuote","stringLiteralQuote","stringLiteralSingleQuote","stringLiteralLongQuote","stringLiteralLongSingleQuote","illegalIriChars","escapedIri","unescapedIri","unescape_unescape","item","replace","unicode4","unicode8","escapedChar","fromCharCode","parseInt","charCode","replacement","Error","error","unicodeRegexp","api","matchers","text","startOffset","match","exec","textToMatch","UCHAR","test"],"mappings":"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","file":"millan.turtle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"turtle\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"turtle\"] = factory();\n\telse\n\t\troot[\"millan\"] = root[\"millan\"] || {}, root[\"millan\"][\"turtle\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t8: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([64,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// @ts-ignore: import types for declarations\nimport { createToken } from 'chevrotain';\nvar MAX_LENGTH = createToken({\n    name: 'MAX_LENGTH',\n    pattern: /MAX LENGTH/i,\n});\nexport var keywords = {\n    SELECT: createToken({\n        name: 'SELECT',\n        pattern: /SELECT/i,\n    }),\n    CONSTRUCT: createToken({\n        name: 'CONSTRUCT',\n        pattern: /CONSTRUCT/i,\n    }),\n    DISTINCT: createToken({\n        name: 'DISTINCT',\n        pattern: /DISTINCT/i,\n    }),\n    START: createToken({\n        name: 'START',\n        pattern: /START/i,\n    }),\n    END: createToken({\n        name: 'END',\n        pattern: /END/i,\n    }),\n    VIA: createToken({\n        name: 'VIA',\n        pattern: /VIA/i,\n    }),\n    PATHS: createToken({\n        name: 'PATHS',\n        pattern: /PATHS/i,\n    }),\n    PATHS_ALL: createToken({\n        name: 'PATHS_ALL',\n        pattern: /PATHS ALL/i,\n    }),\n    PATHS_SHORTEST: createToken({\n        name: 'PATHS_SHORTEST',\n        pattern: /PATHS SHORTEST/i,\n    }),\n    CYCLIC: createToken({\n        name: 'CYCLIC',\n        pattern: /CYCLIC/i,\n    }),\n    AS: createToken({\n        name: 'AS',\n        pattern: /AS/i,\n    }),\n    WHERE: createToken({\n        name: 'WHERE',\n        pattern: /WHERE/i,\n    }),\n    A: createToken({\n        name: 'A',\n        pattern: /a/i,\n    }),\n    GroupBy: createToken({\n        name: 'GroupBy',\n        pattern: /group by/i,\n    }),\n    OrderBy: createToken({\n        name: 'OrderBy',\n        pattern: /order by/i,\n    }),\n    By: createToken({\n        name: 'By',\n        pattern: /By/i,\n    }),\n    BASE: createToken({\n        name: 'BASE',\n        pattern: /BASE/i,\n    }),\n    PREFIX: createToken({\n        name: 'PREFIX',\n        pattern: /PREFIX/i,\n    }),\n    DESCRIBE: createToken({\n        name: 'DESCRIBE',\n        pattern: /DESCRIBE/i,\n    }),\n    ASK: createToken({\n        name: 'ASK',\n        pattern: /ASK/i,\n    }),\n    FROM: createToken({\n        name: 'FROM',\n        pattern: /FROM/i,\n    }),\n    REDUCED: createToken({\n        name: 'REDUCED',\n        pattern: /REDUCED/i,\n    }),\n    NAMED: createToken({\n        name: 'NAMED',\n        pattern: /NAMED/i,\n    }),\n    HAVING: createToken({\n        name: 'HAVING',\n        pattern: /HAVING/i,\n    }),\n    ASC: createToken({\n        name: 'ASC',\n        pattern: /ASC/i,\n    }),\n    DESC: createToken({\n        name: 'DESC',\n        pattern: /DESC/i,\n    }),\n    OFFSET: createToken({\n        name: 'OFFSET',\n        pattern: /OFFSET/i,\n    }),\n    LIMIT: createToken({\n        name: 'LIMIT',\n        pattern: /LIMIT/i,\n    }),\n    VALUES: createToken({\n        name: 'VALUES',\n        pattern: /VALUES/i,\n    }),\n    LOAD: createToken({\n        name: 'LOAD',\n        pattern: /LOAD/i,\n    }),\n    SILENT: createToken({\n        name: 'SILENT',\n        pattern: /SILENT/i,\n    }),\n    INTO: createToken({\n        name: 'INTO',\n        pattern: /INTO/i,\n    }),\n    CLEAR: createToken({\n        name: 'CLEAR',\n        pattern: /CLEAR/i,\n    }),\n    DROP: createToken({\n        name: 'DROP',\n        pattern: /DROP/i,\n    }),\n    CREATE: createToken({\n        name: 'CREATE',\n        pattern: /CREATE/i,\n    }),\n    ADD: createToken({\n        name: 'ADD',\n        pattern: /ADD/i,\n    }),\n    TO: createToken({\n        name: 'TO',\n        pattern: /TO/i,\n    }),\n    MOVE: createToken({\n        name: 'MOVE',\n        pattern: /MOVE/i,\n    }),\n    COPY: createToken({\n        name: 'COPY',\n        pattern: /COPY/i,\n    }),\n    INSERT_DATA: createToken({\n        name: 'INSERT_DATA',\n        pattern: /Insert +Data/i,\n    }),\n    DELETE_DATA: createToken({\n        name: 'DELETE_DATA',\n        pattern: /Delete +Data/i,\n    }),\n    DELETE_WHERE: createToken({\n        name: 'DELETE_WHERE',\n        pattern: /Delete +Where/i,\n    }),\n    WITH: createToken({\n        name: 'WITH',\n        pattern: /WITH/i,\n    }),\n    DELETE: createToken({\n        name: 'DELETE',\n        pattern: /DELETE/i,\n    }),\n    INSERT: createToken({\n        name: 'INSERT',\n        pattern: /INSERT/i,\n    }),\n    USING: createToken({\n        name: 'USING',\n        pattern: /USING/i,\n    }),\n    DEFAULT: createToken({\n        name: 'DEFAULT',\n        pattern: /DEFAULT/i,\n    }),\n    GRAPH: createToken({\n        name: 'GRAPH',\n        pattern: /GRAPH/i,\n    }),\n    ALL: createToken({\n        name: 'ALL',\n        pattern: /ALL/i,\n    }),\n    OPTIONAL: createToken({\n        name: 'OPTIONAL',\n        pattern: /OPTIONAL/i,\n    }),\n    SERVICE: createToken({\n        name: 'SERVICE',\n        pattern: /SERVICE/i,\n    }),\n    BIND: createToken({\n        name: 'BIND',\n        pattern: /BIND/i,\n    }),\n    UNNEST: createToken({\n        name: 'UNNEST',\n        pattern: /UNNEST/i,\n    }),\n    UNDEF: createToken({\n        name: 'UNDEF',\n        pattern: /UNDEF/i,\n    }),\n    MINUS: createToken({\n        name: 'MINUS',\n        pattern: /MINUS/i,\n    }),\n    UNION: createToken({\n        name: 'UNION',\n        pattern: /UNION/i,\n    }),\n    FILTER: createToken({\n        name: 'FILTER',\n        pattern: /FILTER/i,\n    }),\n    STR: createToken({\n        name: 'STR',\n        pattern: /STR/i,\n    }),\n    LANG: createToken({\n        name: 'LANG',\n        pattern: /LANG/i,\n    }),\n    LANGMATCHES: createToken({\n        name: 'LANGMATCHES',\n        pattern: /LANGMATCHES/i,\n    }),\n    DATATYPE: createToken({\n        name: 'DATATYPE',\n        pattern: /DATATYPE/i,\n    }),\n    BOUND: createToken({\n        name: 'BOUND',\n        pattern: /BOUND/i,\n    }),\n    IRI: createToken({\n        name: 'IRI',\n        pattern: /IRI/i,\n    }),\n    URI: createToken({\n        name: 'URI',\n        pattern: /URI/i,\n    }),\n    BNODE: createToken({\n        name: 'BNODE',\n        pattern: /BNODE/i,\n    }),\n    RAND: createToken({\n        name: 'RAND',\n        pattern: /RAND/i,\n    }),\n    ABS: createToken({\n        name: 'ABS',\n        pattern: /ABS/i,\n    }),\n    CEIL: createToken({\n        name: 'CEIL',\n        pattern: /CEIL/i,\n    }),\n    FLOOR: createToken({\n        name: 'FLOOR',\n        pattern: /FLOOR/i,\n    }),\n    ROUND: createToken({\n        name: 'ROUND',\n        pattern: /ROUND/i,\n    }),\n    CONCAT: createToken({\n        name: 'CONCAT',\n        pattern: /CONCAT/i,\n    }),\n    STRLEN: createToken({\n        name: 'STRLEN',\n        pattern: /STRLEN/i,\n    }),\n    UCASE: createToken({\n        name: 'UCASE',\n        pattern: /UCASE/i,\n    }),\n    LCASE: createToken({\n        name: 'LCASE',\n        pattern: /LCASE/i,\n    }),\n    ENCODE_FOR_URI: createToken({\n        name: 'ENCODE_FOR_URI',\n        pattern: /ENCODE_FOR_URI/i,\n    }),\n    CONTAINS: createToken({\n        name: 'CONTAINS',\n        pattern: /CONTAINS/i,\n    }),\n    STRSTARTS: createToken({\n        name: 'STRSTARTS',\n        pattern: /STRSTARTS/i,\n    }),\n    STRENDS: createToken({\n        name: 'STRENDS',\n        pattern: /STRENDS/i,\n    }),\n    STRBEFORE: createToken({\n        name: 'STRBEFORE',\n        pattern: /STRBEFORE/i,\n    }),\n    STRAFTER: createToken({\n        name: 'STRAFTER',\n        pattern: /STRAFTER/i,\n    }),\n    YEAR: createToken({\n        name: 'YEAR',\n        pattern: /YEAR/i,\n    }),\n    MONTH: createToken({\n        name: 'MONTH',\n        pattern: /MONTH/i,\n    }),\n    DAY: createToken({\n        name: 'DAY',\n        pattern: /DAY/i,\n    }),\n    HOURS: createToken({\n        name: 'HOURS',\n        pattern: /HOURS/i,\n    }),\n    MINUTES: createToken({\n        name: 'MINUTES',\n        pattern: /MINUTES/i,\n    }),\n    SECONDS: createToken({\n        name: 'SECONDS',\n        pattern: /SECONDS/i,\n    }),\n    TIMEZONE: createToken({\n        name: 'TIMEZONE',\n        pattern: /TIMEZONE/i,\n    }),\n    TZ: createToken({\n        name: 'TZ',\n        pattern: /TZ/i,\n    }),\n    NOW: createToken({\n        name: 'NOW',\n        pattern: /NOW/i,\n    }),\n    UUID: createToken({\n        name: 'UUID',\n        pattern: /UUID/i,\n    }),\n    STRUUID: createToken({\n        name: 'STRUUID',\n        pattern: /STRUUID/i,\n    }),\n    MD5: createToken({\n        name: 'MD5',\n        pattern: /MD5/i,\n    }),\n    SHA1: createToken({\n        name: 'SHA1',\n        pattern: /SHA1/i,\n    }),\n    SHA256: createToken({\n        name: 'SHA256',\n        pattern: /SHA256/i,\n    }),\n    SHA384: createToken({\n        name: 'SHA384',\n        pattern: /SHA384/i,\n    }),\n    SHA512: createToken({\n        name: 'SHA512',\n        pattern: /SHA512/i,\n    }),\n    COALESCE: createToken({\n        name: 'COALESCE',\n        pattern: /COALESCE/i,\n    }),\n    IF: createToken({\n        name: 'IF',\n        pattern: /IF/i,\n    }),\n    STRLANG: createToken({\n        name: 'STRLANG',\n        pattern: /STRLANG/i,\n    }),\n    STRDT: createToken({\n        name: 'STRDT',\n        pattern: /STRDT/i,\n    }),\n    sameTerm: createToken({\n        name: 'sameTerm',\n        pattern: /sameTerm/i,\n    }),\n    isIRI: createToken({\n        name: 'isIRI',\n        pattern: /isIRI/i,\n    }),\n    isURI: createToken({\n        name: 'isURI',\n        pattern: /isURI/i,\n    }),\n    isBlank: createToken({\n        name: 'isBlank',\n        pattern: /isBlank/i,\n    }),\n    isLiteral: createToken({\n        name: 'isLiteral',\n        pattern: /isLiteral/i,\n    }),\n    isNumeric: createToken({\n        name: 'isNumeric',\n        pattern: /isNumeric/i,\n    }),\n    REGEX: createToken({\n        name: 'REGEX',\n        pattern: /REGEX/i,\n    }),\n    SUBSTR: createToken({\n        name: 'SUBSTR',\n        pattern: /SUBSTR/i,\n    }),\n    REPLACE: createToken({\n        name: 'REPLACE',\n        pattern: /REPLACE/i,\n    }),\n    EXISTS: createToken({\n        name: 'EXISTS',\n        pattern: /EXISTS/i,\n    }),\n    NOT_EXISTS: createToken({\n        name: 'NOT_EXISTS',\n        pattern: /NOT EXISTS/i,\n    }),\n    COUNT: createToken({\n        name: 'COUNT',\n        pattern: /COUNT/i,\n    }),\n    SUM: createToken({\n        name: 'SUM',\n        pattern: /SUM/i,\n    }),\n    MIN: createToken({\n        name: 'MIN',\n        pattern: /MIN/i,\n    }),\n    AVG: createToken({\n        name: 'AVG',\n        pattern: /AVG/i,\n    }),\n    SAMPLE: createToken({\n        name: 'SAMPLE',\n        pattern: /SAMPLE/i,\n    }),\n    GROUP_CONCAT: createToken({\n        name: 'GROUP_CONCAT',\n        pattern: /GROUP_CONCAT/i,\n    }),\n    SEPARATOR: createToken({\n        name: 'SEPARATOR',\n        pattern: /SEPARATOR/i,\n    }),\n    TRUE: createToken({\n        name: 'TRUE',\n        pattern: /TRUE/i,\n    }),\n    FALSE: createToken({\n        name: 'FALSE',\n        pattern: /FALSE/i,\n    }),\n    IN: createToken({\n        name: 'IN',\n        pattern: /IN/i,\n    }),\n    NOT_IN: createToken({\n        name: 'NOT_IN',\n        pattern: /NOT IN/i,\n    }),\n    MAX_LENGTH: MAX_LENGTH,\n    MAX: createToken({\n        name: 'MAX',\n        pattern: /MAX/i,\n        longer_alt: MAX_LENGTH,\n    }),\n};\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a = require('./tokens'), turtleTokenTypes = _a.turtleTokenTypes, turtleTokenMap = _a.turtleTokenMap;\nimport { Parser, Lexer, } from 'chevrotain';\nvar TurtleParser = /** @class */ (function (_super) {\n    __extends(TurtleParser, _super);\n    function TurtleParser(config, tokens, lexerDefinition, performSelfAnalysis) {\n        if (tokens === void 0) { tokens = turtleTokenTypes; }\n        if (lexerDefinition === void 0) { lexerDefinition = tokens; }\n        if (performSelfAnalysis === void 0) { performSelfAnalysis = true; }\n        var _this = _super.call(this, tokens, __assign({ outputCst: true, recoveryEnabled: true }, config)) || this;\n        // Parsing Turtle requires that the parser keep a map of namespaces in state.\n        // Empty prefixes, for example, are allowed only if the empty prefix has been\n        // added to the namespaces map (for now, that's all this tracks). (TODO: We\n        // might want to use a visitor for this, but I'm doing it quick-and-dirty for\n        // now.)\n        // See here: https://www.w3.org/TR/turtle/#handle-PNAME_LN\n        _this.namespacesMap = {};\n        _this.semanticErrors = [];\n        // Clears the state that we have to manage on our own for each parse (see\n        // above for details).\n        _this.resetManagedState = function () {\n            _this.namespacesMap = {};\n            _this.semanticErrors = [];\n        };\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        _this.parse = function (document) {\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = _this.turtleDoc();\n            // Next two items are copied so that they can be returned/held after parse\n            // state is cleared.\n            var errors = _this.errors.slice();\n            var semanticErrors = _this.semanticErrors.slice();\n            _this.resetManagedState();\n            return {\n                errors: errors,\n                semanticErrors: semanticErrors,\n                cst: cst,\n            };\n        };\n        _this.turtleDoc = _this.RULE('turtleDoc', function () {\n            _this.MANY(function () { return _this.SUBRULE(_this.statement); });\n        });\n        _this.statement = _this.RULE('statement', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.directive); } },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.triples);\n                        _this.CONSUME(turtleTokenMap.Period);\n                    },\n                },\n            ]);\n        });\n        _this.directive = _this.RULE('directive', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.prefixID); } },\n                { ALT: function () { return _this.SUBRULE(_this.base); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlPrefix); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlBase); } },\n            ]);\n        });\n        _this.prefixID = _this.RULE('prefixID', function () {\n            _this.CONSUME(turtleTokenMap.TTL_PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.base = _this.RULE('base', function () {\n            _this.CONSUME(turtleTokenMap.TTL_BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.sparqlBase = _this.RULE('sparqlBase', function () {\n            _this.CONSUME(turtleTokenMap.BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n        });\n        _this.sparqlPrefix = _this.RULE('sparqlPrefix', function () {\n            _this.CONSUME(turtleTokenMap.PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n        });\n        _this.triples = _this.RULE('triples', function () {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.subject);\n                        _this.SUBRULE(_this.predicateObjectList);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.blankNodePropertyList);\n                        _this.OPTION(function () { return _this.SUBRULE1(_this.predicateObjectList); });\n                    },\n                },\n            ]);\n        });\n        _this.predicateObjectList = _this.RULE('predicateObjectList', function () {\n            _this.SUBRULE(_this.verb);\n            _this.SUBRULE(_this.objectList);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.SUBRULE1(_this.verb);\n                    _this.SUBRULE1(_this.objectList);\n                });\n            });\n        });\n        _this.subject = _this.RULE('subject', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n            ]);\n        });\n        _this.predicate = _this.RULE('predicate', function () {\n            _this.SUBRULE(_this.iri);\n        });\n        _this.objectList = _this.RULE('objectList', function () {\n            _this.SUBRULE(_this.object);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Comma);\n                _this.SUBRULE1(_this.object);\n            });\n        });\n        _this.verb = _this.RULE('verb', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.predicate); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.A); } },\n            ]);\n        });\n        _this.literal = _this.RULE('literal', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n            ]);\n        });\n        _this.blankNodePropertyList = _this.RULE('blankNodePropertyList', function () {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.SUBRULE(_this.predicateObjectList);\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.object = _this.RULE('object', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n                { ALT: function () { return _this.SUBRULE(_this.blankNodePropertyList); } },\n                { ALT: function () { return _this.SUBRULE(_this.literal); } },\n            ]);\n        });\n        _this.collection = _this.RULE('collection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () { return _this.SUBRULE(_this.object); });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.NumericLiteral = _this.RULE('NumericLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.INTEGER); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DECIMAL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DOUBLE); } },\n            ]);\n        });\n        _this.RDFLiteral = _this.RULE('RDFLiteral', function () {\n            _this.SUBRULE(_this.String);\n            _this.OPTION(function () {\n                _this.OR([\n                    { ALT: function () { return _this.CONSUME(turtleTokenMap.LANGTAG); } },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(turtleTokenMap.DoubleCaret);\n                            _this.SUBRULE(_this.iri);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.BooleanLiteral = _this.RULE('BooleanLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.TRUE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.FALSE); } },\n            ]);\n        });\n        _this.String = _this.RULE('String', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_QUOTE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE); } },\n                {\n                    ALT: function () {\n                        return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE);\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_QUOTE); } },\n            ]);\n        });\n        _this.iri = _this.RULE('iri', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.IRIREF); } },\n                { ALT: function () { return _this.SUBRULE(_this.PrefixedName); } },\n            ]);\n        });\n        _this.PrefixedName = _this.RULE('PrefixedName', function () {\n            var prefixedNameToken = _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_LN); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_NS); } },\n            ]);\n            var pnameNsImage = prefixedNameToken.image.slice(0, prefixedNameToken.image.indexOf(':'));\n            if (!(pnameNsImage in _this.namespacesMap)) {\n                _this.semanticErrors.push({\n                    name: 'NoNamespacePrefixError',\n                    message: 'A prefix was used for which there was no namespace defined.',\n                    token: prefixedNameToken,\n                    context: {\n                        ruleStack: _this.getHumanReadableRuleStack(),\n                        ruleOccurrenceStack: _this.RULE_OCCURRENCE_STACK.slice(),\n                    },\n                    resyncedTokens: [],\n                });\n            }\n        });\n        _this.BlankNode = _this.RULE('BlankNode', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.BLANK_NODE_LABEL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.ANON); } },\n            ]);\n        });\n        _this.lexer = new Lexer(lexerDefinition);\n        if (performSelfAnalysis) {\n            Parser.performSelfAnalysis(_this);\n        }\n        return _this;\n    }\n    return TurtleParser;\n}(Parser));\nexport { TurtleParser };\n","export var regex = {\n    or: function () {\n        var r = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            r[_i] = arguments[_i];\n        }\n        return new RegExp(r.map(function (_a) {\n            var source = _a.source;\n            return \"(\" + source + \")\";\n        }).join('|'));\n    },\n    and: function () {\n        var r = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            r[_i] = arguments[_i];\n        }\n        return new RegExp(r.map(function (_a) {\n            var source = _a.source;\n            return \"(\" + source + \")\";\n        }).join(''));\n    },\n    option: function (r) {\n        return new RegExp(\"(\" + r.source + \")?\");\n    },\n    many: function (r) {\n        return new RegExp(\"(\" + r.source + \")*\");\n    },\n};\n","import { regex } from './regex';\nexport var CATCH_ALL = /[\\s\\S]*/; // equivalent to /.*/s, which isn't a JS standard yet\nexport var CATCH_ALL_AT_LEAST_ONE = /[\\s\\S]+/; // equivalent to /.+/s, which isn't a JS standard yet\nexport var IRIREF = /<[^<>\\\\{}|\\^`\\u0000-\\u0020]*>/;\nexport var PN_CHARS_BASE = /[A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nexport var LANGTAG = /@[a-zA-Z]+(-[a-zA-Z0-9]+)*/;\nexport var INTEGER = /\\d+/;\nexport var DECIMAL = /(\\d*\\.\\d+)|(\\d+\\.\\d*)/;\nexport var EXPONENT = /[eE][+-]?\\d+/;\nexport var ECHAR = /\\\\[tbnrf\"'\\\\]/;\nexport var WS = /[\\u0020\\u0009\\u000d\\u000a]/;\nexport var HEX = /[0-9A-Fa-f]/;\nexport var PN_LOCAL_ESC = /\\\\[_~.\\-!\\$&'()*+,=\\/?#@%;]/;\nexport var PN_CHARS_U = regex.or(PN_CHARS_BASE, /_/);\nexport var PN_CHARS = regex.or(PN_CHARS_U, /-/, /\\d/, /\\u00b7/, /[\\u0300-\\u036f]/, /[\\u203f-\\u2040]/);\nexport var PN_PREFIX = regex.and(PN_CHARS_BASE, regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./)), PN_CHARS)));\nexport var PERCENT = regex.and(/%/, HEX, HEX);\nexport var PLX = regex.or(PERCENT, PN_LOCAL_ESC);\nexport var PN_LOCAL = regex.and(regex.or(PN_CHARS_U, /:/, /\\d/, PLX), regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./, /:/, PLX)), regex.or(PN_CHARS, /:/, PLX))));\nexport var VARNAME = regex.and(regex.or(PN_CHARS_U, /\\d/), regex.many(regex.or(PN_CHARS_U, /\\d/, /\\u00b7/, /[\\u0300-\\u036f]/, /[\\u203f-\\u2040]/)));\nexport var ANON = regex.and(/\\[/, regex.many(WS), /\\]/);\nexport var NIL = regex.and(/\\(/, regex.many(WS), /\\)/);\nexport var STRING_LITERAL1 = regex.and(/'/, regex.many(regex.or(/[^\\u0027\\u005C\\u000A\\u000D]/, ECHAR)), /'/);\nexport var STRING_LITERAL2 = regex.and(/\"/, regex.many(regex.or(/[^\\u0022\\u005C\\u000A\\u000D]/, ECHAR)), /\"/);\nexport var STRING_LITERAL_LONG1 = regex.and(/'''/, regex.many(regex.and(regex.option(regex.or(/'/, /''/)), regex.or(/[^'\\\\]/, ECHAR))), /'''/);\nexport var STRING_LITERAL_LONG2 = regex.and(/\"\"\"/, regex.many(regex.and(regex.option(regex.or(/\"/, /\"\"/)), regex.or(/[^\"\\\\]/, ECHAR))), /\"\"\"/);\nexport var DOUBLE = regex.or(regex.and(/\\d+\\.\\d*/, EXPONENT), regex.and(/\\.\\d+/, EXPONENT), regex.and(/\\d+/, EXPONENT));\nexport var INTEGER_POSITIVE = regex.and(/\\+/, INTEGER);\nexport var DECIMAL_POSITIVE = regex.and(/\\+/, DECIMAL);\nexport var DOUBLE_POSITIVE = regex.and(/\\+/, DOUBLE);\nexport var INTEGER_NEGATIVE = regex.and(/-/, INTEGER);\nexport var DECIMAL_NEGATIVE = regex.and(/-/, DECIMAL);\nexport var DOUBLE_NEGATIVE = regex.and(/-/, DOUBLE);\nexport var VAR1 = regex.and(/\\?/, VARNAME);\nexport var VAR2 = regex.and(/\\$/, VARNAME);\nexport var BLANK_NODE_LABEL = regex.and(/_:/, regex.or(PN_CHARS_U, /\\d/), regex.option(regex.and(regex.many(regex.or(PN_CHARS, /\\./)), PN_CHARS)));\nexport var PNAME_NS = regex.and(regex.option(PN_PREFIX), /:/);\nexport var PNAME_LN = regex.and(PNAME_NS, PN_LOCAL);\n","// @ts-ignore: import types for declarations\nimport { createToken } from 'chevrotain';\nimport { STRING_LITERAL_LONG1, STRING_LITERAL_LONG2, PNAME_LN, IRIREF, LANGTAG, INTEGER, DECIMAL, DOUBLE, INTEGER_POSITIVE, DECIMAL_POSITIVE, DOUBLE_POSITIVE, INTEGER_NEGATIVE, DECIMAL_NEGATIVE, DOUBLE_NEGATIVE, STRING_LITERAL1, STRING_LITERAL2, NIL, ANON, PNAME_NS, BLANK_NODE_LABEL, VAR1, VAR2, PERCENT, } from 'helpers/matchers';\nvar STRING_LITERAL_LONG1_TOKEN = createToken({\n    name: 'STRING_LITERAL_LONG1',\n    pattern: STRING_LITERAL_LONG1,\n});\nvar STRING_LITERAL_LONG2_TOKEN = createToken({\n    name: 'STRING_LITERAL_LONG2',\n    pattern: STRING_LITERAL_LONG2,\n});\nvar PNAME_LN_TOKEN = createToken({\n    name: 'PNAME_LN',\n    pattern: PNAME_LN,\n});\nexport var terminals = {\n    IRIREF: createToken({\n        name: 'IRIREF',\n        pattern: IRIREF,\n        label: '<http://example.com>',\n    }),\n    LANGTAG: createToken({\n        name: 'LANGTAG',\n        pattern: LANGTAG,\n    }),\n    INTEGER: createToken({\n        name: 'INTEGER',\n        pattern: INTEGER,\n    }),\n    DECIMAL: createToken({\n        name: 'DECIMAL',\n        pattern: DECIMAL,\n    }),\n    DOUBLE: createToken({\n        name: 'DOUBLE',\n        pattern: DOUBLE,\n    }),\n    INTEGER_POSITIVE: createToken({\n        name: 'INTEGER_POSITIVE',\n        pattern: INTEGER_POSITIVE,\n    }),\n    DECIMAL_POSITIVE: createToken({\n        name: 'DECIMAL_POSITIVE',\n        pattern: DECIMAL_POSITIVE,\n    }),\n    DOUBLE_POSITIVE: createToken({\n        name: 'DOUBLE_POSITIVE',\n        pattern: DOUBLE_POSITIVE,\n    }),\n    INTEGER_NEGATIVE: createToken({\n        name: 'INTEGER_NEGATIVE',\n        pattern: INTEGER_NEGATIVE,\n    }),\n    DECIMAL_NEGATIVE: createToken({\n        name: 'DECIMAL_NEGATIVE',\n        pattern: DECIMAL_NEGATIVE,\n    }),\n    DOUBLE_NEGATIVE: createToken({\n        name: 'DOUBLE_NEGATIVE',\n        pattern: DOUBLE_NEGATIVE,\n    }),\n    STRING_LITERAL_LONG1: STRING_LITERAL_LONG1_TOKEN,\n    STRING_LITERAL_LONG2: STRING_LITERAL_LONG2_TOKEN,\n    STRING_LITERAL1: createToken({\n        name: 'STRING_LITERAL1',\n        pattern: STRING_LITERAL1,\n        longer_alt: STRING_LITERAL_LONG1_TOKEN,\n    }),\n    STRING_LITERAL2: createToken({\n        name: 'STRING_LITERAL2',\n        pattern: STRING_LITERAL2,\n        longer_alt: STRING_LITERAL_LONG2_TOKEN,\n    }),\n    NIL: createToken({\n        name: 'NIL',\n        pattern: NIL,\n        label: '()',\n    }),\n    ANON: createToken({\n        name: 'ANON',\n        pattern: ANON,\n        label: '[]',\n    }),\n    PNAME_LN: PNAME_LN_TOKEN,\n    PNAME_NS: createToken({\n        name: 'PNAME_NS',\n        pattern: PNAME_NS,\n        longer_alt: PNAME_LN_TOKEN,\n    }),\n    BLANK_NODE_LABEL: createToken({\n        name: 'BLANK_NODE_LABEL',\n        pattern: BLANK_NODE_LABEL,\n    }),\n    VAR1: createToken({\n        name: 'VAR1',\n        pattern: VAR1,\n        label: '?foo',\n    }),\n    VAR2: createToken({\n        name: 'VAR2',\n        pattern: VAR2,\n        label: '?bar',\n    }),\n    PERCENT: createToken({\n        name: 'PERCENT',\n        pattern: PERCENT,\n    }),\n};\n","// @ts-ignore: import types for declarations\nimport { createToken, Lexer } from 'chevrotain';\nimport { terminals } from './terminals';\nimport { keywords } from './keywords';\nexport var sparqlTokenMap = {\n    IRIREF: terminals.IRIREF,\n    LANGTAG: terminals.LANGTAG,\n    INTEGER: terminals.INTEGER,\n    DECIMAL: terminals.DECIMAL,\n    DOUBLE: terminals.DOUBLE,\n    INTEGER_POSITIVE: terminals.INTEGER_POSITIVE,\n    DECIMAL_POSITIVE: terminals.DECIMAL_POSITIVE,\n    DOUBLE_POSITIVE: terminals.DOUBLE_POSITIVE,\n    INTEGER_NEGATIVE: terminals.INTEGER_NEGATIVE,\n    DECIMAL_NEGATIVE: terminals.DECIMAL_NEGATIVE,\n    DOUBLE_NEGATIVE: terminals.DOUBLE_NEGATIVE,\n    STRING_LITERAL1: terminals.STRING_LITERAL1,\n    STRING_LITERAL2: terminals.STRING_LITERAL2,\n    STRING_LITERAL_LONG1: terminals.STRING_LITERAL_LONG1,\n    STRING_LITERAL_LONG2: terminals.STRING_LITERAL_LONG2,\n    NIL: terminals.NIL,\n    ANON: terminals.ANON,\n    PNAME_NS: terminals.PNAME_NS,\n    PNAME_LN: terminals.PNAME_LN,\n    BLANK_NODE_LABEL: terminals.BLANK_NODE_LABEL,\n    VAR1: terminals.VAR1,\n    VAR2: terminals.VAR2,\n    PERCENT: terminals.PERCENT,\n    Comment: createToken({\n        name: 'Comment',\n        pattern: /#[^\\n]*/,\n        group: 'comments',\n    }),\n    LCurly: createToken({ name: 'LCurly', pattern: '{' }),\n    RCurly: createToken({ name: 'RCurly', pattern: '}' }),\n    LParen: createToken({ name: 'LParen', pattern: '(' }),\n    RParen: createToken({ name: 'RParen', pattern: ')' }),\n    WhiteSpace: createToken({\n        name: 'WhiteSpace',\n        pattern: /\\s+/,\n        group: Lexer.SKIPPED,\n        line_breaks: true,\n    }),\n    Star: createToken({\n        name: 'Star',\n        pattern: '*',\n    }),\n    Unknown: createToken({\n        name: 'Unknown',\n        pattern: /\\w+/,\n    }),\n    Period: createToken({\n        name: 'Period',\n        pattern: '.',\n    }),\n    QuestionMark: createToken({\n        name: 'QuestionMark',\n        pattern: '?',\n    }),\n    Plus: createToken({\n        name: 'Plus',\n        pattern: '+',\n    }),\n    Minus: createToken({\n        name: 'Minus',\n        pattern: '-',\n    }),\n    LBracket: createToken({\n        name: 'LBracket',\n        pattern: '[',\n    }),\n    RBracket: createToken({\n        name: 'RBracket',\n        pattern: ']',\n    }),\n    Semicolon: createToken({\n        name: 'Semicolon',\n        pattern: ';',\n    }),\n    Comma: createToken({\n        name: 'Comma',\n        pattern: ',',\n    }),\n    Pipe: createToken({\n        name: 'Pipe',\n        pattern: '|',\n    }),\n    ForwardSlash: createToken({\n        name: 'ForwardSlash',\n        pattern: '/',\n    }),\n    Caret: createToken({\n        name: 'Caret',\n        pattern: '^',\n    }),\n    DoubleCaret: createToken({\n        name: 'DoubleCaret',\n        pattern: '^^',\n    }),\n    Bang: createToken({\n        name: 'Bang',\n        pattern: '!',\n    }),\n    LogicalOr: createToken({\n        name: 'LogicalOr',\n        pattern: '||',\n    }),\n    LogicalAnd: createToken({\n        name: 'LogicalAnd',\n        pattern: '&&',\n    }),\n    Equals: createToken({\n        name: 'Equals',\n        pattern: '=',\n    }),\n    NotEquals: createToken({\n        name: 'NotEquals',\n        pattern: '!=',\n    }),\n    LessThan: createToken({\n        name: 'LessThan',\n        pattern: '<',\n    }),\n    GreaterThan: createToken({\n        name: 'GreaterThan',\n        pattern: '>',\n    }),\n    LessThanEquals: createToken({\n        name: 'LessThanEquals',\n        pattern: '<=',\n    }),\n    GreaterThanEquals: createToken({\n        name: 'GreaterThanEquals',\n        pattern: '>=',\n    }),\n    SELECT: keywords.SELECT,\n    CONSTRUCT: keywords.CONSTRUCT,\n    DISTINCT: keywords.DISTINCT,\n    START: keywords.START,\n    END: keywords.END,\n    VIA: keywords.VIA,\n    CYCLIC: keywords.CYCLIC,\n    PATHS_SHORTEST: keywords.PATHS_SHORTEST,\n    PATHS_ALL: keywords.PATHS_ALL,\n    PATHS: keywords.PATHS,\n    AS: keywords.AS,\n    WHERE: keywords.WHERE,\n    A: keywords.A,\n    GroupBy: keywords.GroupBy,\n    OrderBy: keywords.OrderBy,\n    By: keywords.By,\n    BASE: keywords.BASE,\n    PREFIX: keywords.PREFIX,\n    DESCRIBE: keywords.DESCRIBE,\n    ASK: keywords.ASK,\n    FROM: keywords.FROM,\n    REDUCED: keywords.REDUCED,\n    NAMED: keywords.NAMED,\n    HAVING: keywords.HAVING,\n    ASC: keywords.ASC,\n    DESC: keywords.DESC,\n    OFFSET: keywords.OFFSET,\n    LIMIT: keywords.LIMIT,\n    VALUES: keywords.VALUES,\n    LOAD: keywords.LOAD,\n    SILENT: keywords.SILENT,\n    INTO: keywords.INTO,\n    CLEAR: keywords.CLEAR,\n    DROP: keywords.DROP,\n    CREATE: keywords.CREATE,\n    ADD: keywords.ADD,\n    TO: keywords.TO,\n    MOVE: keywords.MOVE,\n    COPY: keywords.COPY,\n    INSERT_DATA: keywords.INSERT_DATA,\n    DELETE_DATA: keywords.DELETE_DATA,\n    DELETE_WHERE: keywords.DELETE_WHERE,\n    WITH: keywords.WITH,\n    DELETE: keywords.DELETE,\n    INSERT: keywords.INSERT,\n    USING: keywords.USING,\n    DEFAULT: keywords.DEFAULT,\n    GRAPH: keywords.GRAPH,\n    ALL: keywords.ALL,\n    OPTIONAL: keywords.OPTIONAL,\n    SERVICE: keywords.SERVICE,\n    BIND: keywords.BIND,\n    UNNEST: keywords.UNNEST,\n    UNDEF: keywords.UNDEF,\n    MINUS: keywords.MINUS,\n    UNION: keywords.UNION,\n    FILTER: keywords.FILTER,\n    STR: keywords.STR,\n    LANG: keywords.LANG,\n    LANGMATCHES: keywords.LANGMATCHES,\n    DATATYPE: keywords.DATATYPE,\n    BOUND: keywords.BOUND,\n    IRI: keywords.IRI,\n    URI: keywords.URI,\n    BNODE: keywords.BNODE,\n    RAND: keywords.RAND,\n    ABS: keywords.ABS,\n    CEIL: keywords.CEIL,\n    FLOOR: keywords.FLOOR,\n    ROUND: keywords.ROUND,\n    CONCAT: keywords.CONCAT,\n    STRLEN: keywords.STRLEN,\n    UCASE: keywords.UCASE,\n    LCASE: keywords.LCASE,\n    ENCODE_FOR_URI: keywords.ENCODE_FOR_URI,\n    CONTAINS: keywords.CONTAINS,\n    STRSTARTS: keywords.STRSTARTS,\n    STRENDS: keywords.STRENDS,\n    STRBEFORE: keywords.STRBEFORE,\n    STRAFTER: keywords.STRAFTER,\n    YEAR: keywords.YEAR,\n    MONTH: keywords.MONTH,\n    DAY: keywords.DAY,\n    HOURS: keywords.HOURS,\n    MINUTES: keywords.MINUTES,\n    SECONDS: keywords.SECONDS,\n    TIMEZONE: keywords.TIMEZONE,\n    TZ: keywords.TZ,\n    NOW: keywords.NOW,\n    UUID: keywords.UUID,\n    STRUUID: keywords.STRUUID,\n    MD5: keywords.MD5,\n    SHA1: keywords.SHA1,\n    SHA256: keywords.SHA256,\n    SHA384: keywords.SHA384,\n    SHA512: keywords.SHA512,\n    COALESCE: keywords.COALESCE,\n    IF: keywords.IF,\n    STRLANG: keywords.STRLANG,\n    STRDT: keywords.STRDT,\n    sameTerm: keywords.sameTerm,\n    isIRI: keywords.isIRI,\n    isURI: keywords.isURI,\n    isBlank: keywords.isBlank,\n    isLiteral: keywords.isLiteral,\n    isNumeric: keywords.isNumeric,\n    REGEX: keywords.REGEX,\n    SUBSTR: keywords.SUBSTR,\n    REPLACE: keywords.REPLACE,\n    EXISTS: keywords.EXISTS,\n    NOT_EXISTS: keywords.NOT_EXISTS,\n    COUNT: keywords.COUNT,\n    SUM: keywords.SUM,\n    MIN: keywords.MIN,\n    AVG: keywords.AVG,\n    SAMPLE: keywords.SAMPLE,\n    GROUP_CONCAT: keywords.GROUP_CONCAT,\n    SEPARATOR: keywords.SEPARATOR,\n    TRUE: keywords.TRUE,\n    FALSE: keywords.FALSE,\n    IN: keywords.IN,\n    NOT_IN: keywords.NOT_IN,\n    MAX_LENGTH: keywords.MAX_LENGTH,\n    MAX: keywords.MAX,\n};\nexport var baseTokens = [\n    sparqlTokenMap.NIL,\n    sparqlTokenMap.ANON,\n    sparqlTokenMap.LCurly,\n    sparqlTokenMap.RCurly,\n    sparqlTokenMap.LParen,\n    sparqlTokenMap.RParen,\n    sparqlTokenMap.WhiteSpace,\n    sparqlTokenMap.IRIREF,\n    sparqlTokenMap.LANGTAG,\n    sparqlTokenMap.DOUBLE,\n    sparqlTokenMap.DECIMAL,\n    sparqlTokenMap.INTEGER,\n    sparqlTokenMap.DOUBLE_POSITIVE,\n    sparqlTokenMap.DECIMAL_POSITIVE,\n    sparqlTokenMap.INTEGER_POSITIVE,\n    sparqlTokenMap.DOUBLE_NEGATIVE,\n    sparqlTokenMap.DECIMAL_NEGATIVE,\n    sparqlTokenMap.INTEGER_NEGATIVE,\n    sparqlTokenMap.STRING_LITERAL1,\n    sparqlTokenMap.STRING_LITERAL2,\n    sparqlTokenMap.STRING_LITERAL_LONG1,\n    sparqlTokenMap.STRING_LITERAL_LONG2,\n    sparqlTokenMap.PNAME_NS,\n    sparqlTokenMap.PNAME_LN,\n    sparqlTokenMap.BLANK_NODE_LABEL,\n    sparqlTokenMap.VAR1,\n    sparqlTokenMap.VAR2,\n    sparqlTokenMap.Comment,\n    sparqlTokenMap.SELECT,\n    sparqlTokenMap.CONSTRUCT,\n    sparqlTokenMap.DISTINCT,\n    sparqlTokenMap.Star,\n    sparqlTokenMap.WHERE,\n    sparqlTokenMap.GroupBy,\n    sparqlTokenMap.OrderBy,\n    sparqlTokenMap.By,\n    sparqlTokenMap.Period,\n    sparqlTokenMap.QuestionMark,\n    sparqlTokenMap.Plus,\n    sparqlTokenMap.Minus,\n    sparqlTokenMap.LBracket,\n    sparqlTokenMap.RBracket,\n    sparqlTokenMap.PERCENT,\n    sparqlTokenMap.BASE,\n    sparqlTokenMap.PREFIX,\n    sparqlTokenMap.DESCRIBE,\n    sparqlTokenMap.ASK,\n    sparqlTokenMap.FROM,\n    sparqlTokenMap.REDUCED,\n    sparqlTokenMap.NAMED,\n    sparqlTokenMap.HAVING,\n    sparqlTokenMap.ASC,\n    sparqlTokenMap.DESC,\n    sparqlTokenMap.OFFSET,\n    sparqlTokenMap.LIMIT,\n    sparqlTokenMap.VALUES,\n    sparqlTokenMap.LOAD,\n    sparqlTokenMap.SILENT,\n    sparqlTokenMap.INTO,\n    sparqlTokenMap.AS,\n    sparqlTokenMap.CLEAR,\n    sparqlTokenMap.DROP,\n    sparqlTokenMap.CREATE,\n    sparqlTokenMap.ADD,\n    sparqlTokenMap.TO,\n    sparqlTokenMap.MOVE,\n    sparqlTokenMap.COPY,\n    sparqlTokenMap.INSERT_DATA,\n    sparqlTokenMap.DELETE_DATA,\n    sparqlTokenMap.DELETE_WHERE,\n    sparqlTokenMap.WITH,\n    sparqlTokenMap.DELETE,\n    sparqlTokenMap.INSERT,\n    sparqlTokenMap.USING,\n    sparqlTokenMap.DEFAULT,\n    sparqlTokenMap.GRAPH,\n    sparqlTokenMap.ALL,\n    sparqlTokenMap.OPTIONAL,\n    sparqlTokenMap.SERVICE,\n    sparqlTokenMap.BIND,\n    sparqlTokenMap.UNDEF,\n    sparqlTokenMap.MINUS,\n    sparqlTokenMap.UNION,\n    sparqlTokenMap.FILTER,\n    sparqlTokenMap.LANGMATCHES,\n    sparqlTokenMap.LANG,\n    sparqlTokenMap.DATATYPE,\n    sparqlTokenMap.BOUND,\n    sparqlTokenMap.IRI,\n    sparqlTokenMap.URI,\n    sparqlTokenMap.BNODE,\n    sparqlTokenMap.RAND,\n    sparqlTokenMap.ABS,\n    sparqlTokenMap.CEIL,\n    sparqlTokenMap.FLOOR,\n    sparqlTokenMap.ROUND,\n    sparqlTokenMap.CONCAT,\n    sparqlTokenMap.STRLEN,\n    sparqlTokenMap.UCASE,\n    sparqlTokenMap.LCASE,\n    sparqlTokenMap.ENCODE_FOR_URI,\n    sparqlTokenMap.CONTAINS,\n    sparqlTokenMap.STRSTARTS,\n    sparqlTokenMap.STRENDS,\n    sparqlTokenMap.STRBEFORE,\n    sparqlTokenMap.STRAFTER,\n    sparqlTokenMap.YEAR,\n    sparqlTokenMap.MONTH,\n    sparqlTokenMap.DAY,\n    sparqlTokenMap.HOURS,\n    sparqlTokenMap.MINUTES,\n    sparqlTokenMap.SECONDS,\n    sparqlTokenMap.TIMEZONE,\n    sparqlTokenMap.TZ,\n    sparqlTokenMap.NOW,\n    sparqlTokenMap.UUID,\n    sparqlTokenMap.STRUUID,\n    sparqlTokenMap.MD5,\n    sparqlTokenMap.SHA1,\n    sparqlTokenMap.SHA256,\n    sparqlTokenMap.SHA384,\n    sparqlTokenMap.SHA512,\n    sparqlTokenMap.COALESCE,\n    sparqlTokenMap.IF,\n    sparqlTokenMap.STRLANG,\n    sparqlTokenMap.STRDT,\n    sparqlTokenMap.STR,\n    sparqlTokenMap.sameTerm,\n    sparqlTokenMap.isIRI,\n    sparqlTokenMap.isURI,\n    sparqlTokenMap.isBlank,\n    sparqlTokenMap.isLiteral,\n    sparqlTokenMap.isNumeric,\n    sparqlTokenMap.REGEX,\n    sparqlTokenMap.SUBSTR,\n    sparqlTokenMap.REPLACE,\n    sparqlTokenMap.EXISTS,\n    sparqlTokenMap.NOT_EXISTS,\n    sparqlTokenMap.COUNT,\n    sparqlTokenMap.SUM,\n    sparqlTokenMap.MIN,\n    sparqlTokenMap.MAX_LENGTH,\n    sparqlTokenMap.MAX,\n    sparqlTokenMap.AVG,\n    sparqlTokenMap.SAMPLE,\n    sparqlTokenMap.GROUP_CONCAT,\n    sparqlTokenMap.SEPARATOR,\n    sparqlTokenMap.TRUE,\n    sparqlTokenMap.FALSE,\n    sparqlTokenMap.Semicolon,\n    sparqlTokenMap.Comma,\n    sparqlTokenMap.ForwardSlash,\n    sparqlTokenMap.DoubleCaret,\n    sparqlTokenMap.Caret,\n    sparqlTokenMap.LogicalOr,\n    sparqlTokenMap.Pipe,\n    sparqlTokenMap.LogicalAnd,\n    sparqlTokenMap.NotEquals,\n    sparqlTokenMap.Bang,\n    sparqlTokenMap.Equals,\n    sparqlTokenMap.LessThanEquals,\n    sparqlTokenMap.GreaterThanEquals,\n    sparqlTokenMap.LessThan,\n    sparqlTokenMap.GreaterThan,\n    sparqlTokenMap.IN,\n    sparqlTokenMap.NOT_IN,\n    sparqlTokenMap.A,\n    sparqlTokenMap.Unknown,\n];\nexport var pathsTokens = [\n    sparqlTokenMap.START,\n    sparqlTokenMap.END,\n    sparqlTokenMap.VIA,\n    sparqlTokenMap.CYCLIC,\n    sparqlTokenMap.PATHS_SHORTEST,\n    sparqlTokenMap.PATHS_ALL,\n    sparqlTokenMap.PATHS,\n];\nexport var nonStandardTokens = pathsTokens.concat([sparqlTokenMap.UNNEST]);\nvar indexOfSelect = baseTokens.indexOf(sparqlTokenMap.SELECT);\nexport var stardogSparqlTokens = baseTokens.slice(0, indexOfSelect).concat(nonStandardTokens, baseTokens.slice(indexOfSelect));\nexport var sparqlTokenTypes = baseTokens.concat(nonStandardTokens);\n","export * from './TurtleParser';\n// Convenience imports/exports that aren't core functionality:\n// NOTE: Tokens MUST be imported using CommonJS syntax; see here: https://github.com/SAP/chevrotain/issues/345\nexport var turtleTokens = require('./tokens');\n","/*\nCopyright ©2012–2018 Ruben Verborgh\nWith modifications Copyright ©2018 Stardog Union\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nvar escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\[uU]|\\\\(.)/g;\nvar escapeReplacements = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\"': '\"',\n    n: '\\n',\n    r: '\\r',\n    t: '\\t',\n    f: '\\f',\n    b: '\\b',\n    _: '_',\n    '~': '~',\n    '.': '.',\n    '-': '-',\n    '!': '!',\n    $: '$',\n    '&': '&',\n    '(': '(',\n    ')': ')',\n    '*': '*',\n    '+': '+',\n    ',': ',',\n    ';': ';',\n    '=': '=',\n    '/': '/',\n    '?': '?',\n    '#': '#',\n    '@': '@',\n    '%': '%',\n};\nexport var unescapedStringLiteralQuote = /^\"([^\"\\\\\\r\\n]+)\"/; // non-empty string without escape sequences\nexport var unescapedStringLiteralSingleQuote = /^'([^'\\\\\\r\\n]+)'/;\nexport var stringLiteralQuote = /^\"((?:[^\"\\\\\\r\\n]|\\\\.)*)\"(?=[^\"])/;\nexport var stringLiteralSingleQuote = /^'((?:[^'\\\\\\r\\n]|\\\\.)*)'(?=[^'])/;\nexport var stringLiteralLongQuote = /^\"\"\"([^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*)\"\"\"/;\nexport var stringLiteralLongSingleQuote = /^'''([^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*)'''/;\nexport var illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\nexport var escapedIri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/;\nexport var unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/;\n// Handle special unescaping needs related to the IRIREF rule and others.\nexport var unescape = function (item) {\n    try {\n        return item.replace(escapeSequence, function (_, unicode4, unicode8, escapedChar) {\n            if (unicode4) {\n                return String.fromCharCode(parseInt(unicode4, 16));\n            }\n            else if (unicode8) {\n                var charCode = parseInt(unicode8, 16);\n                if (charCode <= 0xffff) {\n                    return String.fromCharCode(charCode);\n                }\n                return String.fromCharCode(0xd800 + (charCode -= 0x10000) / 0x400, 0xdc00 + (charCode & 0x3ff));\n            }\n            else {\n                var replacement = escapeReplacements[escapedChar];\n                if (!replacement) {\n                    throw new Error();\n                }\n                return replacement;\n            }\n        });\n    }\n    catch (error) {\n        return null;\n    }\n};\n","var sparqlTokenMap = require('../sparql/tokens').sparqlTokenMap;\nimport { createToken } from 'chevrotain';\nimport { regex } from '../helpers/regex';\nimport { EXPONENT, ECHAR, PLX, HEX, PN_CHARS_BASE, PN_CHARS_U, PN_CHARS, PN_PREFIX, PN_LOCAL, PN_LOCAL_ESC, } from '../helpers/matchers';\nimport { unescape, stringLiteralLongSingleQuote, stringLiteralLongQuote, unescapedStringLiteralQuote, stringLiteralQuote, unescapedStringLiteralSingleQuote, stringLiteralSingleQuote, unescapedIri, escapedIri, illegalIriChars, } from '../helpers/unescape';\nvar unicodeRegexp = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nexport var turtleTokenMap = {\n    Comment: createToken({\n        name: 'Comment',\n        pattern: /#[^\\n]*/,\n        group: 'comments',\n    }),\n    LBracket: sparqlTokenMap.LBracket,\n    RBracket: sparqlTokenMap.RBracket,\n    LParen: sparqlTokenMap.LParen,\n    RParen: sparqlTokenMap.RParen,\n    Period: sparqlTokenMap.Period,\n    WhiteSpace: sparqlTokenMap.WhiteSpace,\n    TRUE: sparqlTokenMap.TRUE,\n    FALSE: sparqlTokenMap.FALSE,\n    DoubleCaret: sparqlTokenMap.DoubleCaret,\n    Comma: sparqlTokenMap.Comma,\n    Semicolon: sparqlTokenMap.Semicolon,\n    A: sparqlTokenMap.A,\n    PREFIX: sparqlTokenMap.PREFIX,\n    BASE: sparqlTokenMap.BASE,\n    PNAME_NS: sparqlTokenMap.PNAME_NS,\n    PNAME_LN: sparqlTokenMap.PNAME_LN,\n    BLANK_NODE_LABEL: sparqlTokenMap.BLANK_NODE_LABEL,\n    TTL_BASE: createToken({ name: 'TTL_BASE', pattern: /@base/ }),\n    TTL_PREFIX: createToken({ name: 'TTL_PREFIX', pattern: /@prefix/ }),\n    LANGTAG: sparqlTokenMap.LANGTAG,\n    INTEGER: createToken({\n        name: 'INTEGER',\n        pattern: regex.and(regex.option(/[+-]/), /\\d+/),\n    }),\n    DECIMAL: createToken({\n        name: 'DECIMAL',\n        pattern: regex.and(regex.option(/[+-]/), /(\\d*\\.\\d+)/),\n    }),\n    DOUBLE: createToken({\n        name: 'DOUBLE',\n        pattern: regex.and(regex.option(/[+-]/), regex.or(regex.and(/\\d+\\.\\d*/, EXPONENT), regex.and(/\\.\\d+/, EXPONENT), regex.and(/\\d+/, EXPONENT))),\n    }),\n    EXPONENT: createToken({ name: 'EXPONENT', pattern: EXPONENT }),\n    ECHAR: createToken({ name: 'ECHAR', pattern: ECHAR }),\n    ANON: sparqlTokenMap.ANON,\n    PLX: createToken({ name: 'PLX', pattern: PLX }),\n    PERCENT: sparqlTokenMap.PERCENT,\n    HEX: createToken({ name: 'HEX', pattern: HEX }),\n    STRING_LITERAL_LONG_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongSingleQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_LONG_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_QUOTE: createToken({\n        name: 'STRING_LITERAL_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    STRING_LITERAL_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralSingleQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralSingleQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    UCHAR: createToken({\n        name: 'UCHAR',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            return unicodeRegexp.exec(text.slice(startOffset));\n        },\n        line_breaks: false,\n    }),\n    IRIREF: createToken({\n        name: 'IRIREF',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedIri.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = escapedIri.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            var value = unescape(match[1]);\n            if (value === null || illegalIriChars.test(value)) {\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    PN_CHARS_BASE: createToken({ name: 'PN_CHARS_BASE', pattern: PN_CHARS_BASE }),\n    PN_CHARS_U: createToken({ name: 'PN_CHARS_U', pattern: PN_CHARS_U }),\n    PN_CHARS: createToken({ name: 'PN_CHARS', pattern: PN_CHARS }),\n    PN_PREFIX: createToken({ name: 'PN_PREFIX', pattern: PN_PREFIX }),\n    PN_LOCAL: createToken({ name: 'PN_LOCAL', pattern: PN_LOCAL }),\n    PN_LOCAL_ESC: createToken({ name: 'PN_LOCAL_ESC', pattern: PN_LOCAL_ESC }),\n    Unknown: createToken({\n        name: 'Unknown',\n        pattern: /\\w+/,\n    }),\n};\nexport var turtleTokenTypes = [\n    turtleTokenMap.Comment,\n    sparqlTokenMap.ANON,\n    sparqlTokenMap.LBracket,\n    sparqlTokenMap.RBracket,\n    sparqlTokenMap.LParen,\n    sparqlTokenMap.RParen,\n    sparqlTokenMap.WhiteSpace,\n    sparqlTokenMap.TRUE,\n    sparqlTokenMap.FALSE,\n    sparqlTokenMap.Comma,\n    sparqlTokenMap.Semicolon,\n    sparqlTokenMap.PNAME_NS,\n    sparqlTokenMap.A,\n    sparqlTokenMap.PREFIX,\n    sparqlTokenMap.BASE,\n    sparqlTokenMap.PNAME_LN,\n    sparqlTokenMap.BLANK_NODE_LABEL,\n    turtleTokenMap.TTL_BASE,\n    turtleTokenMap.TTL_PREFIX,\n    sparqlTokenMap.LANGTAG,\n    turtleTokenMap.DOUBLE,\n    turtleTokenMap.DECIMAL,\n    sparqlTokenMap.Period,\n    sparqlTokenMap.DoubleCaret,\n    turtleTokenMap.IRIREF,\n    turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE,\n    turtleTokenMap.STRING_LITERAL_LONG_QUOTE,\n    turtleTokenMap.STRING_LITERAL_QUOTE,\n    turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE,\n    turtleTokenMap.INTEGER,\n    turtleTokenMap.EXPONENT,\n    turtleTokenMap.PLX,\n    sparqlTokenMap.PERCENT,\n    turtleTokenMap.HEX,\n    turtleTokenMap.PN_CHARS_BASE,\n    turtleTokenMap.PN_CHARS_U,\n    turtleTokenMap.PN_CHARS,\n    turtleTokenMap.PN_PREFIX,\n    turtleTokenMap.PN_LOCAL,\n    turtleTokenMap.PN_LOCAL_ESC,\n    turtleTokenMap.ECHAR,\n    turtleTokenMap.UCHAR,\n    turtleTokenMap.Unknown,\n];\n"],"sourceRoot":""}