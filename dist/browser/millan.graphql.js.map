{"version":3,"sources":["webpack://millan.[name]/webpack/universalModuleDefinition","webpack://millan.[name]/webpack/bootstrap","webpack://millan.[name]/./src/graphql/tokens.ts","webpack://millan.[name]/./src/graphql/BaseGraphQlParser.ts","webpack://millan.[name]/./src/graphql/StandardGraphQlParser.ts","webpack://millan.[name]/./src/graphql/utils.ts","webpack://millan.[name]/./src/graphql/StardogGraphQlVisitor.ts","webpack://millan.[name]/./src/graphql/StardogGraphQlParser.ts","webpack://millan.[name]/./src/graphql/index.ts","webpack://millan.[name]/./src/helpers/chevrotain/cst.ts"],"names":["root","factory","exports","module","define","amd","self","this","webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","2","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","oldJsonpFunction","slice","__webpack_exports__","graphQlTokenMap","graphQlTokens","stardogGraphQlTokenMap","stardogGraphQlTokens","chevrotain__WEBPACK_IMPORTED_MODULE_0__","helpers_regex__WEBPACK_IMPORTED_MODULE_1__","helpers_matchers__WEBPACK_IMPORTED_MODULE_2__","__assign","assign","arguments","INTEGER_PART_PATTERN","EXPONENT_PART_PATTERN","STRING_CHARACTER_PATTERN","and","many","or","BOOLEAN_PATTERN","NULL_PATTERN","ON_PATTERN","createAndPushTokenWithNameAlt","config","categories","Name","pattern","EnumValueToken","FragmentName","createAndPushToken","longer_alt","createAndPushPunctuator","Punctuator","token","NA","StringValueToken","CATEGORIES","ignoredTokens","WhiteSpace","group","SKIPPED","UnicodeBOM","LineTerminator","Comment","Comma","punctuators","Bang","Dollar","LParen","RParen","Spread","Colon","Equals","At","LBracket","RBracket","LCurly","RCurly","Pipe","Amp","nonKeywordTerminals","FloatValueToken","option","IntValueToken","BlockStringToken","StringToken","BooleanValueToken","NullValueToken","keywords","Query","Mutation","Subscription","Fragment","On","Schema","Extend","Scalar","TypeToken","Implements","Interface","Union","Enum","Input","DirectiveToken","QUERY","MUTATION","SUBSCRIPTION","FRAGMENT_DEFINITION","FRAGMENT_SPREAD","INLINE_FRAGMENT","SCHEMA","SCALAR","OBJECT","FIELD_DEFINITION","FIELD","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM_VALUE","ENUM","INPUT_OBJECT","INPUT_FIELD_DEFINITION","StardogDirective","SparqlReceivingStardogDirective","StardogArgument","TopLevel","stardogDirectives","sort","reduce","accumulator","_a","toUpperCase","includes","tokenMap","orderedTokens","concat","stardogArguments","stardogOrderByArgumentFieldPropertyToken","stardogOrderByArgumentDescPropertyToken","OrderByArgumentFieldPropertyToken","OrderByArgumentDescPropertyToken","finalTokens","extendStatics","__extends","b","setPrototypeOf","__proto__","Array","__","constructor","BaseGraphQlParser_BaseGraphQlParser","_super","BaseGraphQlParser","options","tokenVocab","_this","recoveryEnabled","outputCst","tokenize","document","lexer","tokens","parse","entryRule","Document","input","cst","errors","RULE","AT_LEAST_ONE","SUBRULE","Definition","OR","ALT","ExecutableDefinition","TypeSystemDefinition","TypeSystemExtension","OperationDefinition","FragmentDefinition","SelectionSet","OperationType","OPTION","CONSUME","OPTION1","VariableDefinitions","OPTION2","Directives","SUBRULE1","Selection","Field","InlineFragment","FragmentSpread","Alias","Arguments","ARGS","OPTION3","isConst","Argument","Value","TypeCondition","NamedType","GATE","Variable","IntValue","FloatValue","StringValue","BooleanValue","NullValue","EnumValue","ListValue","ObjectValue","MANY","ObjectField","VariableDefinition","Type","DefaultValue","ListType","Directive","SchemaDefinition","TypeDefinition","DirectiveDefinition","SchemaExtension","TypeExtension","OperationTypeDefinition","OperationTypeDefinitionList","Description","ScalarTypeDefinition","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","InputObjectTypeDefinition","ScalarTypeExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","ImplementsInterfaces","FieldsDefinition","SUBRULE2","CONSUME1","FieldDefinition","ArgumentsDefinition","InputValueDefinition","UnionMemberTypes","EnumValuesDefinition","EnumValueDefinition","InputFieldsDefinition","DirectiveLocations","DirectiveLocation","ExecutableDirectiveLocation","TypeSystemDirectiveLocation","api","StandardGraphQlParser_extends","StandardGraphQlParser_StandardGraphQlParser","StandardGraphQlParser","performSelfAnalysis","utils_a","ToArgumentToken","IfArgumentToken","AliasArgumentToken","GraphArgumentToken","BindDirectiveToken","ConfigDirectiveToken","conditionalDirectiveTokens","SkipDirectiveToken","IncludeDirectiveToken","FilterDirectiveToken","sparqlReceivingStardogDirectiveTokens","graphQlUtils","getArgumentNodes","argumentDictionary","argumentsNode","chevrotain_cst","children","getArgumentTokenTypesForDirectiveNameToken","directiveNameToken","some","tokenType","isSparqlReceivingStardogDirective","directiveToken","StardogGraphQlVisitor_extends","StardogGraphQlVisitor_assign","StardogGraphQlVisitor_getArgumentNodes","StardogGraphQlVisitor_getArgumentTokenTypesForDirectiveNameToken","StardogGraphQlVisitor_isSparqlReceivingStardogDirective","validateDirectiveArgumentsArity","allowedArgumentTokenTypes","directiveImage","errorAccumulator","numMinimumArguments","numSuppliedArguments","suppliedArgumentNodes","numAllowedArguments","validArgumentsPhrase","map","argumentTokenType","PATTERN","join","requiresPhrase","stardogGraphQlErrors","message","validateDirectiveArgumentsNameAndValue","sparqlParser","forEach","argumentNode","argumentNameToken","stringValueToken","stardogSparqlParser","innerExpressionImage","argumentTokenTypeName","argumentStringValueToken","image","Expression","sparqlErrors","tokenForOffset","offsetPadding","tokenStartOffset","startOffset","tokenEndOffset","endOffset","tokenStartColumn","startColumn","tokenEndColumn","endColumn","error","errorStartOffset","errorEndOffset","errorStartColumn","errorEndColumn","startLine","endLine","mapSparqlErrors","getStardogGraphQlVisitor","BaseVisitor","parserInstance","StardogSparqlParser","StardogGraphQlVisitor","visit","args","_i","ctx","_b","accumulatedErrors","validatorOptions","validators","validator","validateSuppliedArgumentsForDirective","ruleStack_1","getHumanReadableRuleStack","ruleOccurrenceStack_1","RULE_OCCURRENCE_STACK","partialError","context","ruleStack","ruleOccurrenceStack","resyncedTokens","sparqlError","$resetState","validateVisitor","StardogGraphQlParser_extends","StardogGraphQlParser_StardogGraphQlParser","StardogGraphQlParser","visitCst","stardogGraphQlVisitor","BaseStardogGraphQlVisitor","getBaseCstVisitorConstructorWithDefaults","graphqlTokens","traverse","unsafeTraverse","isCstNode","isIToken","getFirstChildCstElementByRuleStack","_traverse","Boolean","rootCstNode","currentCstElement","ruleName","TraverseContext","node","parentCtx","visitSafely","keys","childType","child","childCtx","transformedCtx","nextCtx"],"mappings":"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","file":"millan.graphql.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"graphql\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"graphql\"] = factory();\n\telse\n\t\troot[\"millan\"] = root[\"millan\"] || {}, root[\"millan\"][\"graphql\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t2: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([64,0,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { createToken, Lexer } from 'chevrotain';\nimport { regex } from 'helpers/regex';\nimport { STRING_LITERAL_LONG2 } from 'helpers/matchers';\n// Patterns:\nvar NAME_PATTERN = /[_A-Za-z][_0-9A-Za-z]*/;\nvar INTEGER_PART_PATTERN = /\\-?(?:0|[1-9][0-9]*)/;\nvar EXPONENT_PART_PATTERN = /[eE][+-]?[0-9]+/;\nvar ESCAPED_CHARACTER_PATTERN = /\\\\[\"\\\\/bfnrt]/;\nvar ESCAPED_UNICODE_PATTERN = /\\\\u[0-9A-Fa-f]{4}/;\nvar STRING_SOURCE_CHARACTER_PATTERN = /[\\u0009\\u0020\\u0021\\u0023-\\u005B\\u005D-\\uFFFF]/; // source character, but no '\"' or '\\' or line terminators\nvar STRING_CHARACTER_PATTERN = regex.and(/\"/, regex.many(regex.or(STRING_SOURCE_CHARACTER_PATTERN, ESCAPED_UNICODE_PATTERN, ESCAPED_CHARACTER_PATTERN)), /\"/);\nvar BOOLEAN_PATTERN = /true|false/;\nvar NULL_PATTERN = /null/;\nvar ON_PATTERN = /on/;\n// Holder of tokens; tokens are generally added and created in order, below.\nvar graphQlTokens = [];\n// Utility used primarily for keywords, which should also be counted as\n// matching the `Name` token and (except for special cases) the\n// `EnumValueToken` and `FragmentName` tokens. Ensures the created token has\n// those other tokens as categories, and ensures that `Name` will be matched\n// correctly for tokens that start with keyword characters but have additional\n// characters. Adds the created token to the `graphQlTokens` array.\nvar createAndPushTokenWithNameAlt = function (config) {\n    var categories = [Name];\n    if (config.pattern !== BOOLEAN_PATTERN && config.pattern !== NULL_PATTERN) {\n        categories.push(EnumValueToken);\n    }\n    if (config.pattern !== ON_PATTERN) {\n        categories.push(FragmentName);\n    }\n    return createAndPushToken({\n        name: config.name,\n        pattern: config.pattern,\n        longer_alt: Name,\n        categories: categories,\n    });\n};\nvar createAndPushPunctuator = function (config) {\n    return createAndPushToken(__assign({}, config, { categories: [Punctuator] }));\n};\n// Simple wrapper for `createToken` that also pushes the created token into\n// `graphQlTokens` at the time of creation, since order matters.\nvar createAndPushToken = function (config) {\n    var token = createToken(config);\n    graphQlTokens.push(token);\n    return token;\n};\n// Category tokens need to be created first, so they can be referenced by other\n// tokens. They are _not_ yet added to the `graphQlTokens` array so that they\n// do not match before various more specific keywords.\nvar Name = createToken({ name: 'Name', pattern: NAME_PATTERN });\n// `EnumValueToken` and `FragmentName` are purely abstract categories that will\n// be matched for all `Name` tokens _except_ the special tokens specified in\n// the GraphQL grammar. See `createAndPushTokenWithNameAlt` for details.\nvar EnumValueToken = createToken({\n    name: 'EnumValueToken',\n    pattern: Lexer.NA,\n});\nvar FragmentName = createToken({\n    name: 'FragmentName',\n    pattern: Lexer.NA,\n});\n// `StringValueToken` will match either BlockStrings or Strings.\nvar StringValueToken = createToken({\n    name: 'StringValueToken',\n    pattern: Lexer.NA,\n});\nvar Punctuator = createToken({\n    name: 'Punctuator',\n    pattern: Lexer.NA,\n});\n// Generally, anything that matches `Name` should match `EnumValueToken` and\n// `FragmentName`. NOTE, however that `On` will not match `FragmentName` and\n// `BooleanValueToken` and `NullValueToken` will not match `EnumValueToken`, in\n// accordance with the official grammar; this is handled by the fact that the\n// `On`, `BooleanValueToken`, and `FragmentName` tokens are defined and pushed\n// into the tokens array earlier than `Name`. Given\n// `createAndPushTokenWithNameAlt`, the latter tokens will also be treated as\n// `Name` tokens, but will NOT be treated as instances of the relevant\n// `EnumValueToken` or `FragmentName`. That's exactly what we want.\nName.CATEGORIES.push(EnumValueToken, FragmentName);\nvar ignoredTokens = {\n    WhiteSpace: createAndPushToken({\n        name: 'WhiteSpace',\n        pattern: /[ \\t]+/,\n        group: Lexer.SKIPPED,\n    }),\n    UnicodeBOM: createAndPushToken({\n        name: 'UnicodeBOM',\n        pattern: '\\\\uFFFE',\n        group: Lexer.SKIPPED,\n    }),\n    LineTerminator: createAndPushToken({\n        name: 'LineTerminator',\n        pattern: /\\n\\r|\\r|\\n/,\n        group: Lexer.SKIPPED,\n    }),\n    Comment: createAndPushToken({\n        name: 'Comment',\n        pattern: /#[^\\n\\r]*/,\n        group: Lexer.SKIPPED,\n    }),\n    Comma: createAndPushToken({\n        name: 'Comma',\n        pattern: ',',\n        group: Lexer.SKIPPED,\n    }),\n};\nvar punctuators = {\n    Bang: createAndPushPunctuator({ name: 'Bang', pattern: '!' }),\n    Dollar: createAndPushPunctuator({ name: 'Dollar', pattern: '$' }),\n    LParen: createAndPushPunctuator({ name: 'LParen', pattern: '(' }),\n    RParen: createAndPushPunctuator({ name: 'RParen', pattern: ')' }),\n    Spread: createAndPushPunctuator({ name: 'Spread', pattern: '...' }),\n    Colon: createAndPushPunctuator({ name: 'Colon', pattern: ':' }),\n    Equals: createAndPushPunctuator({ name: 'Equals', pattern: '=' }),\n    At: createAndPushPunctuator({ name: 'At', pattern: '@' }),\n    LBracket: createAndPushPunctuator({ name: 'LBracket', pattern: '[' }),\n    RBracket: createAndPushPunctuator({ name: 'RBracket', pattern: ']' }),\n    LCurly: createAndPushPunctuator({ name: 'LCurly', pattern: '{' }),\n    RCurly: createAndPushPunctuator({ name: 'RCurly', pattern: '}' }),\n    Pipe: createAndPushPunctuator({ name: 'Pipe', pattern: '|' }),\n    Amp: createAndPushPunctuator({ name: 'Amp', pattern: '&' }),\n    Punctuator: Punctuator,\n};\nvar nonKeywordTerminals = {\n    FloatValueToken: createAndPushToken({\n        name: 'FloatValueToken',\n        pattern: regex.and(INTEGER_PART_PATTERN, regex.or(regex.and(/\\.[0-9]+/, regex.option(EXPONENT_PART_PATTERN)), EXPONENT_PART_PATTERN)),\n    }),\n    IntValueToken: createAndPushToken({\n        name: 'IntValueToken',\n        pattern: INTEGER_PART_PATTERN,\n    }),\n    BlockStringToken: createAndPushToken({\n        name: 'BlockStringToken',\n        pattern: STRING_LITERAL_LONG2,\n        categories: [StringValueToken],\n    }),\n    StringToken: createAndPushToken({\n        name: 'StringToken',\n        pattern: STRING_CHARACTER_PATTERN,\n        categories: [StringValueToken],\n    }),\n    BooleanValueToken: createAndPushToken({\n        name: 'BooleanValueToken',\n        pattern: BOOLEAN_PATTERN,\n        longer_alt: Name,\n    }),\n    NullValueToken: createAndPushToken({\n        name: 'NullValueToken',\n        pattern: NULL_PATTERN,\n        longer_alt: Name,\n    }),\n    EnumValueToken: EnumValueToken,\n    FragmentName: FragmentName,\n    Name: Name,\n    StringValueToken: StringValueToken,\n};\nvar keywords = {\n    Query: createAndPushTokenWithNameAlt({\n        name: 'Query',\n        pattern: 'query',\n    }),\n    Mutation: createAndPushTokenWithNameAlt({\n        name: 'Mutation',\n        pattern: 'mutation',\n    }),\n    Subscription: createAndPushTokenWithNameAlt({\n        name: 'Subscription',\n        pattern: 'subscription',\n    }),\n    Fragment: createAndPushTokenWithNameAlt({\n        name: 'Fragment',\n        pattern: 'fragment',\n    }),\n    On: createAndPushTokenWithNameAlt({\n        name: 'On',\n        pattern: ON_PATTERN,\n    }),\n    Schema: createAndPushTokenWithNameAlt({\n        name: 'Schema',\n        pattern: 'schema',\n    }),\n    Extend: createAndPushTokenWithNameAlt({\n        name: 'Extend',\n        pattern: 'extend',\n    }),\n    Scalar: createAndPushTokenWithNameAlt({\n        name: 'Scalar',\n        pattern: 'scalar',\n    }),\n    TypeToken: createAndPushTokenWithNameAlt({\n        name: 'TypeToken',\n        pattern: 'type',\n    }),\n    Implements: createAndPushTokenWithNameAlt({\n        name: 'Implements',\n        pattern: 'implements',\n    }),\n    Interface: createAndPushTokenWithNameAlt({\n        name: 'Interface',\n        pattern: 'interface',\n    }),\n    Union: createAndPushTokenWithNameAlt({\n        name: 'Union',\n        pattern: 'union',\n    }),\n    Enum: createAndPushTokenWithNameAlt({\n        name: 'Enum',\n        pattern: 'enum',\n    }),\n    Input: createAndPushTokenWithNameAlt({\n        name: 'Input',\n        pattern: 'input',\n    }),\n    DirectiveToken: createAndPushTokenWithNameAlt({\n        name: 'DirectiveToken',\n        pattern: 'directive',\n    }),\n    QUERY: createAndPushTokenWithNameAlt({ name: 'QUERY', pattern: 'QUERY' }),\n    MUTATION: createAndPushTokenWithNameAlt({\n        name: 'MUTATION',\n        pattern: 'MUTATION',\n    }),\n    SUBSCRIPTION: createAndPushTokenWithNameAlt({\n        name: 'SUBSCRIPTION',\n        pattern: 'SUBSCRIPTION',\n    }),\n    FRAGMENT_DEFINITION: createAndPushTokenWithNameAlt({\n        name: 'FRAGMENT_DEFINITION',\n        pattern: 'FRAGMENT_DEFINITION',\n    }),\n    FRAGMENT_SPREAD: createAndPushTokenWithNameAlt({\n        name: 'FRAGMENT_SPREAD',\n        pattern: 'FRAGMENT_SPREAD',\n    }),\n    INLINE_FRAGMENT: createAndPushTokenWithNameAlt({\n        name: 'INLINE_FRAGMENT',\n        pattern: 'INLINE_FRAGMENT',\n    }),\n    SCHEMA: createAndPushTokenWithNameAlt({ name: 'SCHEMA', pattern: 'SCHEMA' }),\n    SCALAR: createAndPushTokenWithNameAlt({ name: 'SCALAR', pattern: 'SCALAR' }),\n    OBJECT: createAndPushTokenWithNameAlt({ name: 'OBJECT', pattern: 'OBJECT' }),\n    FIELD_DEFINITION: createAndPushTokenWithNameAlt({\n        name: 'FIELD_DEFINITION',\n        pattern: 'FIELD_DEFINITION',\n    }),\n    FIELD: createAndPushTokenWithNameAlt({ name: 'FIELD', pattern: 'FIELD' }),\n    ARGUMENT_DEFINITION: createAndPushTokenWithNameAlt({\n        name: 'ARGUMENT_DEFINITION',\n        pattern: 'ARGUMENT_DEFINITION',\n    }),\n    INTERFACE: createAndPushTokenWithNameAlt({\n        name: 'INTERFACE',\n        pattern: 'INTERFACE',\n    }),\n    UNION: createAndPushTokenWithNameAlt({ name: 'UNION', pattern: 'UNION' }),\n    ENUM_VALUE: createAndPushTokenWithNameAlt({\n        name: 'ENUM_VALUE',\n        pattern: 'ENUM_VALUE',\n    }),\n    ENUM: createAndPushTokenWithNameAlt({ name: 'ENUM', pattern: 'ENUM' }),\n    INPUT_OBJECT: createAndPushTokenWithNameAlt({\n        name: 'INPUT_OBJECT',\n        pattern: 'INPUT_OBJECT',\n    }),\n    INPUT_FIELD_DEFINITION: createAndPushTokenWithNameAlt({\n        name: 'INPUT_FIELD_DEFINITION',\n        pattern: 'INPUT_FIELD_DEFINITION',\n    }),\n};\nvar graphQlTokenMap = __assign({}, ignoredTokens, punctuators, nonKeywordTerminals, keywords, { Name: Name });\n// Category tokens for special Stardog directives/arguments. These are\n// especially useful in tools that use the parser, such as language servers\nvar StardogDirective = createToken({\n    name: 'StardogDirective',\n    pattern: Lexer.NA,\n});\nvar SparqlReceivingStardogDirective = createToken({\n    name: 'SparqlReceivingStardogDirective',\n    pattern: Lexer.NA,\n});\nvar StardogArgument = createToken({\n    name: 'StardogArgument',\n    pattern: Lexer.NA,\n});\nvar TopLevel = createToken({\n    name: 'TopLevel',\n    pattern: Lexer.NA,\n});\nvar stardogDirectives = [\n    'optional',\n    'bind',\n    'hide',\n    'skip',\n    'include',\n    'filter',\n    'prefix',\n    'config',\n]\n    .sort()\n    .reduce(function (accumulator, name) {\n    var _a;\n    var key = \"\" + name[0].toUpperCase() + name.slice(1) + \"DirectiveToken\";\n    var categories = [Name, EnumValueToken, FragmentName, StardogDirective];\n    if (['prefix', 'config'].includes(name)) {\n        categories.push(TopLevel);\n    }\n    if (['bind', 'skip', 'include', 'filter'].includes(name)) {\n        categories.push(SparqlReceivingStardogDirective);\n    }\n    var token = createToken({\n        name: key,\n        pattern: name,\n        categories: categories,\n        longer_alt: Name,\n    });\n    return __assign({}, accumulator, { tokenMap: __assign({}, accumulator.tokenMap, (_a = {}, _a[key] = token, _a)), orderedTokens: accumulator.orderedTokens.concat(token) });\n}, { tokenMap: {}, orderedTokens: [] });\nvar stardogArguments = [\n    'orderBy',\n    'first',\n    'to',\n    'if',\n    'alias',\n    'graph',\n    'offset',\n    'limit',\n    'iri',\n]\n    .sort()\n    .reduce(function (accumulator, name) {\n    var _a;\n    var key = \"\" + name[0].toUpperCase() + name.slice(1) + \"ArgumentToken\";\n    var categories = [Name, EnumValueToken, FragmentName, StardogArgument];\n    if (['orderBy', 'first', 'limit', 'offset'].includes(name)) {\n        categories.push(TopLevel);\n    }\n    var token = createToken({\n        name: key,\n        pattern: name,\n        categories: categories,\n        longer_alt: Name,\n    });\n    return __assign({}, accumulator, { tokenMap: __assign({}, accumulator.tokenMap, (_a = {}, _a[key] = token, _a)), orderedTokens: accumulator.orderedTokens.concat(token) });\n}, { tokenMap: {}, orderedTokens: [] });\n// These two tokens aren't really arguments or directives; instead, they're\n// fields of objects that can be passed as the stardog `orderBy` argument.\nvar stardogOrderByArgumentFieldPropertyToken = createToken({\n    name: 'OrderByArgumentFieldPropertyToken',\n    pattern: 'field',\n    categories: [Name, EnumValueToken, FragmentName],\n    longer_alt: Name,\n});\nvar stardogOrderByArgumentDescPropertyToken = createToken({\n    name: 'OrderByArgumentDescPropertyToken',\n    pattern: 'desc',\n    categories: [Name, EnumValueToken, FragmentName],\n    longer_alt: Name,\n});\nvar stardogGraphQlTokenMap = __assign({}, graphQlTokenMap, stardogDirectives.tokenMap, stardogArguments.tokenMap, { OrderByArgumentFieldPropertyToken: stardogOrderByArgumentFieldPropertyToken, OrderByArgumentDescPropertyToken: stardogOrderByArgumentDescPropertyToken, StardogDirective: StardogDirective,\n    SparqlReceivingStardogDirective: SparqlReceivingStardogDirective,\n    StardogArgument: StardogArgument,\n    TopLevel: TopLevel });\nvar stardogGraphQlTokens = graphQlTokens.concat(stardogDirectives.orderedTokens, stardogArguments.orderedTokens, [\n    stardogOrderByArgumentFieldPropertyToken,\n    stardogOrderByArgumentDescPropertyToken,\n    StardogDirective,\n    SparqlReceivingStardogDirective,\n    StardogArgument,\n    TopLevel,\n]);\n// Add shared category and catch-all tokens.\nvar finalTokens = [\n    FragmentName,\n    EnumValueToken,\n    Name,\n    StringValueToken,\n    Punctuator,\n];\ngraphQlTokens.push.apply(graphQlTokens, finalTokens);\nstardogGraphQlTokens.push.apply(stardogGraphQlTokens, finalTokens);\nexport { graphQlTokenMap, graphQlTokens, stardogGraphQlTokenMap, stardogGraphQlTokens, };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar graphQlTokenMap = require('./tokens').graphQlTokenMap;\nimport { Parser, Lexer, } from 'chevrotain';\nvar BaseGraphQlParser = /** @class */ (function (_super) {\n    __extends(BaseGraphQlParser, _super);\n    function BaseGraphQlParser(options, tokenVocab) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, tokenVocab, __assign({ recoveryEnabled: true, outputCst: true }, options.config)) || this;\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        _this.parse = function (document, entryRule) {\n            if (entryRule === void 0) { entryRule = _this.Document; }\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = entryRule.call(_this);\n            var errors = _this.errors;\n            return {\n                errors: errors,\n                cst: cst,\n            };\n        };\n        _this.Document = _this.RULE('Document', function () {\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.Definition); });\n        });\n        _this.Definition = _this.RULE('Definition', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.ExecutableDefinition); } },\n                { ALT: function () { return _this.SUBRULE(_this.TypeSystemDefinition); } },\n                { ALT: function () { return _this.SUBRULE(_this.TypeSystemExtension); } },\n            ]);\n        });\n        _this.ExecutableDefinition = _this.RULE('ExecutableDefinition', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.OperationDefinition); } },\n                { ALT: function () { return _this.SUBRULE(_this.FragmentDefinition); } },\n            ]);\n        });\n        _this.OperationDefinition = _this.RULE('OperationDefinition', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.SelectionSet); } },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.OperationType);\n                        _this.OPTION(function () { return _this.CONSUME(graphQlTokenMap.Name); });\n                        _this.OPTION1(function () { return _this.SUBRULE(_this.VariableDefinitions); });\n                        _this.OPTION2(function () { return _this.SUBRULE(_this.Directives); });\n                        _this.SUBRULE1(_this.SelectionSet);\n                    },\n                },\n            ]);\n        });\n        _this.OperationType = _this.RULE('OperationType', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.Query); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.Mutation); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.Subscription); } },\n            ]);\n        });\n        _this.SelectionSet = _this.RULE('SelectionSet', function () {\n            _this.CONSUME(graphQlTokenMap.LCurly);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.Selection); });\n            _this.CONSUME(graphQlTokenMap.RCurly);\n        });\n        _this.Selection = _this.RULE('Selection', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Field); } },\n                { ALT: function () { return _this.SUBRULE(_this.InlineFragment); } },\n                { ALT: function () { return _this.SUBRULE(_this.FragmentSpread); } },\n            ]);\n        });\n        _this.Field = _this.RULE('Field', function () {\n            _this.OPTION(function () { return _this.SUBRULE(_this.Alias); });\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.OPTION1(function () {\n                return _this.SUBRULE(_this.Arguments, { ARGS: [false /* isConst */] });\n            });\n            _this.OPTION2(function () { return _this.SUBRULE(_this.Directives); });\n            _this.OPTION3(function () { return _this.SUBRULE(_this.SelectionSet); });\n        });\n        _this.Alias = _this.RULE('Alias', function () {\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.CONSUME(graphQlTokenMap.Colon);\n        });\n        _this.Arguments = _this.RULE('Arguments', function (isConst) {\n            _this.CONSUME(graphQlTokenMap.LParen);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.Argument, { ARGS: [isConst] }); });\n            _this.CONSUME(graphQlTokenMap.RParen);\n        });\n        _this.Argument = _this.RULE('Argument', function (isConst) {\n            _this.SUBRULE(_this.Alias);\n            _this.SUBRULE(_this.Value, { ARGS: [isConst] });\n        });\n        _this.FragmentSpread = _this.RULE('FragmentSpread', function () {\n            _this.CONSUME(graphQlTokenMap.Spread);\n            _this.CONSUME(graphQlTokenMap.FragmentName);\n            _this.OPTION(function () { return _this.SUBRULE(_this.Directives); });\n        });\n        _this.InlineFragment = _this.RULE('InlineFragment', function () {\n            _this.CONSUME(graphQlTokenMap.Spread);\n            _this.OPTION(function () { return _this.SUBRULE(_this.TypeCondition); });\n            _this.OPTION1(function () { return _this.SUBRULE(_this.Directives); });\n            _this.SUBRULE(_this.SelectionSet);\n        });\n        _this.FragmentDefinition = _this.RULE('FragmentDefinition', function () {\n            _this.CONSUME(graphQlTokenMap.Fragment);\n            _this.CONSUME(graphQlTokenMap.FragmentName);\n            _this.SUBRULE(_this.TypeCondition);\n            _this.OPTION(function () { return _this.SUBRULE(_this.Directives); });\n            _this.SUBRULE(_this.SelectionSet);\n        });\n        _this.TypeCondition = _this.RULE('TypeCondition', function () {\n            _this.CONSUME(graphQlTokenMap.On);\n            _this.SUBRULE(_this.NamedType);\n        });\n        _this.Value = _this.RULE('Value', function (isConst) {\n            _this.OR([\n                { GATE: function () { return !isConst; }, ALT: function () { return _this.SUBRULE(_this.Variable); } },\n                { ALT: function () { return _this.SUBRULE(_this.IntValue); } },\n                { ALT: function () { return _this.SUBRULE(_this.FloatValue); } },\n                { ALT: function () { return _this.SUBRULE(_this.StringValue); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanValue); } },\n                { ALT: function () { return _this.SUBRULE(_this.NullValue); } },\n                { ALT: function () { return _this.SUBRULE(_this.EnumValue); } },\n                { ALT: function () { return _this.SUBRULE(_this.ListValue, { ARGS: [isConst] }); } },\n                { ALT: function () { return _this.SUBRULE(_this.ObjectValue, { ARGS: [isConst] }); } },\n            ]);\n        });\n        _this.IntValue = _this.RULE('IntValue', function () {\n            _this.CONSUME(graphQlTokenMap.IntValueToken);\n        });\n        _this.FloatValue = _this.RULE('FloatValue', function () {\n            _this.CONSUME(graphQlTokenMap.FloatValueToken);\n        });\n        _this.StringValue = _this.RULE('StringValue', function () {\n            _this.CONSUME(graphQlTokenMap.StringValueToken);\n        });\n        _this.BooleanValue = _this.RULE('BooleanValue', function () {\n            _this.CONSUME(graphQlTokenMap.BooleanValueToken);\n        });\n        _this.NullValue = _this.RULE('NullValue', function () {\n            _this.CONSUME(graphQlTokenMap.NullValueToken);\n        });\n        _this.EnumValue = _this.RULE('EnumValue', function () {\n            _this.CONSUME(graphQlTokenMap.EnumValueToken);\n        });\n        _this.ListValue = _this.RULE('ListValue', function (isConst) {\n            _this.CONSUME(graphQlTokenMap.LBracket);\n            _this.MANY(function () { return _this.SUBRULE(_this.Value, { ARGS: [isConst] }); });\n            _this.CONSUME(graphQlTokenMap.RBracket);\n        });\n        _this.ObjectValue = _this.RULE('ObjectValue', function (isConst) {\n            _this.CONSUME(graphQlTokenMap.LCurly);\n            _this.MANY(function () { return _this.SUBRULE(_this.ObjectField, { ARGS: [isConst] }); });\n            _this.CONSUME(graphQlTokenMap.RCurly);\n        });\n        _this.ObjectField = _this.RULE('ObjectField', function (isConst) {\n            _this.SUBRULE(_this.Alias);\n            _this.SUBRULE(_this.Value, { ARGS: [isConst] });\n        });\n        _this.VariableDefinitions = _this.RULE('VariableDefinitions', function () {\n            _this.CONSUME(graphQlTokenMap.LParen);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.VariableDefinition); });\n            _this.CONSUME(graphQlTokenMap.RParen);\n        });\n        _this.VariableDefinition = _this.RULE('VariableDefinition', function () {\n            _this.SUBRULE(_this.Variable);\n            _this.CONSUME(graphQlTokenMap.Colon);\n            _this.SUBRULE(_this.Type);\n            _this.OPTION(function () { return _this.SUBRULE(_this.DefaultValue); });\n        });\n        _this.Variable = _this.RULE('Variable', function () {\n            _this.CONSUME(graphQlTokenMap.Dollar);\n            _this.CONSUME(graphQlTokenMap.Name);\n        });\n        _this.DefaultValue = _this.RULE('DefaultValue', function () {\n            _this.CONSUME(graphQlTokenMap.Equals);\n            _this.SUBRULE(_this.Value, { ARGS: [true /* isConst */] });\n        });\n        _this.Type = _this.RULE('Type', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.NamedType); } },\n                { ALT: function () { return _this.SUBRULE(_this.ListType); } },\n            ]);\n            _this.OPTION(function () { return _this.CONSUME(graphQlTokenMap.Bang); });\n        });\n        _this.NamedType = _this.RULE('NamedType', function () {\n            _this.CONSUME(graphQlTokenMap.Name);\n        });\n        _this.ListType = _this.RULE('ListType', function () {\n            _this.CONSUME(graphQlTokenMap.LBracket);\n            _this.SUBRULE(_this.Type);\n            _this.CONSUME(graphQlTokenMap.RBracket);\n        });\n        _this.Directives = _this.RULE('Directives', function (isConst) {\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.Directive, { ARGS: [isConst] }); });\n        });\n        _this.Directive = _this.RULE('Directive', function (isConst) {\n            _this.CONSUME(graphQlTokenMap.At);\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.OPTION(function () { return _this.SUBRULE(_this.Arguments, { ARGS: [isConst] }); });\n        });\n        _this.TypeSystemDefinition = _this.RULE('TypeSystemDefinition', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.SchemaDefinition); } },\n                { ALT: function () { return _this.SUBRULE(_this.TypeDefinition); } },\n                { ALT: function () { return _this.SUBRULE(_this.DirectiveDefinition); } },\n            ]);\n        });\n        _this.TypeSystemExtension = _this.RULE('TypeSystemExtension', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.SchemaExtension); } },\n                { ALT: function () { return _this.SUBRULE(_this.TypeExtension); } },\n            ]);\n        });\n        _this.SchemaDefinition = _this.RULE('SchemaDefinition', function () {\n            _this.CONSUME(graphQlTokenMap.Schema);\n            _this.OPTION(function () {\n                return _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n            });\n            _this.CONSUME(graphQlTokenMap.LCurly);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.OperationTypeDefinition); });\n            _this.CONSUME(graphQlTokenMap.RCurly);\n        });\n        _this.SchemaExtension = _this.RULE('SchemaExtension', function () {\n            _this.CONSUME(graphQlTokenMap.Extend);\n            _this.CONSUME(graphQlTokenMap.Schema);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n                        _this.OPTION(function () { return _this.SUBRULE1(_this.OperationTypeDefinitionList); });\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE(_this.OperationTypeDefinitionList); } },\n            ]);\n        });\n        _this.OperationTypeDefinitionList = _this.RULE('OperationTypeDefinitionList', function () {\n            _this.CONSUME(graphQlTokenMap.LCurly);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.OperationTypeDefinition); });\n            _this.CONSUME(graphQlTokenMap.RCurly);\n        });\n        _this.OperationTypeDefinition = _this.RULE('OperationTypeDefinition', function () {\n            _this.SUBRULE(_this.OperationType);\n            _this.CONSUME(graphQlTokenMap.Colon);\n            _this.SUBRULE(_this.NamedType);\n        });\n        _this.Description = _this.RULE('Description', function () {\n            _this.SUBRULE(_this.StringValue);\n        });\n        _this.TypeDefinition = _this.RULE('TypeDefinition', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.ScalarTypeDefinition); } },\n                { ALT: function () { return _this.SUBRULE(_this.ObjectTypeDefinition); } },\n                { ALT: function () { return _this.SUBRULE(_this.InterfaceTypeDefinition); } },\n                { ALT: function () { return _this.SUBRULE(_this.UnionTypeDefinition); } },\n                { ALT: function () { return _this.SUBRULE(_this.EnumTypeDefinition); } },\n                { ALT: function () { return _this.SUBRULE(_this.InputObjectTypeDefinition); } },\n            ]);\n        });\n        _this.TypeExtension = _this.RULE('TypeExtension', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.ScalarTypeExtension); } },\n                { ALT: function () { return _this.SUBRULE(_this.ObjectTypeExtension); } },\n                { ALT: function () { return _this.SUBRULE(_this.InterfaceTypeExtension); } },\n                { ALT: function () { return _this.SUBRULE(_this.UnionTypeExtension); } },\n                { ALT: function () { return _this.SUBRULE(_this.EnumTypeExtension); } },\n                { ALT: function () { return _this.SUBRULE(_this.InputObjectTypeExtension); } },\n            ]);\n        });\n        _this.ScalarTypeDefinition = _this.RULE('ScalarTypeDefinition', function () {\n            _this.OPTION(function () { return _this.SUBRULE(_this.Description); });\n            _this.CONSUME(graphQlTokenMap.Scalar);\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.OPTION1(function () {\n                return _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n            });\n        });\n        _this.ScalarTypeExtension = _this.RULE('ScalarTypeExtension', function () {\n            _this.CONSUME(graphQlTokenMap.Extend);\n            _this.CONSUME(graphQlTokenMap.Scalar);\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n        });\n        _this.ObjectTypeDefinition = _this.RULE('ObjectTypeDefinition', function () {\n            _this.OPTION(function () { return _this.SUBRULE(_this.Description); });\n            _this.CONSUME(graphQlTokenMap.TypeToken);\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.OPTION1(function () { return _this.SUBRULE(_this.ImplementsInterfaces); });\n            _this.OPTION2(function () {\n                return _this.SUBRULE1(_this.Directives, { ARGS: [true /* isConst */] });\n            });\n            _this.OPTION3(function () { return _this.SUBRULE(_this.FieldsDefinition); });\n        });\n        _this.ObjectTypeExtension = _this.RULE('ObjectTypeExtension', function () {\n            _this.CONSUME(graphQlTokenMap.Extend);\n            _this.CONSUME(graphQlTokenMap.TypeToken);\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.ImplementsInterfaces);\n                        _this.OPTION(function () {\n                            return _this.SUBRULE1(_this.Directives, { ARGS: [true /* isConst */] });\n                        });\n                        _this.OPTION1(function () { return _this.SUBRULE(_this.FieldsDefinition); });\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n                        _this.OPTION2(function () { return _this.SUBRULE1(_this.FieldsDefinition); });\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE2(_this.FieldsDefinition); } },\n            ]);\n        });\n        _this.ImplementsInterfaces = _this.RULE('ImplementsInterfaces', function () {\n            _this.CONSUME(graphQlTokenMap.Implements);\n            _this.OPTION(function () { return _this.CONSUME(graphQlTokenMap.Amp); });\n            _this.SUBRULE(_this.NamedType);\n            _this.MANY(function () {\n                _this.CONSUME1(graphQlTokenMap.Amp);\n                _this.SUBRULE1(_this.NamedType);\n            });\n        });\n        _this.FieldsDefinition = _this.RULE('FieldsDefinition', function () {\n            _this.CONSUME(graphQlTokenMap.LCurly);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.FieldDefinition); });\n            _this.CONSUME(graphQlTokenMap.RCurly);\n        });\n        _this.FieldDefinition = _this.RULE('FieldDefinition', function () {\n            _this.OPTION(function () { return _this.SUBRULE(_this.Description); });\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.OPTION1(function () { return _this.SUBRULE(_this.ArgumentsDefinition); });\n            _this.CONSUME(graphQlTokenMap.Colon);\n            _this.SUBRULE(_this.Type);\n            _this.OPTION2(function () {\n                return _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n            });\n        });\n        _this.ArgumentsDefinition = _this.RULE('ArgumentsDefinition', function () {\n            _this.CONSUME(graphQlTokenMap.LParen);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.InputValueDefinition); });\n            _this.CONSUME(graphQlTokenMap.RParen);\n        });\n        _this.InputValueDefinition = _this.RULE('InputValueDefinition', function () {\n            _this.OPTION(function () { return _this.SUBRULE(_this.Description); });\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.CONSUME(graphQlTokenMap.Colon);\n            _this.SUBRULE(_this.Type);\n            _this.OPTION1(function () { return _this.SUBRULE(_this.DefaultValue); });\n            _this.OPTION2(function () {\n                return _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n            });\n        });\n        _this.InterfaceTypeDefinition = _this.RULE('InterfaceTypeDefinition', function () {\n            _this.OPTION(function () { return _this.SUBRULE(_this.Description); });\n            _this.CONSUME(graphQlTokenMap.Interface);\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.OPTION2(function () {\n                return _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n            });\n            _this.OPTION3(function () { return _this.SUBRULE(_this.FieldsDefinition); });\n        });\n        _this.InterfaceTypeExtension = _this.RULE('InterfaceTypeExtension', function () {\n            _this.CONSUME(graphQlTokenMap.Extend);\n            _this.CONSUME(graphQlTokenMap.Interface);\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n                        _this.OPTION(function () { return _this.SUBRULE(_this.FieldsDefinition); });\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE1(_this.FieldsDefinition); } },\n            ]);\n        });\n        _this.UnionTypeDefinition = _this.RULE('UnionTypeDefinition', function () {\n            _this.OPTION(function () { return _this.SUBRULE(_this.Description); });\n            _this.CONSUME(graphQlTokenMap.Union);\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.OPTION1(function () {\n                return _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n            });\n            _this.OPTION2(function () { return _this.SUBRULE(_this.UnionMemberTypes); });\n        });\n        _this.UnionMemberTypes = _this.RULE('UnionMemberTypes', function () {\n            _this.CONSUME(graphQlTokenMap.Equals);\n            _this.OPTION(function () { return _this.CONSUME(graphQlTokenMap.Pipe); });\n            _this.SUBRULE(_this.NamedType);\n            _this.MANY(function () {\n                _this.CONSUME1(graphQlTokenMap.Pipe);\n                _this.SUBRULE1(_this.NamedType);\n            });\n        });\n        _this.UnionTypeExtension = _this.RULE('UnionTypeExtension', function () {\n            _this.CONSUME(graphQlTokenMap.Extend);\n            _this.CONSUME(graphQlTokenMap.Union);\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n                        _this.OPTION(function () { return _this.SUBRULE(_this.UnionMemberTypes); });\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE1(_this.UnionMemberTypes); } },\n            ]);\n        });\n        _this.EnumTypeDefinition = _this.RULE('EnumTypeDefinition', function () {\n            _this.OPTION(function () { return _this.SUBRULE(_this.Description); });\n            _this.CONSUME(graphQlTokenMap.Enum);\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.OPTION1(function () {\n                return _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n            });\n            _this.OPTION2(function () { return _this.SUBRULE(_this.EnumValuesDefinition); });\n        });\n        _this.EnumValuesDefinition = _this.RULE('EnumValuesDefinition', function () {\n            _this.CONSUME(graphQlTokenMap.LCurly);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.EnumValueDefinition); });\n            _this.CONSUME(graphQlTokenMap.RCurly);\n        });\n        _this.EnumValueDefinition = _this.RULE('EnumValueDefinition', function () {\n            _this.OPTION(function () { return _this.SUBRULE(_this.Description); });\n            _this.SUBRULE(_this.EnumValue);\n            _this.OPTION1(function () {\n                return _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n            });\n        });\n        _this.EnumTypeExtension = _this.RULE('EnumTypeExtension', function () {\n            _this.CONSUME(graphQlTokenMap.Extend);\n            _this.CONSUME(graphQlTokenMap.Enum);\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n                        _this.OPTION(function () { return _this.SUBRULE(_this.EnumValuesDefinition); });\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE1(_this.EnumValuesDefinition); } },\n            ]);\n        });\n        _this.InputObjectTypeDefinition = _this.RULE('InputObjectTypeDefinition', function () {\n            _this.OPTION(function () { return _this.SUBRULE(_this.Description); });\n            _this.CONSUME(graphQlTokenMap.Input);\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.OPTION1(function () {\n                return _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n            });\n            _this.OPTION2(function () { return _this.SUBRULE(_this.InputFieldsDefinition); });\n        });\n        _this.InputFieldsDefinition = _this.RULE('InputFieldsDefinition', function () {\n            _this.CONSUME(graphQlTokenMap.LCurly);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.InputValueDefinition); });\n            _this.CONSUME(graphQlTokenMap.RCurly);\n        });\n        _this.InputObjectTypeExtension = _this.RULE('InputObjectTypeExtension', function () {\n            _this.CONSUME(graphQlTokenMap.Extend);\n            _this.CONSUME(graphQlTokenMap.Input);\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.Directives, { ARGS: [true /* isConst */] });\n                        _this.OPTION(function () { return _this.SUBRULE1(_this.InputFieldsDefinition); });\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE(_this.InputFieldsDefinition); } },\n            ]);\n        });\n        _this.DirectiveDefinition = _this.RULE('DirectiveDefinition', function () {\n            _this.OPTION(function () { return _this.SUBRULE(_this.Description); });\n            _this.CONSUME(graphQlTokenMap.DirectiveToken);\n            _this.CONSUME(graphQlTokenMap.At);\n            _this.CONSUME(graphQlTokenMap.Name);\n            _this.OPTION1(function () { return _this.SUBRULE(_this.ArgumentsDefinition); });\n            _this.CONSUME(graphQlTokenMap.On);\n            _this.SUBRULE(_this.DirectiveLocations);\n        });\n        _this.DirectiveLocations = _this.RULE('DirectiveLocations', function () {\n            _this.OPTION(function () { return _this.CONSUME(graphQlTokenMap.Pipe); });\n            _this.SUBRULE(_this.DirectiveLocation);\n            _this.MANY(function () {\n                _this.CONSUME1(graphQlTokenMap.Pipe);\n                _this.SUBRULE1(_this.DirectiveLocation);\n            });\n        });\n        _this.DirectiveLocation = _this.RULE('DirectiveLocation', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.ExecutableDirectiveLocation); } },\n                { ALT: function () { return _this.SUBRULE(_this.TypeSystemDirectiveLocation); } },\n            ]);\n        });\n        _this.ExecutableDirectiveLocation = _this.RULE('ExecutableDirectiveLocation', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.QUERY); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.MUTATION); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.SUBSCRIPTION); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.FIELD); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.FRAGMENT_DEFINITION); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.FRAGMENT_SPREAD); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.INLINE_FRAGMENT); } },\n            ]);\n        });\n        _this.TypeSystemDirectiveLocation = _this.RULE('TypeSystemDirectiveLocation', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.SCHEMA); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.SCALAR); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.OBJECT); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.FIELD_DEFINITION); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.ARGUMENT_DEFINITION); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.INTERFACE); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.UNION); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.ENUM); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.ENUM_VALUE); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.INPUT_OBJECT); } },\n                { ALT: function () { return _this.CONSUME(graphQlTokenMap.INPUT_FIELD_DEFINITION); } },\n            ]);\n        });\n        _this.lexer = new Lexer(tokenVocab);\n        return _this;\n    }\n    return BaseGraphQlParser;\n}(Parser));\nexport { BaseGraphQlParser };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar graphQlTokens = require('./tokens').graphQlTokens;\nimport { BaseGraphQlParser } from './BaseGraphQlParser';\nimport { Parser } from 'chevrotain';\nvar StandardGraphQlParser = /** @class */ (function (_super) {\n    __extends(StandardGraphQlParser, _super);\n    function StandardGraphQlParser(options) {\n        var _this = _super.call(this, options, graphQlTokens) || this;\n        Parser.performSelfAnalysis(_this);\n        return _this;\n    }\n    return StandardGraphQlParser;\n}(BaseGraphQlParser));\nexport { StandardGraphQlParser };\n","import { tokenMatcher, } from 'chevrotain';\nimport { isCstNode } from 'helpers/chevrotain/cst';\nvar stardogGraphQlTokenMap = require('./tokens').stardogGraphQlTokenMap;\nvar _a = stardogGraphQlTokenMap, ToArgumentToken = _a.ToArgumentToken, IfArgumentToken = _a.IfArgumentToken, AliasArgumentToken = _a.AliasArgumentToken, GraphArgumentToken = _a.GraphArgumentToken, BindDirectiveToken = _a.BindDirectiveToken, ConfigDirectiveToken = _a.ConfigDirectiveToken, SkipDirectiveToken = _a.SkipDirectiveToken, IncludeDirectiveToken = _a.IncludeDirectiveToken, FilterDirectiveToken = _a.FilterDirectiveToken;\nvar conditionalDirectiveTokens = [\n    SkipDirectiveToken,\n    IncludeDirectiveToken,\n    FilterDirectiveToken,\n];\nvar sparqlReceivingStardogDirectiveTokens = [\n    BindDirectiveToken\n].concat(conditionalDirectiveTokens);\nfunction getArgumentTokenTypesForDirectiveNameToken(directiveNameToken) {\n    if (tokenMatcher(directiveNameToken, BindDirectiveToken)) {\n        return [ToArgumentToken];\n    }\n    else if (tokenMatcher(directiveNameToken, ConfigDirectiveToken)) {\n        return [AliasArgumentToken, GraphArgumentToken];\n    }\n    else if (conditionalDirectiveTokens.some(function (tokenType) {\n        return tokenMatcher(directiveNameToken, tokenType);\n    })) {\n        return [IfArgumentToken];\n    }\n    else {\n        return [];\n    }\n}\nfunction getArgumentNodes(argumentDictionary) {\n    if (!argumentDictionary || !argumentDictionary.Arguments) {\n        return [];\n    }\n    var argumentsNode = argumentDictionary.Arguments[0];\n    if (!isCstNode(argumentsNode)) {\n        return [];\n    }\n    return argumentsNode.children.Argument || []; // this should be an array of all 'Argument' nodes\n}\nfunction isSparqlReceivingStardogDirective(directiveToken) {\n    return sparqlReceivingStardogDirectiveTokens.some(function (tokenType) {\n        return tokenMatcher(directiveToken, tokenType);\n    });\n}\nexport var graphQlUtils = {\n    getArgumentNodes: getArgumentNodes,\n    getArgumentTokenTypesForDirectiveNameToken: getArgumentTokenTypesForDirectiveNameToken,\n    isSparqlReceivingStardogDirective: isSparqlReceivingStardogDirective,\n};\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { StardogSparqlParser } from '../sparql/StardogSparqlParser';\nimport { getFirstChildCstElementByRuleStack, isIToken, } from 'helpers/chevrotain/cst';\nimport { graphQlUtils } from 'graphql/utils';\nvar getArgumentNodes = graphQlUtils.getArgumentNodes, getArgumentTokenTypesForDirectiveNameToken = graphQlUtils.getArgumentTokenTypesForDirectiveNameToken, isSparqlReceivingStardogDirective = graphQlUtils.isSparqlReceivingStardogDirective;\nfunction parseSparqlExpression(stringValueToken, stardogSparqlParser) {\n    var innerExpressionImage = stringValueToken.image.slice(1, -1); // remove quotes\n    return stardogSparqlParser.parse(innerExpressionImage, stardogSparqlParser.Expression);\n}\n// Make the embedded SPARQL errors have proper locations for use in error\n// diagnostics. NOTE: This does NOT modify the locations of the error's\n// `previousToken` property. If that ends up being needed, it's a TODO.\nfunction mapSparqlErrors(sparqlErrors, tokenForOffset, offsetPadding) {\n    if (offsetPadding === void 0) { offsetPadding = 0; }\n    var tokenStartOffset = tokenForOffset.startOffset, tokenEndOffset = tokenForOffset.endOffset, tokenStartColumn = tokenForOffset.startColumn, tokenEndColumn = tokenForOffset.endColumn;\n    return sparqlErrors.map(function (error) {\n        var token = error.token;\n        var errorStartOffset = token.startOffset, errorEndOffset = token.endOffset, errorStartColumn = token.startColumn, errorEndColumn = token.endColumn;\n        return __assign({}, error, { token: __assign({}, token, { \n                // error token's offsets might be set explicitly to null\n                startOffset: tokenStartOffset + (errorStartOffset || 0) + offsetPadding, endOffset: tokenEndOffset + (errorEndOffset || 0) + offsetPadding, startColumn: tokenStartColumn + (errorStartColumn || 0) + offsetPadding, endColumn: tokenEndColumn + (errorEndColumn || 0) + offsetPadding, startLine: tokenForOffset.startLine, endLine: tokenForOffset.endLine }) });\n    });\n}\n// Checks that the right number of arguments are supplied, accumulating errors\n// otherwise.\nfunction validateDirectiveArgumentsArity(_a) {\n    var allowedArgumentTokenTypes = _a.allowedArgumentTokenTypes, directiveImage = _a.directiveImage, errorAccumulator = _a.errorAccumulator, numMinimumArguments = _a.numMinimumArguments, suppliedArgumentNodes = _a.suppliedArgumentNodes;\n    var numSuppliedArguments = suppliedArgumentNodes.length;\n    var numAllowedArguments = allowedArgumentTokenTypes.length;\n    var validArgumentsPhrase = \"valid arguments: \" + allowedArgumentTokenTypes\n        .map(function (argumentTokenType) { return \"`\" + argumentTokenType.PATTERN + \"`\"; })\n        .join(', ');\n    var errorTypeName = 'ArgumentArityError';\n    if (numSuppliedArguments < numMinimumArguments) {\n        var requiresPhrase = \"requires \" + numMinimumArguments + \" argument\" + (numMinimumArguments > 1 ? 's' : '');\n        errorAccumulator.stardogGraphQlErrors.push({\n            name: errorTypeName,\n            message: \"The \" + directiveImage + \" directive \" + requiresPhrase + \" (\" + validArgumentsPhrase + \")\",\n        });\n    }\n    else if (numSuppliedArguments > numAllowedArguments) {\n        errorAccumulator.stardogGraphQlErrors.push({\n            name: errorTypeName,\n            message: \"Too many arguments provided to \" + directiveImage + \" directive (\" + validArgumentsPhrase + \")\",\n        });\n    }\n}\n// Checks that the supplied argument names and values conform to the allowed\n// arguments of a directive and have valid embedded SPARQL.\nfunction validateDirectiveArgumentsNameAndValue(_a) {\n    var allowedArgumentTokenTypes = _a.allowedArgumentTokenTypes, directiveImage = _a.directiveImage, errorAccumulator = _a.errorAccumulator, sparqlParser = _a.sparqlParser, suppliedArgumentNodes = _a.suppliedArgumentNodes;\n    var validArgumentsPhrase = \"valid arguments: \" + allowedArgumentTokenTypes\n        .map(function (argumentTokenType) { return \"`\" + argumentTokenType.PATTERN + \"`\"; })\n        .join(', ');\n    suppliedArgumentNodes.forEach(function (argumentNode) {\n        var _a;\n        var argumentNameToken = getFirstChildCstElementByRuleStack(['Alias', 'Name'], argumentNode);\n        if (!isIToken(argumentNameToken)) {\n            // This should never be an actual possibility, but we'll be safe in\n            // case it somehow occurs.\n            return;\n        }\n        var argumentTokenTypeName = argumentNameToken.tokenType.name;\n        var isAllowedArgument = allowedArgumentTokenTypes.some(function (argumentTokenType) { return argumentTokenType.name === argumentTokenTypeName; });\n        if (!isAllowedArgument) {\n            errorAccumulator.stardogGraphQlErrors.push({\n                name: 'InvalidArgumentError',\n                message: \"Invalid argument `\" + argumentNameToken.image + \"` for \" + directiveImage + \" directive (\" + validArgumentsPhrase + \")\",\n            });\n        }\n        else {\n            // For allowed arguments, we provide embedded SPARQL parsing. Note\n            // again that we are currently *only* handling Stardog-specific\n            // directives that receive SPARQL here.\n            var argumentStringValueToken = getFirstChildCstElementByRuleStack(['Value', 'StringValue', 'StringValueToken'], argumentNode);\n            if (!isIToken(argumentStringValueToken)) {\n                // As noted above, we are currently only checking string arguments to\n                // ensure they parse as valid SPARQL expressions. We bail on\n                // non-strings.\n                return;\n            }\n            var errors = parseSparqlExpression(argumentStringValueToken, sparqlParser).errors;\n            // Possible future TODO: replace the CST nodes with those returned\n            // from the stardogSparqlParser, like we do for the IfClause and\n            // ThenClause in the SRS Parser\n            if (errors.length > 0) {\n                (_a = errorAccumulator.sparqlErrors).push.apply(_a, mapSparqlErrors(errors, argumentStringValueToken, 1));\n            }\n        }\n    });\n}\nfunction validateDirectiveArguments(_a) {\n    var validatorOptions = _a.validatorOptions, validators = _a.validators;\n    validators.forEach(function (validator) { return validator(validatorOptions); });\n}\n// Delegates to the appropriate validator for a specific directive.\nfunction validateSuppliedArgumentsForDirective(suppliedArgumentNodes, directiveNameToken, sparqlParser) {\n    var errorAccumulator = {\n        stardogGraphQlErrors: [],\n        sparqlErrors: [],\n    };\n    var allowedArgumentTokenTypes = getArgumentTokenTypesForDirectiveNameToken(directiveNameToken);\n    var directiveImage = directiveNameToken.tokenType.PATTERN;\n    validateDirectiveArguments({\n        validatorOptions: {\n            allowedArgumentTokenTypes: allowedArgumentTokenTypes,\n            directiveImage: directiveImage,\n            errorAccumulator: errorAccumulator,\n            numMinimumArguments: 1,\n            sparqlParser: sparqlParser,\n            suppliedArgumentNodes: suppliedArgumentNodes,\n        },\n        // We do things this way to be \"forward-looking.\" In the future, we may\n        // want to define custom validators for certain directives that have\n        // special rules. In that case, we could add custom validators here based\n        // on the type of the `directiveNameToken`.\n        validators: [\n            validateDirectiveArgumentsArity,\n            validateDirectiveArgumentsNameAndValue,\n        ],\n    });\n    return errorAccumulator;\n}\n// Returns a custom visitor that extends the BaseVisitor for the\n// StardogGraphQlParser. When the visitor encounters any custom Stardog\n// directive that can contain a SPARQL expression, it locates the expression\n// and ensures that it parses as valid SPARQL (by delegating to the\n// StardogSparqlParser). Similarly, the visitor applies some special checks\n// (with corresponding error messages) for Stardog-specific GraphQL directives\n// that are not built into the GraphQL grammar itself.\nexport var getStardogGraphQlVisitor = function (BaseVisitor, parserInstance) {\n    var stardogSparqlParser = new StardogSparqlParser(); // for parsing embedded SPARQL;\n    var StardogGraphQlVisitor = /** @class */ (function (_super) {\n        __extends(StardogGraphQlVisitor, _super);\n        function StardogGraphQlVisitor() {\n            var _this = _super.call(this) || this;\n            _this.sparqlErrors = [];\n            _this.stardogGraphQlErrors = [];\n            _this.visit = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                _super.prototype.visit.apply(_this, args);\n                return {\n                    sparqlErrors: _this.sparqlErrors,\n                    stardogGraphQlErrors: _this.stardogGraphQlErrors,\n                };\n            };\n            _this.Directive = function (ctx) {\n                var _a, _b;\n                if (!ctx.Name || !ctx.Name[0]) {\n                    // Somehow we have a directive with no Name token. This shouldn't be\n                    // possible, but we check just to be safe (and bail otherwise).\n                    return;\n                }\n                var directiveNameToken = ctx.Name[0];\n                // NOTE: We currently only provide special handling for Stardog-specific\n                // directives that accept SPARQL, so we bail early in all other cases.\n                // We may want to expand this later.\n                if (!isSparqlReceivingStardogDirective(directiveNameToken)) {\n                    return;\n                }\n                var suppliedArguments = getArgumentNodes(ctx);\n                var accumulatedErrors = validateSuppliedArgumentsForDirective(suppliedArguments, directiveNameToken, stardogSparqlParser);\n                if (accumulatedErrors.stardogGraphQlErrors.length > 0) {\n                    // The accumulated errors up to this point do not have stack\n                    // information. We add it here (only once, for performance reasons).\n                    var ruleStack_1 = parserInstance.getHumanReadableRuleStack();\n                    var ruleOccurrenceStack_1 = parserInstance\n                        .RULE_OCCURRENCE_STACK;\n                    (_a = _this.stardogGraphQlErrors).push.apply(_a, accumulatedErrors.stardogGraphQlErrors.map(function (partialError) { return (__assign({}, partialError, { token: directiveNameToken, context: {\n                            ruleStack: ruleStack_1,\n                            ruleOccurrenceStack: ruleOccurrenceStack_1,\n                        }, resyncedTokens: [] })); }));\n                }\n                (_b = _this.sparqlErrors).push.apply(_b, accumulatedErrors.sparqlErrors.map(function (sparqlError) { return (__assign({}, sparqlError, { name: \"SPARQL Error: \" + sparqlError.name })); }));\n            };\n            _this.$resetState = function () {\n                _this.stardogGraphQlErrors = [];\n                _this.sparqlErrors = [];\n            };\n            _this.validateVisitor();\n            return _this;\n        }\n        return StardogGraphQlVisitor;\n    }(BaseVisitor));\n    return new StardogGraphQlVisitor();\n};\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar stardogGraphQlTokens = require('./tokens').stardogGraphQlTokens;\nimport { BaseGraphQlParser } from './BaseGraphQlParser';\nimport { getStardogGraphQlVisitor } from 'graphql/StardogGraphQlVisitor';\nvar StardogGraphQlParser = /** @class */ (function (_super) {\n    __extends(StardogGraphQlParser, _super);\n    function StardogGraphQlParser(options) {\n        var _this = _super.call(this, options, stardogGraphQlTokens) || this;\n        _this.visitCst = function (cst) {\n            // To save resources while parsing, the visitor is a singleton.\n            if (!_this.stardogGraphQlVisitor) {\n                var BaseStardogGraphQlVisitor = _this.getBaseCstVisitorConstructorWithDefaults();\n                _this.stardogGraphQlVisitor = getStardogGraphQlVisitor(BaseStardogGraphQlVisitor, _this);\n            }\n            else {\n                _this.stardogGraphQlVisitor.$resetState();\n            }\n            return _this.stardogGraphQlVisitor.visit(cst, _this.input);\n        };\n        _this.parse = function (document, entryRule) {\n            if (entryRule === void 0) { entryRule = _this.Document; }\n            _this.input = _this.tokenize(document);\n            var cst = entryRule.call(_this);\n            var _a = _this.visitCst(cst), sparqlErrors = _a.sparqlErrors, stardogGraphQlErrors = _a.stardogGraphQlErrors;\n            var graphQlErrors = _this.errors;\n            return {\n                errors: graphQlErrors.concat(stardogGraphQlErrors, sparqlErrors),\n                cst: cst,\n            };\n        };\n        _this.performSelfAnalysis();\n        return _this;\n    }\n    return StardogGraphQlParser;\n}(BaseGraphQlParser));\nexport { StardogGraphQlParser };\n","export * from './BaseGraphQlParser';\nexport * from './StandardGraphQlParser';\nexport * from './StardogGraphQlParser';\nexport * from './utils';\n// Convenience imports/exports that aren't core functionality:\n// NOTE: Tokens MUST be imported using CommonJS syntax; see here: https://github.com/SAP/chevrotain/issues/345\nexport var graphqlTokens = require('./tokens');\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexport var traverse = function (root, visit) {\n    _traverse(root, null, visit);\n};\nexport var unsafeTraverse = function (root, visit) {\n    _traverse(root, null, visit, false);\n};\nexport function isCstNode(object) {\n    return Boolean(object && 'name' in object);\n}\nexport function isIToken(object) {\n    return Boolean(object && 'tokenType' in object);\n}\n// Given a chevrotain ruleStack (array of rule parser rule names) and a root\n// CstNode, attempts to walk down the tree branching out from that node by\n// following the rule stack to its end, and returns the first CstElement found\n// at that point (or undefined if the ruleStack path cannot be completed).\n// Useful to avoid lots of boilerplate.\nexport function getFirstChildCstElementByRuleStack(ruleStack, rootCstNode) {\n    if (!ruleStack || !ruleStack.length) {\n        // No stack to follow, so just return the root node provided.\n        return rootCstNode;\n    }\n    var currentCstElement = rootCstNode;\n    for (var _i = 0, ruleStack_1 = ruleStack; _i < ruleStack_1.length; _i++) {\n        var ruleName = ruleStack_1[_i];\n        if (!isCstNode(currentCstElement) ||\n            !currentCstElement.children[ruleName]) {\n            // The ruleStack was not exhausted and yet we can go no further; return\n            // `undefined`, since there is no value at the specified path.\n            return;\n        }\n        currentCstElement = currentCstElement.children[ruleName][0];\n    }\n    return currentCstElement;\n}\nvar TraverseContext = /** @class */ (function () {\n    function TraverseContext(_a) {\n        var node = _a.node, parentCtx = _a.parentCtx;\n        this.node = __assign({}, node);\n        this.parentCtx = __assign({}, parentCtx);\n    }\n    return TraverseContext;\n}());\nvar _traverse = function (root, ctx, visit, visitSafely) {\n    if (ctx === void 0) { ctx = new TraverseContext({ node: root }); }\n    if (visitSafely === void 0) { visitSafely = true; }\n    if (!isCstNode(root)) {\n        // must be a token\n        return visit(visitSafely ? __assign({}, ctx) : ctx);\n    }\n    // is a grammar rule node\n    var children = root.children;\n    Object.keys(children).forEach(function (key) {\n        var childType = children[key];\n        if (!childType.length) {\n            return;\n        }\n        childType.forEach(function (child) {\n            var childCtx = visitSafely\n                ? new TraverseContext({ node: child, parentCtx: ctx })\n                : { node: child, parentCtx: ctx };\n            var afterVisit = function (transformedCtx) {\n                var nextCtx = childCtx;\n                if (transformedCtx) {\n                    nextCtx = visitSafely\n                        ? new TraverseContext({\n                            node: transformedCtx.node,\n                            parentCtx: transformedCtx.parentCtx,\n                        })\n                        : {\n                            node: transformedCtx.node,\n                            parentCtx: transformedCtx.parentCtx,\n                        };\n                }\n                _traverse(child, nextCtx, visit, visitSafely);\n            };\n            visit(childCtx, afterVisit);\n        });\n    });\n};\n"],"sourceRoot":""}