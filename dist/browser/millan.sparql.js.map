{"version":3,"sources":["webpack://millan.[name]/webpack/universalModuleDefinition","webpack://millan.[name]/webpack/bootstrap","webpack://millan.[name]/./src/sparql/StardogSparqlParser.ts","webpack://millan.[name]/./src/sparql/W3SpecSparqlParser.ts","webpack://millan.[name]/./src/sparql/index.ts","webpack://millan.[name]/./src/sparql/BaseSparqlParser.ts"],"names":["root","factory","exports","module","define","amd","self","this","webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","5","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","oldJsonpFunction","slice","__webpack_exports__","StardogSparqlParser","extendStatics","_BaseSparqlParser__WEBPACK_IMPORTED_MODULE_0__","chevrotain__WEBPACK_IMPORTED_MODULE_1__","__extends","b","setPrototypeOf","__proto__","Array","__","constructor","_a","sparqlTokenMap","stardogSparqlTokens","_super","options","tokens","shouldSkipAnalysis","_this","Query","OVERRIDE_RULE","OR","ALT","SUBRULE","SelectQuery","ConstructQuery","DescribeQuery","AskQuery","PathQuery","ValuesClause","RULE","PathSpec","MANY","DatasetClause","CONSUME","START","PathTerminal","END","SUBRULE1","Via","OPTION","MaxLength","SolutionModifier","VIA","GroupGraphPattern","Var","Path","Equals","Constant","PATHS","PATHS_SHORTEST","PATHS_ALL","OPTION1","CYCLIC","GraphPatternNotTriples","GroupOrUnionGraphPattern","OptionalGraphPattern","MinusGraphPattern","GraphGraphPattern","ServiceGraphPattern","Filter","Bind","Unnest","InlineData","TriplesSameSubject","VarOrTerm","PropertyListNotEmpty","EmbeddedTriplePattern","ARGS","TriplesNode","PropertyList","disallowEdgeProperties","Verb","ObjectList","GATE","EmbeddedPropertyList","Semicolon","OR1","LCurly","RCurly","GraphNode","TriplesSameSubjectPath","PropertyListPathNotEmpty","TriplesNodePath","PropertyListPath","VerbPath","VerbSimple","ObjectListPath","EmbeddedPropertyListPath","ObjectPath","OR2","OR3","SUBRULE2","GraphNodePath","VarOrTermOrEmbeddedTriplePattern","LEmbed","VarOrBlankNodeOrIriOrLit","REmbed","GraphTerm","BIND","LParen","ExpressionOrEmbeddedTriplePattern","AS","RParen","Expression","BlankNode","iri","RDFLiteral","NumericLiteral","BooleanLiteral","UNNEST","BuiltInCall","Aggregate","BuiltInCall_STR","BuiltInCall_LANG","BuiltInCall_LANGMATCHES","BuiltInCall_DATATYPE","BuiltInCall_BOUND","BuiltInCall_IRI","BuiltInCall_URI","BuiltInCall_BNODE","BuiltInCall_RAND","BuiltInCall_ABS","BuiltInCall_CEIL","BuiltInCall_FLOOR","BuiltInCall_ROUND","BuiltInCall_CONCAT","SubstringExpression","BuiltInCall_STRLEN","StrReplaceExpression","BuiltInCall_UCASE","BuiltInCall_LCASE","BuiltInCall_ENCODE_FOR_URI","BuiltInCall_CONTAINS","BuiltInCall_STRSTARTS","BuiltInCall_STRENDS","BuiltInCall_STRBEFORE","BuiltInCall_STRAFTER","BuiltInCall_YEAR","BuiltInCall_MONTH","BuiltInCall_DAY","BuiltInCall_HOURS","BuiltInCall_MINUTES","BuiltInCall_SECONDS","BuiltInCall_TIMEZONE","BuiltInCall_TZ","BuiltInCall_NOW","BuiltInCall_UUID","BuiltInCall_STRUUID","BuiltInCall_MD5","BuiltInCall_SHA1","BuiltInCall_SHA256","BuiltInCall_SHA384","BuiltInCall_SHA512","BuiltInCall_COALESCE","BuiltInCall_IF","BuiltInCall_STRLANG","BuiltInCall_STRDT","BuiltInCall_sameTerm","BuiltInCall_isIRI","BuiltInCall_isURI","BuiltInCall_isBLANK","BuiltInCall_isLITERAL","BuiltInCall_isNUMERIC","RegexExpression","ExistsFunction","NotExistsFunction","StardogOrCustomFunction","Unknown","ExpressionList","ConstructTemplate","Quads","performSelfAnalysis","baseTokens","W3SpecSparqlParser_W3SpecSparqlParser","W3SpecSparqlParser","api","BaseSparqlParser","sparqlTokens","keywords","terminals","chevrotain__WEBPACK_IMPORTED_MODULE_0__","__assign","assign","arguments","log","args","_i","tokenVocab","recoveryEnabled","outputCst","config","tokenize","document","lexer","parse","entryRule","SparqlDoc","input","cst","errors","getInput","parseGroupGraphPattern","parseTriplesBlock","TriplesBlock","Prologue","QueryUnit","UpdateUnit","MAX_LENGTH","INTEGER","Update","AT_LEAST_ONE","BaseDecl","PrefixDecl","BASE","IRIREF","PREFIX","PNAME_NS","SelectClause","WhereClause","SubSelect","SELECT","DISTINCT","REDUCED","Star","CONSTRUCT","MANY1","WHERE","TriplesTemplate","DESCRIBE","VarOrIri","ASK","FROM","DefaultGraphClause","NamedGraphClause","SourceSelector","NAMED","GroupClause","HavingClause","OPTION2","OrderClause","OPTION3","LimitOffsetClause","GROUP_BY","GroupCondition","FunctionCall","HAVING","HavingCondition","Constraint","ORDER_BY","OrderCondition","ASC","DESC","BrackettedExpression","LimitClause","OffsetClause","OFFSET","LIMIT","VALUES","DataBlock","Update1","Load","Clear","Drop","Add","Move","Copy","Create","InsertData","DeleteData","DeleteWhere","Modify","LOAD","SILENT","INTO","GraphRef","CLEAR","GraphRefAll","DROP","CREATE","ADD","GraphOrDefault","TO","MOVE","COPY","INSERT_DATA","QuadData","DELETE_DATA","DELETE_WHERE","QuadPattern","WITH","DeleteClause","InsertClause","UsingClause","DELETE","INSERT","USING","DEFAULT","GRAPH","ALL","QuadsNotTriples","Period","GroupGraphPatternSub","OPTIONAL","SERVICE","InlineDataOneVar","InlineDataFull","DataBlockValue","NIL","CONSUME1","MANY2","UNDEF","MINUS","UNION","FILTER","ArgList","Comma","ConstructTriples","A","AT_LEAST_ONE_SEP","SEP","DEF","PathAlternative","Pipe","PathSequence","ForwardSlash","PathEltOrInverse","PathElt","PathPrimary","PathMod","Caret","QuestionMark","Plus","Bang","PathNegatedPropertySet","PathOneInPropertySet","MANY_SEP","Integer","Collection","BlankNodePropertyList","LBracket","RBracket","CollectionPath","BlankNodePropertyListPath","VAR1","VAR2","ConditionalOrExpression","LogicalOr","ConditionalAndExpression","LogicalAnd","ValueLogical","RelationalExpression","NumericExpression","NotEquals","LessThan","GreaterThan","LessThanEquals","GreaterThanEquals","IN","NOT_IN","AdditiveExpression","MultiplicativeExpression","Minus","NumericLiteralPositive","NumericLiteralNegative","OR4","UnaryExpression","PrimaryExpression","SUBRULE3","iriOrFunction","STR","LANG","LANGMATCHES","DATATYPE","BOUND","IRI","URI","BNODE","RAND","ABS","CEIL","FLOOR","ROUND","CONCAT","STRLEN","UCASE","LCASE","ENCODE_FOR_URI","CONTAINS","STRSTARTS","STRENDS","STRBEFORE","STRAFTER","YEAR","MONTH","DAY","HOURS","MINUTES","SECONDS","TIMEZONE","TZ","NOW","UUID","STRUUID","MD5","SHA1","SHA256","SHA384","SHA512","COALESCE","IF","STRLANG","STRDT","sameTerm","isIRI","isURI","isBLANK","isLITERAL","isNUMERIC","REGEX","SUBSTR","REPLACE","CONSUME2","EXISTS","NOT_EXISTS","Count","COUNT","CONSUME3","Sum","SUM","Min","MIN","Max","MAX","Avg","AVG","Sample","SAMPLE","GroupConcat","GROUP_CONCAT","SEPARATOR","String","LANGTAG","DoubleCaret","NumericLiteralUnsigned","DECIMAL","DOUBLE","INTEGER_POSITIVE","DECIMAL_POSITIVE","DOUBLE_POSITIVE","INTEGER_NEGATIVE","DECIMAL_NEGATIVE","DOUBLE_NEGATIVE","TRUE","FALSE","STRING_LITERAL1","STRING_LITERAL2","STRING_LITERAL_LONG1","STRING_LITERAL_LONG2","PrefixedName","PNAME_LN","BLANK_NODE_LABEL","ANON"],"mappings":"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","file":"millan.sparql.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"sparql\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sparql\"] = factory();\n\telse\n\t\troot[\"millan\"] = root[\"millan\"] || {}, root[\"millan\"][\"sparql\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t5: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([16,0,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar _a = require('./tokens'), sparqlTokenMap = _a.sparqlTokenMap, stardogSparqlTokens = _a.stardogSparqlTokens;\nimport { BaseSparqlParser } from './BaseSparqlParser';\nimport { Parser } from 'chevrotain';\nvar StardogSparqlParser = /** @class */ (function (_super) {\n    __extends(StardogSparqlParser, _super);\n    function StardogSparqlParser(options, tokens, shouldSkipAnalysis) {\n        if (tokens === void 0) { tokens = stardogSparqlTokens; }\n        var _this = _super.call(this, options, tokens) || this;\n        _this.Query = _this.OVERRIDE_RULE('Query', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.SelectQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.ConstructQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.DescribeQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.AskQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.PathQuery); } },\n            ]);\n            _this.SUBRULE(_this.ValuesClause);\n        });\n        _this.PathQuery = _this.RULE('PathQuery', function () {\n            _this.SUBRULE(_this.PathSpec);\n            _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n            _this.CONSUME(sparqlTokenMap.START);\n            _this.SUBRULE(_this.PathTerminal);\n            _this.CONSUME(sparqlTokenMap.END);\n            _this.SUBRULE1(_this.PathTerminal);\n            _this.SUBRULE(_this.Via);\n            _this.OPTION(function () { return _this.SUBRULE(_this.MaxLength); });\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.Via = _this.RULE('Via', function () {\n            _this.CONSUME(sparqlTokenMap.VIA);\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.GroupGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.Path); } },\n            ]);\n        });\n        _this.PathTerminal = _this.RULE('PathTerminal', function () {\n            _this.SUBRULE(_this.Var);\n            _this.OPTION(function () {\n                _this.OR([\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.Equals);\n                            _this.SUBRULE(_this.Constant);\n                        },\n                    },\n                    { ALT: function () { return _this.SUBRULE(_this.GroupGraphPattern); } },\n                ]);\n            });\n        });\n        _this.PathSpec = _this.RULE('PathSpec', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PATHS); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PATHS_SHORTEST); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PATHS_ALL); } },\n            ]);\n            _this.OPTION1(function () { return _this.CONSUME(sparqlTokenMap.CYCLIC); });\n        });\n        _this.GraphPatternNotTriples = _this.OVERRIDE_RULE('GraphPatternNotTriples', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.GroupOrUnionGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.OptionalGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.MinusGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.GraphGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.ServiceGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.Filter); } },\n                { ALT: function () { return _this.SUBRULE(_this.Bind); } },\n                { ALT: function () { return _this.SUBRULE(_this.Unnest); } },\n                { ALT: function () { return _this.SUBRULE(_this.InlineData); } },\n            ]);\n        });\n        _this.TriplesSameSubject = _this.OVERRIDE_RULE('TriplesSameSubject', function () {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.VarOrTerm);\n                        _this.SUBRULE(_this.PropertyListNotEmpty);\n                    },\n                },\n                {\n                    ALT: function () {\n                        // NOTE: Intentionally does not conform to the SPARQL* spec.\n                        // Stardog does not allow nesting of embedded triples.\n                        _this.SUBRULE(_this.EmbeddedTriplePattern);\n                        _this.SUBRULE1(_this.PropertyListNotEmpty, { ARGS: [true] });\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.TriplesNode);\n                        _this.SUBRULE(_this.PropertyList);\n                    },\n                },\n            ]);\n        });\n        // NOTE: Intentionally does not conform to the SPARQL* spec.\n        // Stardog does not allow embedded triples with object lists.\n        _this.PropertyListNotEmpty = _this.OVERRIDE_RULE('PropertyListNotEmpty', function (disallowEdgeProperties) {\n            _this.SUBRULE(_this.Verb);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.ObjectList);\n                    },\n                },\n                {\n                    GATE: function () { return !disallowEdgeProperties; },\n                    ALT: function () {\n                        _this.SUBRULE(_this.EmbeddedPropertyList);\n                        _this.SUBRULE(_this.Object);\n                    },\n                },\n            ]);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.SUBRULE1(_this.Verb);\n                    _this.OR1([\n                        {\n                            ALT: function () {\n                                _this.SUBRULE1(_this.ObjectList);\n                            },\n                        },\n                        {\n                            GATE: function () { return !disallowEdgeProperties; },\n                            ALT: function () {\n                                _this.SUBRULE1(_this.EmbeddedPropertyList);\n                                _this.SUBRULE1(_this.Object);\n                            },\n                        },\n                    ]);\n                });\n            });\n        });\n        // NOTE: Intentionally does not conform to the SPARQL* spec.\n        // Stardog does not allow nesting of embedded triples.\n        _this.EmbeddedPropertyList = _this.RULE('EmbeddedPropertyList', function () {\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.SUBRULE(_this.PropertyListNotEmpty, { ARGS: [true] });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.Object = _this.OVERRIDE_RULE('Object', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.GraphNode); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.EmbeddedTriplePattern); },\n                },\n            ]);\n        });\n        _this.TriplesSameSubjectPath = _this.OVERRIDE_RULE('TriplesSameSubjectPath', function () {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.VarOrTerm);\n                        _this.SUBRULE(_this.PropertyListPathNotEmpty);\n                    },\n                },\n                {\n                    ALT: function () {\n                        // NOTE: Intentionally does not conform to the SPARQL* spec.\n                        // Stardog does not allow nesting of embedded triples.\n                        _this.SUBRULE(_this.EmbeddedTriplePattern);\n                        _this.SUBRULE1(_this.PropertyListPathNotEmpty, { ARGS: [true] });\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.TriplesNodePath);\n                        _this.SUBRULE(_this.PropertyListPath);\n                    },\n                },\n            ]);\n        });\n        // NOTE: Intentionally does not conform to the SPARQL* spec.\n        // Stardog does not allow embedded triples with paths or object lists.\n        _this.PropertyListPathNotEmpty = _this.OVERRIDE_RULE('PropertyListPathNotEmpty', function (disallowEdgeProperties) {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.OR1([\n                            { ALT: function () { return _this.SUBRULE(_this.VerbPath); } },\n                            { ALT: function () { return _this.SUBRULE1(_this.VerbSimple); } },\n                        ]);\n                        _this.SUBRULE(_this.ObjectListPath);\n                    },\n                },\n                {\n                    GATE: function () { return !disallowEdgeProperties; },\n                    ALT: function () {\n                        _this.SUBRULE(_this.Verb);\n                        _this.SUBRULE(_this.EmbeddedPropertyListPath);\n                        _this.SUBRULE(_this.ObjectPath);\n                    },\n                },\n            ]);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.OR2([\n                        {\n                            ALT: function () {\n                                _this.OR3([\n                                    { ALT: function () { return _this.SUBRULE1(_this.VerbPath); } },\n                                    { ALT: function () { return _this.SUBRULE2(_this.VerbSimple); } },\n                                ]);\n                                _this.SUBRULE1(_this.ObjectListPath);\n                            },\n                        },\n                        {\n                            GATE: function () { return !disallowEdgeProperties; },\n                            ALT: function () {\n                                _this.SUBRULE1(_this.Verb);\n                                _this.SUBRULE1(_this.EmbeddedPropertyListPath);\n                                _this.SUBRULE1(_this.ObjectPath);\n                            },\n                        },\n                    ]);\n                });\n            });\n        });\n        // NOTE: Intentionally does not conform to the SPARQL* spec.\n        // Stardog does not allow nesting of embedded triples.\n        _this.EmbeddedPropertyListPath = _this.RULE('EmbeddedPropertyListPath', function () {\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.SUBRULE(_this.PropertyListPathNotEmpty, { ARGS: [true] });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.GraphNodePath = _this.OVERRIDE_RULE('GraphNodePath', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VarOrTermOrEmbeddedTriplePattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.TriplesNodePath); } },\n            ]);\n        });\n        // NOTE: Intentionally does not conform to the SPARQL* spec. Stardog does not\n        // allow nesting of embedded triples.\n        _this.EmbeddedTriplePattern = _this.RULE('EmbeddedTriplePattern', function () {\n            _this.CONSUME(sparqlTokenMap.LEmbed);\n            _this.SUBRULE(_this.VarOrBlankNodeOrIriOrLit);\n            _this.SUBRULE(_this.Verb);\n            _this.SUBRULE1(_this.VarOrBlankNodeOrIriOrLit);\n            _this.CONSUME(sparqlTokenMap.REmbed);\n        });\n        _this.VarOrTermOrEmbeddedTriplePattern = _this.RULE('VarOrTermOrEmbeddedTriplePattern', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.GraphTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.EmbeddedTriplePattern); } },\n            ]);\n        });\n        _this.Bind = _this.OVERRIDE_RULE('Bind', function () {\n            _this.CONSUME(sparqlTokenMap.BIND);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.ExpressionOrEmbeddedTriplePattern);\n            _this.CONSUME(sparqlTokenMap.AS);\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.ExpressionOrEmbeddedTriplePattern = _this.RULE('ExpressionOrEmbeddedTriplePattern', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.Expression); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.EmbeddedTriplePattern); },\n                },\n            ]);\n        });\n        // NOTE: This is nearly equivalent to VarOrTerm, but excludes NIL.\n        _this.VarOrBlankNodeOrIriOrLit = _this.RULE('VarOrBlankNodeOrIriOrLit', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n            ]);\n        });\n        _this.Unnest = _this.RULE('Unnest', function () {\n            _this.CONSUME(sparqlTokenMap.UNNEST);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.AS);\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall = _this.OVERRIDE_RULE('BuiltInCall', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Aggregate); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LANG); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LANGMATCHES); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_DATATYPE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_BOUND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_IRI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_URI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_BNODE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_RAND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ABS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CEIL); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_FLOOR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ROUND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CONCAT); } },\n                { ALT: function () { return _this.SUBRULE(_this.SubstringExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRLEN); } },\n                { ALT: function () { return _this.SUBRULE(_this.StrReplaceExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_UCASE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LCASE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ENCODE_FOR_URI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CONTAINS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRSTARTS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRENDS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRBEFORE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRAFTER); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_YEAR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MONTH); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_DAY); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_HOURS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MINUTES); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SECONDS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_TIMEZONE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_TZ); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_NOW); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_UUID); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRUUID); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MD5); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA1); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA256); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA384); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA512); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_COALESCE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_IF); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRLANG); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRDT); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_sameTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isIRI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isURI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isBLANK); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isLITERAL); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isNUMERIC); } },\n                { ALT: function () { return _this.SUBRULE(_this.RegexExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.ExistsFunction); } },\n                { ALT: function () { return _this.SUBRULE(_this.NotExistsFunction); } },\n                // Stardog has some additional built-in functions, and supports user-defined custom functions\n                { ALT: function () { return _this.SUBRULE(_this.StardogOrCustomFunction); } },\n            ]);\n        });\n        _this.StardogOrCustomFunction = _this.RULE('StardogOrCustomFunction', function () {\n            _this.CONSUME(sparqlTokenMap.Unknown);\n            _this.SUBRULE(_this.ExpressionList);\n        });\n        _this.ConstructTemplate = _this.OVERRIDE_RULE('ConstructTemplate', function () {\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.OPTION(function () {\n                // Stardog supports the request of Quads in a Construct template. See Stardog issue #675\n                return _this.SUBRULE(_this.Quads);\n            });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        if (!shouldSkipAnalysis) {\n            Parser.performSelfAnalysis(_this);\n        }\n        return _this;\n    }\n    return StardogSparqlParser;\n}(BaseSparqlParser));\nexport { StardogSparqlParser };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar baseTokens = require('./tokens').baseTokens;\nimport { BaseSparqlParser } from './BaseSparqlParser';\nimport { Parser } from 'chevrotain';\nvar W3SpecSparqlParser = /** @class */ (function (_super) {\n    __extends(W3SpecSparqlParser, _super);\n    function W3SpecSparqlParser(options) {\n        var _this = _super.call(this, options, baseTokens) || this;\n        Parser.performSelfAnalysis(_this);\n        return _this;\n    }\n    return W3SpecSparqlParser;\n}(BaseSparqlParser));\nexport { W3SpecSparqlParser };\n","export * from './BaseSparqlParser';\nexport * from './W3SpecSparqlParser';\nexport * from './StardogSparqlParser';\n// Convenience imports/exports that aren't core functionality:\n// NOTE: Tokens MUST be imported using CommonJS syntax; see here: https://github.com/SAP/chevrotain/issues/345\nexport var sparqlTokens = require('./tokens');\nexport var keywords = require('./keywords').keywords;\nexport var terminals = require('./terminals').terminals;\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar sparqlTokenMap = require('./tokens').sparqlTokenMap;\nimport { Parser, Lexer, } from 'chevrotain';\n// @ts-ignore: debug logging\nfunction log() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    // console.log(...args);\n}\nvar BaseSparqlParser = /** @class */ (function (_super) {\n    __extends(BaseSparqlParser, _super);\n    function BaseSparqlParser(options, tokenVocab) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, tokenVocab, __assign({ recoveryEnabled: true, outputCst: true }, options.config)) || this;\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        _this.parse = function (document, entryRule) {\n            if (entryRule === void 0) { entryRule = _this.SparqlDoc; }\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = entryRule.call(_this);\n            var errors = _this.errors;\n            return {\n                errors: errors,\n                cst: cst,\n            };\n        };\n        _this.getInput = function () {\n            return _this.input;\n        };\n        _this.parseGroupGraphPattern = function (document) {\n            return _this.parse(document, _this.GroupGraphPattern);\n        };\n        _this.parseTriplesBlock = function (document) {\n            return _this.parse(document, _this.TriplesBlock);\n        };\n        // NOTE: For the sake of usability in text editors/IDEs, this parser encodes\n        // a grammar that is slightly different from the official SPARQL spec. The\n        // main differences are in the `SparqlDoc`, rule, the `Prologue` rule, and\n        // the `Update` rule. Essentially, the grammar encoded by this parser should\n        // allow any number of interspered Prologues (PREFIX/BASE), QueryUnits, and\n        // UpdateUnits, so that, e.g., this is valid:\n        //\n        //  select * { ?s ?p ?o }\n        //  prefix foo: <bar>\n        //  clear all\n        //  prefix x: <y>\n        //  construct { ?s ?p ?o }\n        //  ask { ?s ?p ?o }\n        //\n        // This is not valid according to the official spec. However, line 1 is\n        // valid, lines 2-3 are valid, lines 4-5 are valid, and line 6 is valid. In a\n        // text editor, a user might want to select and execute only those lines.\n        _this.SparqlDoc = _this.RULE('SparqlDoc', function () {\n            log('SparqlDoc');\n            _this.MANY(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.SUBRULE(_this.Prologue); } },\n                    { ALT: function () { return _this.SUBRULE(_this.QueryUnit); } },\n                    { ALT: function () { return _this.SUBRULE(_this.UpdateUnit); } },\n                ]);\n            });\n        });\n        _this.QueryUnit = _this.RULE('QueryUnit', function () {\n            log('QueryUnit');\n            _this.SUBRULE(_this.Query);\n        });\n        _this.Query = _this.RULE('Query', function () {\n            log('Query');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.SelectQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.ConstructQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.DescribeQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.AskQuery); } },\n            ]);\n            _this.SUBRULE(_this.ValuesClause);\n        });\n        _this.Constant = _this.RULE('Constant', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n            ]);\n        });\n        _this.MaxLength = _this.RULE('MaxLength', function () {\n            _this.CONSUME(sparqlTokenMap.MAX_LENGTH);\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.UpdateUnit = _this.RULE('UpdateUnit', function () {\n            log('UpdateUnit');\n            _this.SUBRULE(_this.Update);\n        });\n        _this.Prologue = _this.RULE('Prologue', function () {\n            log('Prologue');\n            _this.AT_LEAST_ONE(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.SUBRULE(_this.BaseDecl); } },\n                    { ALT: function () { return _this.SUBRULE(_this.PrefixDecl); } },\n                ]);\n            });\n        });\n        _this.BaseDecl = _this.RULE('BaseDecl', function () {\n            log('BaseDecl');\n            _this.CONSUME(sparqlTokenMap.BASE);\n            _this.CONSUME(sparqlTokenMap.IRIREF);\n        });\n        _this.PrefixDecl = _this.RULE('PrefixDecl', function () {\n            log('PrefixDecl');\n            _this.CONSUME(sparqlTokenMap.PREFIX);\n            _this.CONSUME(sparqlTokenMap.PNAME_NS);\n            _this.CONSUME(sparqlTokenMap.IRIREF);\n        });\n        _this.SelectQuery = _this.RULE('SelectQuery', function () {\n            log('SelectQuery');\n            _this.SUBRULE(_this.SelectClause);\n            _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n            _this.SUBRULE(_this.WhereClause);\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.SubSelect = _this.RULE('SubSelect', function () {\n            log('SubSelect');\n            _this.SUBRULE(_this.SelectClause);\n            _this.SUBRULE(_this.WhereClause);\n            _this.SUBRULE(_this.SolutionModifier);\n            _this.SUBRULE(_this.ValuesClause);\n        });\n        _this.SelectClause = _this.RULE('SelectClause', function () {\n            log('SelectClause');\n            _this.CONSUME(sparqlTokenMap.SELECT);\n            _this.OPTION(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.CONSUME(sparqlTokenMap.DISTINCT); } },\n                    { ALT: function () { return _this.CONSUME(sparqlTokenMap.REDUCED); } },\n                ]);\n            });\n            _this.OR1([\n                {\n                    ALT: function () {\n                        _this.AT_LEAST_ONE(function () {\n                            return _this.OR2([\n                                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                                {\n                                    ALT: function () {\n                                        _this.CONSUME(sparqlTokenMap.LParen);\n                                        _this.SUBRULE(_this.Expression);\n                                        _this.CONSUME(sparqlTokenMap.AS);\n                                        _this.SUBRULE1(_this.Var);\n                                        _this.CONSUME(sparqlTokenMap.RParen);\n                                    },\n                                },\n                            ]);\n                        });\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n            ]);\n        });\n        _this.ConstructQuery = _this.RULE('ConstructQuery', function () {\n            _this.CONSUME(sparqlTokenMap.CONSTRUCT);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.ConstructTemplate);\n                        _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n                        _this.SUBRULE(_this.WhereClause);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.MANY1(function () { return _this.SUBRULE1(_this.DatasetClause); });\n                        _this.CONSUME(sparqlTokenMap.WHERE);\n                        _this.CONSUME(sparqlTokenMap.LCurly);\n                        _this.OPTION(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n                        _this.CONSUME(sparqlTokenMap.RCurly);\n                    },\n                },\n            ]);\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.DescribeQuery = _this.RULE('DescribeQuery', function () {\n            log('DescribeQuery');\n            _this.CONSUME(sparqlTokenMap.DESCRIBE);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.VarOrIri); });\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n            ]);\n            _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n            _this.OPTION(function () { return _this.SUBRULE(_this.WhereClause); });\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.AskQuery = _this.RULE('AskQuery', function () {\n            log('AskQuery');\n            _this.CONSUME(sparqlTokenMap.ASK);\n            _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n            _this.SUBRULE(_this.WhereClause);\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.DatasetClause = _this.RULE('DatasetClause', function () {\n            log('DatasetClause');\n            _this.CONSUME(sparqlTokenMap.FROM);\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.DefaultGraphClause); } },\n                { ALT: function () { return _this.SUBRULE(_this.NamedGraphClause); } },\n            ]);\n        });\n        _this.DefaultGraphClause = _this.RULE('DefaultGraphClause', function () {\n            log('DefaultGraphClause');\n            _this.SUBRULE(_this.SourceSelector);\n        });\n        _this.NamedGraphClause = _this.RULE('NamedGraphClause', function () {\n            log('NamedGraphClause');\n            _this.CONSUME(sparqlTokenMap.NAMED);\n            _this.SUBRULE(_this.SourceSelector);\n        });\n        _this.SourceSelector = _this.RULE('SourceSelector', function () {\n            log('SourceSelector');\n            _this.SUBRULE(_this.iri);\n        });\n        _this.WhereClause = _this.RULE('WhereClause', function () {\n            log('WhereClause');\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.WHERE); });\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.SolutionModifier = _this.RULE('SolutionModifier', function () {\n            log('SolutionModifier');\n            _this.OPTION(function () { return _this.SUBRULE(_this.GroupClause); });\n            _this.OPTION1(function () { return _this.SUBRULE(_this.HavingClause); });\n            _this.OPTION2(function () { return _this.SUBRULE(_this.OrderClause); });\n            _this.OPTION3(function () { return _this.SUBRULE(_this.LimitOffsetClause); });\n        });\n        _this.GroupClause = _this.RULE('GroupClause', function () {\n            log('GroupClause');\n            _this.CONSUME(sparqlTokenMap.GROUP_BY);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.GroupCondition); });\n        });\n        _this.GroupCondition = _this.RULE('GroupCondition', function () {\n            log('GroupCondition');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall); } },\n                { ALT: function () { return _this.SUBRULE(_this.FunctionCall); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Expression);\n                        _this.OPTION(function () {\n                            _this.CONSUME(sparqlTokenMap.AS);\n                            _this.SUBRULE(_this.Var);\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE1(_this.Var); } },\n            ]);\n        });\n        _this.HavingClause = _this.RULE('HavingClause', function () {\n            log('HavingClause');\n            _this.CONSUME(sparqlTokenMap.HAVING);\n            _this.SUBRULE(_this.HavingCondition);\n        });\n        _this.HavingCondition = _this.RULE('HavingCondition', function () {\n            log('HavingCondition');\n            _this.SUBRULE(_this.Constraint);\n        });\n        _this.OrderClause = _this.RULE('OrderClause', function () {\n            log('OrderClause');\n            _this.CONSUME(sparqlTokenMap.ORDER_BY);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.OrderCondition); });\n        });\n        _this.OrderCondition = _this.RULE('OrderCondition', function () {\n            log('OrderCondition');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.OR1([\n                            { ALT: function () { return _this.CONSUME(sparqlTokenMap.ASC); } },\n                            { ALT: function () { return _this.CONSUME(sparqlTokenMap.DESC); } },\n                        ]);\n                        _this.SUBRULE(_this.BrackettedExpression);\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE(_this.Constraint); } },\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n            ]);\n        });\n        _this.LimitOffsetClause = _this.RULE('LimitOffsetClause', function () {\n            log('LimitOffsetClause');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.LimitClause);\n                        _this.OPTION(function () { return _this.SUBRULE(_this.OffsetClause); });\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE1(_this.OffsetClause);\n                        _this.OPTION1(function () { return _this.SUBRULE1(_this.LimitClause); });\n                    },\n                },\n            ]);\n        });\n        _this.OffsetClause = _this.RULE('OffsetClause', function () {\n            log('OffsetClause');\n            _this.CONSUME(sparqlTokenMap.OFFSET);\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.LimitClause = _this.RULE('LimitClause', function () {\n            log('LimitClause');\n            _this.CONSUME(sparqlTokenMap.LIMIT);\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.ValuesClause = _this.RULE('ValuesClause', function () {\n            log('ValuesClause');\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.VALUES);\n                _this.SUBRULE(_this.DataBlock);\n            });\n        });\n        _this.Update = _this.RULE('Update', function () {\n            log('Update');\n            _this.SUBRULE(_this.Update1);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.SUBRULE(_this.Update);\n            });\n        });\n        _this.Update1 = _this.RULE('Update1', function () {\n            log('Update1');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Load); } },\n                { ALT: function () { return _this.SUBRULE(_this.Clear); } },\n                { ALT: function () { return _this.SUBRULE(_this.Drop); } },\n                { ALT: function () { return _this.SUBRULE(_this.Add); } },\n                { ALT: function () { return _this.SUBRULE(_this.Move); } },\n                { ALT: function () { return _this.SUBRULE(_this.Copy); } },\n                { ALT: function () { return _this.SUBRULE(_this.Create); } },\n                { ALT: function () { return _this.SUBRULE(_this.InsertData); } },\n                { ALT: function () { return _this.SUBRULE(_this.DeleteData); } },\n                { ALT: function () { return _this.SUBRULE(_this.DeleteWhere); } },\n                { ALT: function () { return _this.SUBRULE(_this.Modify); } },\n            ]);\n        });\n        _this.Load = _this.RULE('Load', function () {\n            log('Load');\n            _this.CONSUME(sparqlTokenMap.LOAD);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.iri);\n            _this.OPTION1(function () {\n                _this.CONSUME(sparqlTokenMap.INTO);\n                _this.SUBRULE(_this.GraphRef);\n            });\n        });\n        _this.Clear = _this.RULE('Clear', function () {\n            log('Clear');\n            _this.CONSUME(sparqlTokenMap.CLEAR);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphRefAll);\n        });\n        _this.Drop = _this.RULE('Drop', function () {\n            log('Drop');\n            _this.CONSUME(sparqlTokenMap.DROP);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphRefAll);\n        });\n        _this.Create = _this.RULE('Create', function () {\n            log('Create');\n            _this.CONSUME(sparqlTokenMap.CREATE);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphRefAll);\n        });\n        _this.Add = _this.RULE('Add', function () {\n            log('Add');\n            _this.CONSUME(sparqlTokenMap.ADD);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphOrDefault);\n            _this.CONSUME(sparqlTokenMap.TO);\n            _this.SUBRULE1(_this.GraphOrDefault);\n        });\n        _this.Move = _this.RULE('Move', function () {\n            log('Move');\n            _this.CONSUME(sparqlTokenMap.MOVE);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphOrDefault);\n            _this.CONSUME(sparqlTokenMap.TO);\n            _this.SUBRULE1(_this.GraphOrDefault);\n        });\n        _this.Copy = _this.RULE('Copy', function () {\n            log('Copy');\n            _this.CONSUME(sparqlTokenMap.COPY);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphOrDefault);\n            _this.CONSUME(sparqlTokenMap.TO);\n            _this.SUBRULE1(_this.GraphOrDefault);\n        });\n        _this.InsertData = _this.RULE('InsertData', function () {\n            log('InsertData');\n            _this.CONSUME(sparqlTokenMap.INSERT_DATA);\n            _this.SUBRULE(_this.QuadData);\n        });\n        _this.DeleteData = _this.RULE('DeleteData', function () {\n            log('DeleteData');\n            _this.CONSUME(sparqlTokenMap.DELETE_DATA);\n            _this.SUBRULE(_this.QuadData);\n        });\n        _this.DeleteWhere = _this.RULE('DeleteWhere', function () {\n            log('DeleteWhere');\n            _this.CONSUME(sparqlTokenMap.DELETE_WHERE);\n            _this.SUBRULE(_this.QuadPattern);\n        });\n        _this.Modify = _this.RULE('Modify', function () {\n            log('Modify');\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.WITH);\n                _this.SUBRULE(_this.iri);\n            });\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.DeleteClause);\n                        _this.OPTION1(function () { return _this.SUBRULE(_this.InsertClause); });\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE1(_this.InsertClause); } },\n            ]);\n            _this.MANY(function () { return _this.SUBRULE(_this.UsingClause); });\n            _this.CONSUME(sparqlTokenMap.WHERE);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.DeleteClause = _this.RULE('DeleteClause', function () {\n            log('DeleteClause');\n            _this.CONSUME(sparqlTokenMap.DELETE);\n            _this.SUBRULE(_this.QuadPattern);\n        });\n        _this.InsertClause = _this.RULE('InsertClause', function () {\n            log('InsertClause');\n            _this.CONSUME(sparqlTokenMap.INSERT);\n            _this.SUBRULE(_this.QuadPattern);\n        });\n        _this.UsingClause = _this.RULE('UsingClause', function () {\n            log('UsingClause');\n            _this.CONSUME(sparqlTokenMap.USING);\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.NAMED);\n                        _this.SUBRULE1(_this.iri);\n                    },\n                },\n            ]);\n        });\n        _this.GraphOrDefault = _this.RULE('GraphOrDefault', function () {\n            log('GraphOrDefault');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DEFAULT); } },\n                {\n                    ALT: function () {\n                        _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.GRAPH); });\n                        _this.SUBRULE(_this.iri);\n                    },\n                },\n            ]);\n        });\n        _this.GraphRef = _this.RULE('GraphRef', function () {\n            log('GraphRef');\n            _this.CONSUME(sparqlTokenMap.GRAPH);\n            _this.SUBRULE(_this.iri);\n        });\n        _this.GraphRefAll = _this.RULE('GraphRefAll', function () {\n            log('GraphRefAll');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.GraphRef); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DEFAULT); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NAMED); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.ALL); } },\n            ]);\n        });\n        _this.QuadPattern = _this.RULE('QuadPattern', function () {\n            log('QuadPattern');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.SUBRULE(_this.Quads);\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.QuadData = _this.RULE('QuadData', function () {\n            log('QuadData');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.SUBRULE(_this.Quads);\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.Quads = _this.RULE('Quads', function () {\n            log('Quads');\n            _this.OPTION(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n            _this.MANY(function () {\n                _this.SUBRULE(_this.QuadsNotTriples);\n                _this.OPTION1(function () { return _this.CONSUME(sparqlTokenMap.Period); });\n                _this.OPTION2(function () { return _this.SUBRULE1(_this.TriplesTemplate); });\n            });\n        });\n        _this.QuadsNotTriples = _this.RULE('QuadsNotTriples', function () {\n            log('QuadsNotTriples');\n            _this.CONSUME(sparqlTokenMap.GRAPH);\n            _this.SUBRULE(_this.VarOrIri);\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.OPTION(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.TriplesTemplate = _this.RULE('TriplesTemplate', function () {\n            log('TriplesTemplate');\n            _this.SUBRULE(_this.TriplesSameSubject);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Period);\n                _this.OPTION1(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n            });\n        });\n        _this.GroupGraphPattern = _this.RULE('GroupGraphPattern', function () {\n            log('GroupGraphPattern');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.SubSelect); } },\n                { ALT: function () { return _this.SUBRULE(_this.GroupGraphPatternSub); } },\n            ]);\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.GroupGraphPatternSub = _this.RULE('GroupGraphPatternSub', function () {\n            log('GroupGraphPatternSub');\n            _this.OPTION(function () { return _this.SUBRULE(_this.TriplesBlock); });\n            _this.MANY(function () {\n                _this.SUBRULE(_this.GraphPatternNotTriples);\n                _this.OPTION1(function () { return _this.CONSUME(sparqlTokenMap.Period); });\n                _this.OPTION2(function () { return _this.SUBRULE1(_this.TriplesBlock); });\n            });\n        });\n        _this.TriplesBlock = _this.RULE('TriplesBlock', function () {\n            log('TriplesBlock');\n            _this.SUBRULE(_this.TriplesSameSubjectPath);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Period);\n                _this.OPTION1(function () { return _this.SUBRULE(_this.TriplesBlock); });\n            });\n        });\n        _this.GraphPatternNotTriples = _this.RULE('GraphPatternNotTriples', function () {\n            log('GraphPatternNotTriples');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.GroupOrUnionGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.OptionalGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.MinusGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.GraphGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.ServiceGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.Filter); } },\n                { ALT: function () { return _this.SUBRULE(_this.Bind); } },\n                { ALT: function () { return _this.SUBRULE(_this.InlineData); } },\n            ]);\n        });\n        _this.OptionalGraphPattern = _this.RULE('OptionalGraphPattern', function () {\n            log('OptionalGraphPattern');\n            _this.CONSUME(sparqlTokenMap.OPTIONAL);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.GraphGraphPattern = _this.RULE('GraphGraphPattern', function () {\n            log('GraphGraphPattern');\n            _this.CONSUME(sparqlTokenMap.GRAPH);\n            _this.SUBRULE(_this.VarOrIri);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.ServiceGraphPattern = _this.RULE('ServiceGraphPattern', function () {\n            log('ServiceGraphPattern');\n            _this.CONSUME(sparqlTokenMap.SERVICE);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.VarOrIri);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.Bind = _this.RULE('Bind', function () {\n            log('Bind');\n            _this.CONSUME(sparqlTokenMap.BIND);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.AS);\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.InlineData = _this.RULE('InlineData', function () {\n            log('InlineData');\n            _this.CONSUME(sparqlTokenMap.VALUES);\n            _this.SUBRULE(_this.DataBlock);\n        });\n        _this.DataBlock = _this.RULE('DataBlock', function () {\n            log('DataBlock');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.InlineDataOneVar); } },\n                { ALT: function () { return _this.SUBRULE(_this.InlineDataFull); } },\n            ]);\n        });\n        _this.InlineDataOneVar = _this.RULE('InlineDataOneVar', function () {\n            log('InlineDataOneVar');\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.MANY(function () { return _this.SUBRULE(_this.DataBlockValue); });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.InlineDataFull = _this.RULE('InlineDataFull', function () {\n            log('InlineDataFull');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.MANY(function () { return _this.SUBRULE(_this.Var); });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.MANY1(function () {\n                return _this.OR1([\n                    {\n                        ALT: function () {\n                            _this.CONSUME1(sparqlTokenMap.LParen);\n                            _this.MANY2(function () { return _this.SUBRULE(_this.DataBlockValue); });\n                            _this.CONSUME1(sparqlTokenMap.RParen);\n                        },\n                    },\n                    { ALT: function () { return _this.CONSUME1(sparqlTokenMap.NIL); } },\n                ]);\n            });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.DataBlockValue = _this.RULE('DataBlockValue', function () {\n            log('DataBlockValue');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.UNDEF); } },\n            ]);\n        });\n        _this.MinusGraphPattern = _this.RULE('MinusGraphPattern', function () {\n            log('MinusGraphPattern');\n            _this.CONSUME(sparqlTokenMap.MINUS);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.GroupOrUnionGraphPattern = _this.RULE('GroupOrUnionGraphPattern', function () {\n            log('GroupOrUnionGraphPattern');\n            _this.SUBRULE(_this.GroupGraphPattern);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.UNION);\n                _this.SUBRULE1(_this.GroupGraphPattern);\n            });\n        });\n        _this.Filter = _this.RULE('Filter', function () {\n            log('Filter');\n            _this.CONSUME(sparqlTokenMap.FILTER);\n            _this.SUBRULE(_this.Constraint);\n        });\n        _this.Constraint = _this.RULE('Constraint', function () {\n            log('Constraint');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.BrackettedExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall); } },\n                { ALT: function () { return _this.SUBRULE(_this.FunctionCall); } },\n            ]);\n        });\n        _this.FunctionCall = _this.RULE('FunctionCall', function () {\n            log('FunctionCall');\n            _this.SUBRULE(_this.iri);\n            _this.SUBRULE(_this.ArgList);\n        });\n        _this.ArgList = _this.RULE('ArgList', function () {\n            log('ArgList');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.DISTINCT); });\n                        _this.SUBRULE(_this.Expression);\n                        _this.MANY(function () {\n                            _this.CONSUME(sparqlTokenMap.Comma);\n                            _this.SUBRULE1(_this.Expression);\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.ExpressionList = _this.RULE('ExpressionList', function () {\n            log('ExpressionList');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Expression);\n                        _this.MANY(function () {\n                            _this.CONSUME(sparqlTokenMap.Comma);\n                            _this.SUBRULE1(_this.Expression);\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.ConstructTemplate = _this.RULE('ConstructTemplate', function () {\n            log('ConstructTemplate');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.OPTION(function () { return _this.SUBRULE(_this.ConstructTriples); });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.ConstructTriples = _this.RULE('ConstructTriples', function () {\n            log('ConstructTriples');\n            _this.SUBRULE(_this.TriplesSameSubject);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Period);\n                _this.OPTION1(function () { return _this.SUBRULE(_this.ConstructTriples); });\n            });\n        });\n        _this.TriplesSameSubject = _this.RULE('TriplesSameSubject', function () {\n            log('TriplesSameSubject');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.VarOrTerm);\n                        _this.SUBRULE(_this.PropertyListNotEmpty);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.TriplesNode);\n                        _this.SUBRULE(_this.PropertyList);\n                    },\n                },\n            ]);\n        });\n        _this.PropertyList = _this.RULE('PropertyList', function () {\n            log('PropertyList');\n            _this.OPTION(function () { return _this.SUBRULE(_this.PropertyListNotEmpty); });\n        });\n        _this.PropertyListNotEmpty = _this.RULE('PropertyListNotEmpty', function () {\n            log('PropertyListNotEmpty');\n            _this.SUBRULE(_this.Verb);\n            _this.SUBRULE(_this.ObjectList);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.SUBRULE1(_this.Verb);\n                    _this.SUBRULE1(_this.ObjectList);\n                });\n            });\n        });\n        _this.Verb = _this.RULE('Verb', function () {\n            log('Verb');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VarOrIri); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.A); } },\n            ]);\n        });\n        _this.ObjectList = _this.RULE('ObjectList', function () {\n            log('ObjectList');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.Comma,\n                DEF: function () { return _this.SUBRULE(_this.Object); },\n            });\n        });\n        _this.Object = _this.RULE('Object', function () {\n            log('Object');\n            _this.SUBRULE(_this.GraphNode);\n        });\n        _this.TriplesSameSubjectPath = _this.RULE('TriplesSameSubjectPath', function () {\n            log('TriplesSameSubjectPath');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.VarOrTerm);\n                        _this.SUBRULE(_this.PropertyListPathNotEmpty);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.TriplesNodePath);\n                        _this.SUBRULE(_this.PropertyListPath);\n                    },\n                },\n            ]);\n        });\n        _this.PropertyListPath = _this.RULE('PropertyListPath', function () {\n            log('PropertyListPath');\n            _this.OPTION(function () { return _this.SUBRULE(_this.PropertyListPathNotEmpty); });\n        });\n        _this.PropertyListPathNotEmpty = _this.RULE('PropertyListPathNotEmpty', function () {\n            log('PropertyListPathNotEmpty');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VerbPath); } },\n                { ALT: function () { return _this.SUBRULE(_this.VerbSimple); } },\n            ]);\n            _this.SUBRULE(_this.ObjectListPath);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.OR1([\n                        { ALT: function () { return _this.SUBRULE1(_this.VerbPath); } },\n                        { ALT: function () { return _this.SUBRULE1(_this.VerbSimple); } },\n                    ]);\n                    _this.SUBRULE1(_this.ObjectListPath);\n                });\n            });\n        });\n        _this.VerbPath = _this.RULE('VerbPath', function () {\n            log('VerbPath');\n            _this.SUBRULE(_this.Path);\n        });\n        _this.VerbSimple = _this.RULE('VerbSimple', function () {\n            log('VerbSimple');\n            _this.SUBRULE(_this.Var);\n        });\n        _this.ObjectListPath = _this.RULE('ObjectListPath', function () {\n            log('ObjectListPath');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.Comma,\n                DEF: function () { return _this.SUBRULE(_this.ObjectPath); },\n            });\n        });\n        _this.ObjectPath = _this.RULE('ObjectPath', function () {\n            log('ObjectPath');\n            _this.SUBRULE(_this.GraphNodePath);\n        });\n        _this.Path = _this.RULE('Path', function () {\n            log('Path');\n            _this.SUBRULE(_this.PathAlternative);\n        });\n        _this.PathAlternative = _this.RULE('PathAlternative', function () {\n            log('PathAlternative');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.Pipe,\n                DEF: function () { return _this.SUBRULE(_this.PathSequence); },\n            });\n        });\n        _this.PathSequence = _this.RULE('PathSequence', function () {\n            log('PathSequence');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.ForwardSlash,\n                DEF: function () { return _this.SUBRULE(_this.PathEltOrInverse); },\n            });\n        });\n        _this.PathElt = _this.RULE('PathElt', function () {\n            log('PathElt');\n            _this.SUBRULE(_this.PathPrimary);\n            _this.OPTION(function () { return _this.SUBRULE(_this.PathMod); });\n        });\n        _this.PathEltOrInverse = _this.RULE('PathEltOrInverse', function () {\n            log('PathEltOrInverse');\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.Caret); });\n            _this.SUBRULE(_this.PathElt);\n        });\n        _this.PathMod = _this.RULE('PathMod', function () {\n            log('PathMod');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.QuestionMark); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Plus); } },\n            ]);\n        });\n        _this.PathPrimary = _this.RULE('PathPrimary', function () {\n            log('PathPrimary');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.A); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Bang);\n                        _this.SUBRULE(_this.PathNegatedPropertySet);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Path);\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.PathNegatedPropertySet = _this.RULE('PathNegatedPropertySet', function () {\n            log('PathNegatedPropertySet');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.PathOneInPropertySet); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.MANY_SEP({\n                            SEP: sparqlTokenMap.Pipe,\n                            DEF: function () { return _this.SUBRULE1(_this.PathOneInPropertySet); },\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.PathOneInPropertySet = _this.RULE('PathOneInPropertySet', function () {\n            log('PathOneInPropertySet');\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.Caret); });\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.A); } },\n            ]);\n        });\n        _this.Integer = _this.RULE('Integer', function () {\n            log('Integer');\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.TriplesNode = _this.RULE('TriplesNode', function () {\n            log('TriplesNode');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Collection); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNodePropertyList); } },\n            ]);\n        });\n        _this.BlankNodePropertyList = _this.RULE('BlankNodePropertyList', function () {\n            log('BlankNodePropertyList');\n            _this.CONSUME(sparqlTokenMap.LBracket);\n            _this.SUBRULE(_this.PropertyListNotEmpty);\n            _this.CONSUME(sparqlTokenMap.RBracket);\n        });\n        _this.TriplesNodePath = _this.RULE('TriplesNodePath', function () {\n            log('TriplesNodePath');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.CollectionPath); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNodePropertyListPath); } },\n            ]);\n        });\n        _this.BlankNodePropertyListPath = _this.RULE('BlankNodePropertyListPath', function () {\n            log('BlankNodePropertyListPath');\n            _this.CONSUME(sparqlTokenMap.LBracket);\n            _this.SUBRULE(_this.PropertyListPathNotEmpty);\n            _this.CONSUME(sparqlTokenMap.RBracket);\n        });\n        _this.Collection = _this.RULE('Collection', function () {\n            log('Collection');\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.GraphNode); });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.CollectionPath = _this.RULE('CollectionPath', function () {\n            log('CollectionPath');\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.GraphNodePath); });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.GraphNode = _this.RULE('GraphNode', function () {\n            log('GraphNode');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VarOrTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.TriplesNode); } },\n            ]);\n        });\n        _this.GraphNodePath = _this.RULE('GraphNodePath', function () {\n            log('GraphNodePath');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VarOrTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.TriplesNodePath); } },\n            ]);\n        });\n        _this.VarOrTerm = _this.RULE('VarOrTerm', function () {\n            log('VarOrTerm');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.GraphTerm); } },\n            ]);\n        });\n        _this.VarOrIri = _this.RULE('VarOrIri', function () {\n            log('VarOrIri');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n            ]);\n        });\n        _this.Var = _this.RULE('Var', function () {\n            log('Var');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.VAR1); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.VAR2); } },\n            ]);\n        });\n        _this.GraphTerm = _this.RULE('GraphTerm', function () {\n            log('GraphTerm');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n            ]);\n        });\n        _this.Expression = _this.RULE('Expression', function () {\n            log('Expression');\n            _this.SUBRULE(_this.ConditionalOrExpression);\n        });\n        _this.ConditionalOrExpression = _this.RULE('ConditionalOrExpression', function () {\n            log('ConditionalOrExpression');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.LogicalOr,\n                DEF: function () { return _this.SUBRULE(_this.ConditionalAndExpression); },\n            });\n        });\n        _this.ConditionalAndExpression = _this.RULE('ConditionalAndExpression', function () {\n            log('ConditionalAndExpression');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.LogicalAnd,\n                DEF: function () { return _this.SUBRULE(_this.ValueLogical); },\n            });\n        });\n        _this.ValueLogical = _this.RULE('ValueLogical', function () {\n            log('ValueLogical');\n            _this.SUBRULE(_this.RelationalExpression);\n        });\n        _this.RelationalExpression = _this.RULE('RelationalExpression', function () {\n            log('RelationalExpression');\n            _this.SUBRULE(_this.NumericExpression);\n            _this.OPTION(function () {\n                return _this.OR([\n                    {\n                        ALT: function () {\n                            _this.OR1([\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Equals); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NotEquals); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.LessThan); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.GreaterThan); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.LessThanEquals); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.GreaterThanEquals); } },\n                            ]);\n                            _this.SUBRULE1(_this.NumericExpression);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.IN);\n                            _this.SUBRULE(_this.ExpressionList);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.NOT_IN);\n                            _this.SUBRULE1(_this.ExpressionList);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.NumericExpression = _this.RULE('NumericExpression', function () {\n            log('NumericExpression');\n            _this.SUBRULE(_this.AdditiveExpression);\n        });\n        _this.AdditiveExpression = _this.RULE('AdditiveExpression', function () {\n            log('AdditiveExpression');\n            _this.SUBRULE(_this.MultiplicativeExpression);\n            _this.MANY(function () {\n                return _this.OR([\n                    {\n                        ALT: function () {\n                            _this.OR1([\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Plus); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Minus); } },\n                            ]);\n                            _this.SUBRULE1(_this.MultiplicativeExpression);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.OR2([\n                                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralPositive); } },\n                                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralNegative); } },\n                            ]);\n                            _this.MANY1(function () {\n                                return _this.OR3([\n                                    {\n                                        ALT: function () {\n                                            _this.OR4([\n                                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n                                                {\n                                                    ALT: function () { return _this.CONSUME(sparqlTokenMap.ForwardSlash); },\n                                                },\n                                            ]);\n                                            _this.SUBRULE1(_this.UnaryExpression);\n                                        },\n                                    },\n                                ]);\n                            });\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.MultiplicativeExpression = _this.RULE('MultiplicativeExpression', function () {\n            log('MultiplicativeExpression');\n            _this.SUBRULE(_this.UnaryExpression);\n            _this.MANY(function () {\n                return _this.OR([\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.Star);\n                            _this.SUBRULE1(_this.UnaryExpression);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.ForwardSlash);\n                            _this.SUBRULE2(_this.UnaryExpression);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.UnaryExpression = _this.RULE('UnaryExpression', function () {\n            log('UnaryExpression');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Bang);\n                        _this.SUBRULE(_this.PrimaryExpression);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Plus);\n                        _this.SUBRULE1(_this.PrimaryExpression);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Minus);\n                        _this.SUBRULE2(_this.PrimaryExpression);\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE3(_this.PrimaryExpression); } },\n            ]);\n        });\n        _this.PrimaryExpression = _this.RULE('PrimaryExpression', function () {\n            log('PrimaryExpression');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.BrackettedExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall); } },\n                { ALT: function () { return _this.SUBRULE(_this.iriOrFunction); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n            ]);\n        });\n        _this.BrackettedExpression = _this.RULE('BrackettedExpression', function () {\n            log('BrackettedExpression');\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STR = _this.RULE('BuiltInCall_STR', function () {\n            log('BuiltInCall_STR');\n            _this.CONSUME(sparqlTokenMap.STR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_LANG = _this.RULE('BuiltInCall_LANG', function () {\n            log('BuiltInCall_LANG');\n            _this.CONSUME(sparqlTokenMap.LANG);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_LANGMATCHES = _this.RULE('BuiltInCall_LANGMATCHES', function () {\n            log('BuiltInCall_LANGMATCHES');\n            _this.CONSUME(sparqlTokenMap.LANGMATCHES);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_DATATYPE = _this.RULE('BuiltInCall_DATATYPE', function () {\n            log('BuiltInCall_DATATYPE');\n            _this.CONSUME(sparqlTokenMap.DATATYPE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_BOUND = _this.RULE('BuiltInCall_BOUND', function () {\n            log('BuiltInCall_BOUND');\n            _this.CONSUME(sparqlTokenMap.BOUND);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_IRI = _this.RULE('BuiltInCall_IRI', function () {\n            log('BuiltInCall_IRI');\n            _this.CONSUME(sparqlTokenMap.IRI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_URI = _this.RULE('BuiltInCall_URI', function () {\n            log('BuiltInCall_URI');\n            _this.CONSUME(sparqlTokenMap.URI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_BNODE = _this.RULE('BuiltInCall_BNODE', function () {\n            log('BuiltInCall_BNODE');\n            _this.CONSUME(sparqlTokenMap.BNODE);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Expression);\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n            ]);\n        });\n        _this.BuiltInCall_RAND = _this.RULE('BuiltInCall_RAND', function () {\n            log('BuiltInCall_RAND');\n            _this.CONSUME(sparqlTokenMap.RAND);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_ABS = _this.RULE('BuiltInCall_ABS', function () {\n            log('BuiltInCall_ABS');\n            _this.CONSUME(sparqlTokenMap.ABS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_CEIL = _this.RULE('BuiltInCall_CEIL', function () {\n            log('BuiltInCall_CEIL');\n            _this.CONSUME(sparqlTokenMap.CEIL);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_FLOOR = _this.RULE('BuiltInCall_FLOOR', function () {\n            log('BuiltInCall_FLOOR');\n            _this.CONSUME(sparqlTokenMap.FLOOR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_ROUND = _this.RULE('BuiltInCall_ROUND', function () {\n            log('BuiltInCall_ROUND');\n            _this.CONSUME(sparqlTokenMap.ROUND);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_CONCAT = _this.RULE('BuiltInCall_CONCAT', function () {\n            log('BuiltInCall_CONCAT');\n            _this.CONSUME(sparqlTokenMap.CONCAT);\n            _this.SUBRULE(_this.ExpressionList);\n        });\n        _this.BuiltInCall_STRLEN = _this.RULE('BuiltInCall_STRLEN', function () {\n            log('BuiltInCall_STRLEN');\n            _this.CONSUME(sparqlTokenMap.STRLEN);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_UCASE = _this.RULE('BuiltInCall_UCASE', function () {\n            log('BuiltInCall_UCASE');\n            _this.CONSUME(sparqlTokenMap.UCASE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_LCASE = _this.RULE('BuiltInCall_LCASE', function () {\n            log('BuiltInCall_LCASE');\n            _this.CONSUME(sparqlTokenMap.LCASE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_ENCODE_FOR_URI = _this.RULE('BuiltInCall_ENCODE_FOR_URI', function () {\n            log('BuiltInCall_ENCODE_FOR_URI');\n            _this.CONSUME(sparqlTokenMap.ENCODE_FOR_URI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_CONTAINS = _this.RULE('BuiltInCall_CONTAINS', function () {\n            log('BuiltInCall_CONTAINS');\n            _this.CONSUME(sparqlTokenMap.CONTAINS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRSTARTS = _this.RULE('BuiltInCall_STRSTARTS', function () {\n            log('BuiltInCall_STRSTARTS');\n            _this.CONSUME(sparqlTokenMap.STRSTARTS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRENDS = _this.RULE('BuiltInCall_STRENDS', function () {\n            log('BuiltInCall_STRENDS');\n            _this.CONSUME(sparqlTokenMap.STRENDS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRBEFORE = _this.RULE('BuiltInCall_STRBEFORE', function () {\n            log('BuiltInCall_STRBEFORE');\n            _this.CONSUME(sparqlTokenMap.STRBEFORE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRAFTER = _this.RULE('BuiltInCall_STRAFTER', function () {\n            log('BuiltInCall_STRAFTER');\n            _this.CONSUME(sparqlTokenMap.STRAFTER);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_YEAR = _this.RULE('BuiltInCall_YEAR', function () {\n            log('BuiltInCall_YEAR');\n            _this.CONSUME(sparqlTokenMap.YEAR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_MONTH = _this.RULE('BuiltInCall_MONTH', function () {\n            log('BuiltInCall_MONTH');\n            _this.CONSUME(sparqlTokenMap.MONTH);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_DAY = _this.RULE('BuiltInCall_DAY', function () {\n            log('BuiltInCall_DAY');\n            _this.CONSUME(sparqlTokenMap.DAY);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_HOURS = _this.RULE('BuiltInCall_HOURS', function () {\n            log('BuiltInCall_HOURS');\n            _this.CONSUME(sparqlTokenMap.HOURS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_MINUTES = _this.RULE('BuiltInCall_MINUTES', function () {\n            log('BuiltInCall_MINUTES');\n            _this.CONSUME(sparqlTokenMap.MINUTES);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SECONDS = _this.RULE('BuiltInCall_SECONDS', function () {\n            log('BuiltInCall_SECONDS');\n            _this.CONSUME(sparqlTokenMap.SECONDS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_TIMEZONE = _this.RULE('BuiltInCall_TIMEZONE', function () {\n            log('BuiltInCall_TIMEZONE');\n            _this.CONSUME(sparqlTokenMap.TIMEZONE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_TZ = _this.RULE('BuiltInCall_TZ', function () {\n            log('BuiltInCall_TZ');\n            _this.CONSUME(sparqlTokenMap.TZ);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_NOW = _this.RULE('BuiltInCall_NOW', function () {\n            log('BuiltInCall_NOW');\n            _this.CONSUME(sparqlTokenMap.NOW);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_UUID = _this.RULE('BuiltInCall_UUID', function () {\n            log('BuiltInCall_UUID');\n            _this.CONSUME(sparqlTokenMap.UUID);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_STRUUID = _this.RULE('BuiltInCall_STRUUID', function () {\n            log('BuiltInCall_STRUUID');\n            _this.CONSUME(sparqlTokenMap.STRUUID);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_MD5 = _this.RULE('BuiltInCall_MD5', function () {\n            log('BuiltInCall_MD5');\n            _this.CONSUME(sparqlTokenMap.MD5);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA1 = _this.RULE('BuiltInCall_SHA1', function () {\n            log('BuiltInCall_SHA1');\n            _this.CONSUME(sparqlTokenMap.SHA1);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA256 = _this.RULE('BuiltInCall_SHA256', function () {\n            log('BuiltInCall_SHA256');\n            _this.CONSUME(sparqlTokenMap.SHA256);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA384 = _this.RULE('BuiltInCall_SHA384', function () {\n            log('BuiltInCall_SHA384');\n            _this.CONSUME(sparqlTokenMap.SHA384);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA512 = _this.RULE('BuiltInCall_SHA512', function () {\n            log('BuiltInCall_SHA512');\n            _this.CONSUME(sparqlTokenMap.SHA512);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_COALESCE = _this.RULE('BuiltInCall_COALESCE', function () {\n            log('BuiltInCall_COALESCE');\n            _this.CONSUME(sparqlTokenMap.COALESCE);\n            _this.SUBRULE(_this.ExpressionList);\n        });\n        _this.BuiltInCall_IF = _this.RULE('BuiltInCall_IF', function () {\n            log('BuiltInCall_IF');\n            _this.CONSUME(sparqlTokenMap.IF);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME1(sparqlTokenMap.Comma);\n            _this.SUBRULE2(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRLANG = _this.RULE('BuiltInCall_STRLANG', function () {\n            log('BuiltInCall_STRLANG');\n            _this.CONSUME(sparqlTokenMap.STRLANG);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRDT = _this.RULE('BuiltInCall_STRDT', function () {\n            log('BuiltInCall_STRDT');\n            _this.CONSUME(sparqlTokenMap.STRDT);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_sameTerm = _this.RULE('BuiltInCall_sameTerm', function () {\n            log('BuiltInCall_sameTerm');\n            _this.CONSUME(sparqlTokenMap.sameTerm);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isIRI = _this.RULE('BuiltInCall_isIRI', function () {\n            log('BuiltInCall_isIRI');\n            _this.CONSUME(sparqlTokenMap.isIRI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isURI = _this.RULE('BuiltInCall_isURI', function () {\n            log('BuiltInCall_isURI');\n            _this.CONSUME(sparqlTokenMap.isURI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isBLANK = _this.RULE('BuiltInCall_isBLANK', function () {\n            log('BuiltInCall_isBLANK');\n            _this.CONSUME(sparqlTokenMap.isBLANK);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isLITERAL = _this.RULE('BuiltInCall_isLITERAL', function () {\n            log('BuiltInCall_isLITERAL');\n            _this.CONSUME(sparqlTokenMap.isLITERAL);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isNUMERIC = _this.RULE('BuiltInCall_isNUMERIC', function () {\n            log('BuiltInCall_isNUMERIC');\n            _this.CONSUME(sparqlTokenMap.isNUMERIC);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall = _this.RULE('BuiltInCall', function () {\n            log('BuiltInCall');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Aggregate); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LANG); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LANGMATCHES); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_DATATYPE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_BOUND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_IRI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_URI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_BNODE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_RAND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ABS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CEIL); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_FLOOR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ROUND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CONCAT); } },\n                { ALT: function () { return _this.SUBRULE(_this.SubstringExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRLEN); } },\n                { ALT: function () { return _this.SUBRULE(_this.StrReplaceExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_UCASE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LCASE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ENCODE_FOR_URI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CONTAINS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRSTARTS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRENDS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRBEFORE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRAFTER); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_YEAR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MONTH); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_DAY); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_HOURS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MINUTES); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SECONDS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_TIMEZONE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_TZ); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_NOW); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_UUID); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRUUID); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MD5); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA1); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA256); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA384); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA512); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_COALESCE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_IF); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRLANG); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRDT); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_sameTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isIRI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isURI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isBLANK); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isLITERAL); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isNUMERIC); } },\n                { ALT: function () { return _this.SUBRULE(_this.RegexExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.ExistsFunction); } },\n                { ALT: function () { return _this.SUBRULE(_this.NotExistsFunction); } },\n            ]);\n        });\n        _this.RegexExpression = _this.RULE('RegexExpression', function () {\n            log('RegexExpression');\n            _this.CONSUME(sparqlTokenMap.REGEX);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.OPTION(function () {\n                _this.CONSUME1(sparqlTokenMap.Comma);\n                _this.SUBRULE2(_this.Expression);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.SubstringExpression = _this.RULE('SubstringExpression', function () {\n            log('SubstringExpression');\n            _this.CONSUME(sparqlTokenMap.SUBSTR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.OPTION(function () {\n                _this.CONSUME1(sparqlTokenMap.Comma);\n                _this.SUBRULE2(_this.Expression);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.StrReplaceExpression = _this.RULE('StrReplaceExpression', function () {\n            log('StrReplaceExpression');\n            _this.CONSUME(sparqlTokenMap.REPLACE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME1(sparqlTokenMap.Comma);\n            _this.SUBRULE2(_this.Expression);\n            _this.OPTION(function () {\n                _this.CONSUME2(sparqlTokenMap.Comma);\n                _this.SUBRULE3(_this.Expression);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.ExistsFunction = _this.RULE('ExistsFunction', function () {\n            log('ExistsFunction');\n            _this.CONSUME(sparqlTokenMap.EXISTS);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.NotExistsFunction = _this.RULE('NotExistsFunction', function () {\n            log('NotExistsFunction');\n            _this.CONSUME(sparqlTokenMap.NOT_EXISTS);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.Count = _this.RULE('Count', function () {\n            log('Count');\n            _this.CONSUME(sparqlTokenMap.COUNT);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.OR([\n                { ALT: function () { return _this.CONSUME3(sparqlTokenMap.Star); } },\n                { ALT: function () { return _this.SUBRULE(_this.Expression); } },\n            ]);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Sum = _this.RULE('Sum', function () {\n            log('Sum');\n            _this.CONSUME(sparqlTokenMap.SUM);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Min = _this.RULE('Min', function () {\n            log('Min');\n            _this.CONSUME(sparqlTokenMap.MIN);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Max = _this.RULE('Max', function () {\n            log('Max');\n            _this.CONSUME(sparqlTokenMap.MAX);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Avg = _this.RULE('Avg', function () {\n            log('Avg');\n            _this.CONSUME(sparqlTokenMap.AVG);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Sample = _this.RULE('Sample', function () {\n            log('Sample');\n            _this.CONSUME(sparqlTokenMap.SAMPLE);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.GroupConcat = _this.RULE('GroupConcat', function () {\n            log('GroupConcat');\n            _this.CONSUME(sparqlTokenMap.GROUP_CONCAT);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.OPTION1(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.CONSUME(sparqlTokenMap.SEPARATOR);\n                _this.CONSUME(sparqlTokenMap.Equals);\n                _this.SUBRULE(_this.String);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Aggregate = _this.RULE('Aggregate', function () {\n            log('Aggregate');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Count); } },\n                { ALT: function () { return _this.SUBRULE(_this.Sum); } },\n                { ALT: function () { return _this.SUBRULE(_this.Min); } },\n                { ALT: function () { return _this.SUBRULE(_this.Max); } },\n                { ALT: function () { return _this.SUBRULE(_this.Avg); } },\n                { ALT: function () { return _this.SUBRULE(_this.Sample); } },\n                { ALT: function () { return _this.SUBRULE(_this.GroupConcat); } },\n            ]);\n        });\n        _this.iriOrFunction = _this.RULE('iriOrFunction', function () {\n            log('iriOrFunction');\n            _this.SUBRULE(_this.iri);\n            _this.OPTION(function () { return _this.SUBRULE(_this.ArgList); });\n        });\n        _this.RDFLiteral = _this.RULE('RDFLiteral', function () {\n            log('RDFLiteral');\n            _this.SUBRULE(_this.String);\n            _this.OPTION(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.CONSUME(sparqlTokenMap.LANGTAG); } },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.DoubleCaret);\n                            _this.SUBRULE(_this.iri);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.NumericLiteral = _this.RULE('NumericLiteral', function () {\n            log('NumericLiteral');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralUnsigned); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralPositive); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralNegative); } },\n            ]);\n        });\n        _this.NumericLiteralUnsigned = _this.RULE('NumericLiteralUnsigned', function () {\n            log('NumericLiteralUnsigned');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.INTEGER); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DECIMAL); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DOUBLE); } },\n            ]);\n        });\n        _this.NumericLiteralPositive = _this.RULE('NumericLiteralPositive', function () {\n            log('NumericLiteralPositive');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.INTEGER_POSITIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DECIMAL_POSITIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DOUBLE_POSITIVE); } },\n            ]);\n        });\n        _this.NumericLiteralNegative = _this.RULE('NumericLiteralNegative', function () {\n            log('NumericLiteralNegative');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.INTEGER_NEGATIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DECIMAL_NEGATIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DOUBLE_NEGATIVE); } },\n            ]);\n        });\n        _this.BooleanLiteral = _this.RULE('BooleanLiteral', function () {\n            log('BooleanLiteral');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.TRUE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.FALSE); } },\n            ]);\n        });\n        _this.String = _this.RULE('String', function () {\n            log('String');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL1); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL2); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL_LONG1); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL_LONG2); } },\n            ]);\n        });\n        _this.iri = _this.RULE('iri', function () {\n            log('iri');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.IRIREF); } },\n                { ALT: function () { return _this.SUBRULE(_this.PrefixedName); } },\n            ]);\n        });\n        _this.PrefixedName = _this.RULE('PrefixedName', function () {\n            log('PrefixedName');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PNAME_LN); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PNAME_NS); } },\n            ]);\n        });\n        _this.BlankNode = _this.RULE('BlankNode', function () {\n            log('BlankNode');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.BLANK_NODE_LABEL); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.ANON); } },\n            ]);\n        });\n        _this.lexer = new Lexer(tokenVocab);\n        return _this;\n    }\n    return BaseSparqlParser;\n}(Parser));\nexport { BaseSparqlParser };\n"],"sourceRoot":""}