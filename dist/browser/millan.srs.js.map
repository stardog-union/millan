{"version":3,"sources":["webpack://millan.[name]/webpack/universalModuleDefinition","webpack://millan.[name]/webpack/bootstrap","webpack://millan.[name]/./src/sparql/StardogSparqlParser.ts","webpack://millan.[name]/./src/turtle/TurtleParser.ts","webpack://millan.[name]/./src/sparql/W3SpecSparqlParser.ts","webpack://millan.[name]/./src/sparql/index.ts","webpack://millan.[name]/./src/srs/tokens.ts","webpack://millan.[name]/./src/srs/visitor.ts","webpack://millan.[name]/./src/turtle/defaultNamespaces.ts","webpack://millan.[name]/./src/srs/customErrors.ts","webpack://millan.[name]/./src/srs/SrsParser.ts","webpack://millan.[name]/./src/srs/index.ts","webpack://millan.[name]/./src/sparql/BaseSparqlParser.ts","webpack://millan.[name]/./src/helpers/cst.ts","webpack://millan.[name]/./src/helpers/unescape.ts","webpack://millan.[name]/./src/turtle/tokens.ts"],"names":["root","factory","exports","module","define","amd","self","this","webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","6","5","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","oldJsonpFunction","slice","__webpack_exports__","StardogSparqlParser","extendStatics","_BaseSparqlParser__WEBPACK_IMPORTED_MODULE_0__","chevrotain__WEBPACK_IMPORTED_MODULE_1__","__extends","b","setPrototypeOf","__proto__","Array","__","constructor","_a","sparqlTokenMap","stardogSparqlTokens","_super","options","tokens","shouldSkipAnalysis","_this","Query","OVERRIDE_RULE","OR","ALT","SUBRULE","SelectQuery","ConstructQuery","DescribeQuery","AskQuery","PathQuery","ValuesClause","RULE","PathSpec","MANY","DatasetClause","CONSUME","START","PathTerminal","END","SUBRULE1","Via","OPTION","MaxLength","SolutionModifier","VIA","GroupGraphPattern","Var","Path","Equals","Constant","PATHS","PATHS_SHORTEST","PATHS_ALL","OPTION1","CYCLIC","GraphPatternNotTriples","GroupOrUnionGraphPattern","OptionalGraphPattern","MinusGraphPattern","GraphGraphPattern","ServiceGraphPattern","Filter","Bind","Unnest","InlineData","TriplesSameSubject","VarOrTerm","PropertyListNotEmpty","EmbeddedTriplePattern","ARGS","TriplesNode","PropertyList","disallowEdgeProperties","Verb","ObjectList","GATE","EmbeddedPropertyList","Semicolon","OR1","LCurly","RCurly","GraphNode","TriplesSameSubjectPath","PropertyListPathNotEmpty","TriplesNodePath","PropertyListPath","VerbPath","VerbSimple","ObjectListPath","EmbeddedPropertyListPath","ObjectPath","OR2","OR3","SUBRULE2","GraphNodePath","VarOrTermOrEmbeddedTriplePattern","LEmbed","VarOrBlankNodeOrIriOrLit","REmbed","GraphTerm","BIND","LParen","ExpressionOrEmbeddedTriplePattern","AS","RParen","Expression","BlankNode","iri","RDFLiteral","NumericLiteral","BooleanLiteral","UNNEST","BuiltInCall","Aggregate","BuiltInCall_STR","BuiltInCall_LANG","BuiltInCall_LANGMATCHES","BuiltInCall_DATATYPE","BuiltInCall_BOUND","BuiltInCall_IRI","BuiltInCall_URI","BuiltInCall_BNODE","BuiltInCall_RAND","BuiltInCall_ABS","BuiltInCall_CEIL","BuiltInCall_FLOOR","BuiltInCall_ROUND","BuiltInCall_CONCAT","SubstringExpression","BuiltInCall_STRLEN","StrReplaceExpression","BuiltInCall_UCASE","BuiltInCall_LCASE","BuiltInCall_ENCODE_FOR_URI","BuiltInCall_CONTAINS","BuiltInCall_STRSTARTS","BuiltInCall_STRENDS","BuiltInCall_STRBEFORE","BuiltInCall_STRAFTER","BuiltInCall_YEAR","BuiltInCall_MONTH","BuiltInCall_DAY","BuiltInCall_HOURS","BuiltInCall_MINUTES","BuiltInCall_SECONDS","BuiltInCall_TIMEZONE","BuiltInCall_TZ","BuiltInCall_NOW","BuiltInCall_UUID","BuiltInCall_STRUUID","BuiltInCall_MD5","BuiltInCall_SHA1","BuiltInCall_SHA256","BuiltInCall_SHA384","BuiltInCall_SHA512","BuiltInCall_COALESCE","BuiltInCall_IF","BuiltInCall_STRLANG","BuiltInCall_STRDT","BuiltInCall_sameTerm","BuiltInCall_isIRI","BuiltInCall_isURI","BuiltInCall_isBLANK","BuiltInCall_isLITERAL","BuiltInCall_isNUMERIC","RegexExpression","ExistsFunction","NotExistsFunction","StardogOrCustomFunction","Unknown","ExpressionList","ConstructTemplate","Quads","performSelfAnalysis","TurtleParser","chevrotain__WEBPACK_IMPORTED_MODULE_0__","__assign","assign","arguments","turtleTokenTypes","turtleTokenMap","config","lexerDefinition","outputCst","recoveryEnabled","namespacesMap","semanticErrors","resetManagedState","tokenize","document","lexer","parse","input","cst","turtleDoc","errors","allowEdgeProperties","statement","directive","triples","Period","prefixID","base","sparqlPrefix","sparqlBase","TTL_PREFIX","pnameNsToken","PNAME_NS","iriToken","IRIREF","pnameImageWithoutColon","image","iriImage","TTL_BASE","BASE","PREFIX","subject","predicateObjectList","Boolean","blankNodePropertyList","verb","objectList","EmbeddedPredicateObjectList","collection","predicate","Comma","A","literal","LBracket","RBracket","INTEGER","DECIMAL","DOUBLE","String","LANGTAG","DoubleCaret","TRUE","FALSE","STRING_LITERAL_QUOTE","STRING_LITERAL_SINGLE_QUOTE","STRING_LITERAL_LONG_SINGLE_QUOTE","STRING_LITERAL_LONG_QUOTE","PrefixedName","prefixedNameToken","PNAME_LN","indexOf","message","token","context","ruleStack","getHumanReadableRuleStack","ruleOccurrenceStack","RULE_OCCURRENCE_STACK","resyncedTokens","BLANK_NODE_LABEL","ANON","baseTokens","W3SpecSparqlParser_W3SpecSparqlParser","W3SpecSparqlParser","api","BaseSparqlParser","sparqlTokens","keywords","terminals","multiModeLexerDefinition","srsTokenMap","srsTokenTypes","LexerMode","_helpers_matchers__WEBPACK_IMPORTED_MODULE_1__","_b","Rule","pattern","If","push_mode","IFCLAUSE","Then","THENCLAUSE","EndThen","pop_mode","text","startOffset","cursor","unclosedBraceCount","exec","line_breaks","TriplesBlock","indexOfIriRef","modes","TURTLE","concat","WhiteSpace","defaultMode","defaultNamespacesMap","freeze","reduce","prefix","getSparqlSrsVisitor","BaseVisitor","SparqlSrsVisitor","groupGraphPatterns","triplesBlocks","IfClause","ctx","cstInputTokens","$storePlaceholderTokenReplacement","tokenStore","originalTokenContext","subParserRule","sparqlParser","parseGroupGraphPattern","ThenClause","parseTriplesBlock","stripWrappers","originalToken","replacement","$getPlaceholderTokenReplacement","parseResult","frontPadding","latestEndOffset","latestEndLine","linesBetweenTokens","startLine","untokenizedSpaceBetweenTokens","repeat","Math","max","split","forEach","line","idx","endOffset","endLine","parseImage","$getGroupGraphPatterns","$getTriplesBlocks","$resetState","sparql","validateVisitor","reduceVisitorItemErrors","acc","item","findAndSwapPlaceholders","node","parentNode","visitorItems","matchingVisitorItem","find","visitorItem","children","customErrors_a","subExpressionMatcher","defaultEarlyAbortTest","disallowedSparqlTokenNameToRuleMap","EXISTS","tokenName","NOT_EXISTS","NOW","disallowedSparqlTokenNames","keys","disallowedSparqlLiteralTokenNames","DOUBLE_POSITIVE","DECIMAL_POSITIVE","INTEGER_POSITIVE","DOUBLE_NEGATIVE","DECIMAL_NEGATIVE","INTEGER_NEGATIVE","STRING_LITERAL1","STRING_LITERAL2","STRING_LITERAL_LONG1","STRING_LITERAL_LONG2","map","isCstNodeTraverseContext","getCustomErrorRuleStack","traverseCtx","fullCtx","startRuleNames","topLevelSubParserRuleName","earlyAbortTest","stackUnwindingPointer","helpers_cst","includes","parentCtx","unshift","getCustomIRecognitionException","getNoPrefixError","subParserRuleName","getDisallowedTokenError","tokenType","getDisallowedLiteralError","foundPropertyListPathNotEmptyCtx","didFindSubExpressionWithMultipleChildren","errorContext","errorRuleStack","stackCtx","nodeName","test","isExpression","isTriplesBlock","isBoundExpressionWithLiteralSubject","parentNodeName","isParentBindOrBoundExpressionOrEmbeddedTriplePattern","isTriplesBlockSubject","SrsParser_extends","SrsParser_assign","SrsParser_a","SrsParser_SrsParser","SrsParser","baseNamespacesMap","visitCst","sparqlSrsVisitor","BaseSrsVisitor","getBaseCstVisitorConstructorWithDefaults","visit","getSparqlRulesFromVisitor","setBaseNamespaces","newBaseNamespaces","SrsDoc","next","currentTokenName","some","error","addIfClauseErrorsToErrors","addThenClauseErrorsToErrors","RuleDoc","MANY1","RuleClause","srsTokens","log","args","_i","tokenVocab","entryRule","SparqlDoc","getInput","Prologue","QueryUnit","UpdateUnit","MAX_LENGTH","Update","AT_LEAST_ONE","BaseDecl","PrefixDecl","SelectClause","WhereClause","SubSelect","SELECT","DISTINCT","REDUCED","Star","CONSTRUCT","WHERE","TriplesTemplate","DESCRIBE","VarOrIri","ASK","FROM","DefaultGraphClause","NamedGraphClause","SourceSelector","NAMED","GroupClause","HavingClause","OPTION2","OrderClause","OPTION3","LimitOffsetClause","GROUP_BY","GroupCondition","FunctionCall","HAVING","HavingCondition","Constraint","ORDER_BY","OrderCondition","ASC","DESC","BrackettedExpression","LimitClause","OffsetClause","OFFSET","LIMIT","VALUES","DataBlock","Update1","Load","Clear","Drop","Add","Move","Copy","Create","InsertData","DeleteData","DeleteWhere","Modify","LOAD","SILENT","INTO","GraphRef","CLEAR","GraphRefAll","DROP","CREATE","ADD","GraphOrDefault","TO","MOVE","COPY","INSERT_DATA","QuadData","DELETE_DATA","DELETE_WHERE","QuadPattern","WITH","DeleteClause","InsertClause","UsingClause","DELETE","INSERT","USING","DEFAULT","GRAPH","ALL","QuadsNotTriples","GroupGraphPatternSub","OPTIONAL","SERVICE","InlineDataOneVar","InlineDataFull","DataBlockValue","NIL","CONSUME1","MANY2","UNDEF","MINUS","UNION","FILTER","ArgList","ConstructTriples","AT_LEAST_ONE_SEP","SEP","DEF","PathAlternative","Pipe","PathSequence","ForwardSlash","PathEltOrInverse","PathElt","PathPrimary","PathMod","Caret","QuestionMark","Plus","Bang","PathNegatedPropertySet","PathOneInPropertySet","MANY_SEP","Integer","Collection","BlankNodePropertyList","CollectionPath","BlankNodePropertyListPath","VAR1","VAR2","ConditionalOrExpression","LogicalOr","ConditionalAndExpression","LogicalAnd","ValueLogical","RelationalExpression","NumericExpression","NotEquals","LessThan","GreaterThan","LessThanEquals","GreaterThanEquals","IN","NOT_IN","AdditiveExpression","MultiplicativeExpression","Minus","NumericLiteralPositive","NumericLiteralNegative","OR4","UnaryExpression","PrimaryExpression","SUBRULE3","iriOrFunction","STR","LANG","LANGMATCHES","DATATYPE","BOUND","IRI","URI","BNODE","RAND","ABS","CEIL","FLOOR","ROUND","CONCAT","STRLEN","UCASE","LCASE","ENCODE_FOR_URI","CONTAINS","STRSTARTS","STRENDS","STRBEFORE","STRAFTER","YEAR","MONTH","DAY","HOURS","MINUTES","SECONDS","TIMEZONE","TZ","UUID","STRUUID","MD5","SHA1","SHA256","SHA384","SHA512","COALESCE","IF","STRLANG","STRDT","sameTerm","isIRI","isURI","isBLANK","isLITERAL","isNUMERIC","REGEX","SUBSTR","REPLACE","CONSUME2","Count","COUNT","CONSUME3","Sum","SUM","Min","MIN","Max","MAX","Avg","AVG","Sample","SAMPLE","GroupConcat","GROUP_CONCAT","SEPARATOR","NumericLiteralUnsigned","traverse","unsafeTraverse","isCstNode","_traverse","TraverseContext","visitSafely","childType","child","childCtx","transformedCtx","nextCtx","escapeSequence","escapeReplacements","\\","'","\"","f","_","~",".","-","!","$","&","(",")","*","+",",",";","=","/","?","#","@","%","unescapedStringLiteralQuote","unescapedStringLiteralSingleQuote","stringLiteralQuote","stringLiteralSingleQuote","stringLiteralLongQuote","stringLiteralLongSingleQuote","illegalIriChars","escapedIri","unescapedIri","unescape_unescape","replace","unicode4","unicode8","escapedChar","fromCharCode","parseInt","charCode","Error","unicodeRegexp","Comment","group","regex","and","option","or","matchers","EXPONENT","ECHAR","PLX","PERCENT","HEX","match","textToMatch","UCHAR","PN_CHARS_BASE","PN_CHARS_U","PN_CHARS","PN_PREFIX","PN_LOCAL","PN_LOCAL_ESC"],"mappings":"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","file":"millan.srs.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"srs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"srs\"] = factory();\n\telse\n\t\troot[\"millan\"] = root[\"millan\"] || {}, root[\"millan\"][\"srs\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t6: 0,\n \t\t5: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([65,0,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar _a = require('./tokens'), sparqlTokenMap = _a.sparqlTokenMap, stardogSparqlTokens = _a.stardogSparqlTokens;\nimport { BaseSparqlParser } from './BaseSparqlParser';\nimport { Parser } from 'chevrotain';\nvar StardogSparqlParser = /** @class */ (function (_super) {\n    __extends(StardogSparqlParser, _super);\n    function StardogSparqlParser(options, tokens, shouldSkipAnalysis) {\n        if (tokens === void 0) { tokens = stardogSparqlTokens; }\n        var _this = _super.call(this, options, tokens) || this;\n        _this.Query = _this.OVERRIDE_RULE('Query', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.SelectQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.ConstructQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.DescribeQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.AskQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.PathQuery); } },\n            ]);\n            _this.SUBRULE(_this.ValuesClause);\n        });\n        _this.PathQuery = _this.RULE('PathQuery', function () {\n            _this.SUBRULE(_this.PathSpec);\n            _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n            _this.CONSUME(sparqlTokenMap.START);\n            _this.SUBRULE(_this.PathTerminal);\n            _this.CONSUME(sparqlTokenMap.END);\n            _this.SUBRULE1(_this.PathTerminal);\n            _this.SUBRULE(_this.Via);\n            _this.OPTION(function () { return _this.SUBRULE(_this.MaxLength); });\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.Via = _this.RULE('Via', function () {\n            _this.CONSUME(sparqlTokenMap.VIA);\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.GroupGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.Path); } },\n            ]);\n        });\n        _this.PathTerminal = _this.RULE('PathTerminal', function () {\n            _this.SUBRULE(_this.Var);\n            _this.OPTION(function () {\n                _this.OR([\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.Equals);\n                            _this.SUBRULE(_this.Constant);\n                        },\n                    },\n                    { ALT: function () { return _this.SUBRULE(_this.GroupGraphPattern); } },\n                ]);\n            });\n        });\n        _this.PathSpec = _this.RULE('PathSpec', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PATHS); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PATHS_SHORTEST); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PATHS_ALL); } },\n            ]);\n            _this.OPTION1(function () { return _this.CONSUME(sparqlTokenMap.CYCLIC); });\n        });\n        _this.GraphPatternNotTriples = _this.OVERRIDE_RULE('GraphPatternNotTriples', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.GroupOrUnionGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.OptionalGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.MinusGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.GraphGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.ServiceGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.Filter); } },\n                { ALT: function () { return _this.SUBRULE(_this.Bind); } },\n                { ALT: function () { return _this.SUBRULE(_this.Unnest); } },\n                { ALT: function () { return _this.SUBRULE(_this.InlineData); } },\n            ]);\n        });\n        _this.TriplesSameSubject = _this.OVERRIDE_RULE('TriplesSameSubject', function () {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.VarOrTerm);\n                        _this.SUBRULE(_this.PropertyListNotEmpty);\n                    },\n                },\n                {\n                    ALT: function () {\n                        // NOTE: Intentionally does not conform to the SPARQL* spec.\n                        // Stardog does not allow nesting of embedded triples.\n                        _this.SUBRULE(_this.EmbeddedTriplePattern);\n                        _this.SUBRULE1(_this.PropertyListNotEmpty, { ARGS: [true] });\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.TriplesNode);\n                        _this.SUBRULE(_this.PropertyList);\n                    },\n                },\n            ]);\n        });\n        // NOTE: Intentionally does not conform to the SPARQL* spec.\n        // Stardog does not allow embedded triples with object lists.\n        _this.PropertyListNotEmpty = _this.OVERRIDE_RULE('PropertyListNotEmpty', function (disallowEdgeProperties) {\n            _this.SUBRULE(_this.Verb);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.ObjectList);\n                    },\n                },\n                {\n                    GATE: function () { return !disallowEdgeProperties; },\n                    ALT: function () {\n                        _this.SUBRULE(_this.EmbeddedPropertyList);\n                        _this.SUBRULE(_this.Object);\n                    },\n                },\n            ]);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.SUBRULE1(_this.Verb);\n                    _this.OR1([\n                        {\n                            ALT: function () {\n                                _this.SUBRULE1(_this.ObjectList);\n                            },\n                        },\n                        {\n                            GATE: function () { return !disallowEdgeProperties; },\n                            ALT: function () {\n                                _this.SUBRULE1(_this.EmbeddedPropertyList);\n                                _this.SUBRULE1(_this.Object);\n                            },\n                        },\n                    ]);\n                });\n            });\n        });\n        // NOTE: Intentionally does not conform to the SPARQL* spec.\n        // Stardog does not allow nesting of embedded triples.\n        _this.EmbeddedPropertyList = _this.RULE('EmbeddedPropertyList', function () {\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.SUBRULE(_this.PropertyListNotEmpty, { ARGS: [true] });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.Object = _this.OVERRIDE_RULE('Object', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.GraphNode); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.EmbeddedTriplePattern); },\n                },\n            ]);\n        });\n        _this.TriplesSameSubjectPath = _this.OVERRIDE_RULE('TriplesSameSubjectPath', function () {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.VarOrTerm);\n                        _this.SUBRULE(_this.PropertyListPathNotEmpty);\n                    },\n                },\n                {\n                    ALT: function () {\n                        // NOTE: Intentionally does not conform to the SPARQL* spec.\n                        // Stardog does not allow nesting of embedded triples.\n                        _this.SUBRULE(_this.EmbeddedTriplePattern);\n                        _this.SUBRULE1(_this.PropertyListPathNotEmpty, { ARGS: [true] });\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.TriplesNodePath);\n                        _this.SUBRULE(_this.PropertyListPath);\n                    },\n                },\n            ]);\n        });\n        // NOTE: Intentionally does not conform to the SPARQL* spec.\n        // Stardog does not allow embedded triples with paths or object lists.\n        _this.PropertyListPathNotEmpty = _this.OVERRIDE_RULE('PropertyListPathNotEmpty', function (disallowEdgeProperties) {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.OR1([\n                            { ALT: function () { return _this.SUBRULE(_this.VerbPath); } },\n                            { ALT: function () { return _this.SUBRULE1(_this.VerbSimple); } },\n                        ]);\n                        _this.SUBRULE(_this.ObjectListPath);\n                    },\n                },\n                {\n                    GATE: function () { return !disallowEdgeProperties; },\n                    ALT: function () {\n                        _this.SUBRULE(_this.Verb);\n                        _this.SUBRULE(_this.EmbeddedPropertyListPath);\n                        _this.SUBRULE(_this.ObjectPath);\n                    },\n                },\n            ]);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.OR2([\n                        {\n                            ALT: function () {\n                                _this.OR3([\n                                    { ALT: function () { return _this.SUBRULE1(_this.VerbPath); } },\n                                    { ALT: function () { return _this.SUBRULE2(_this.VerbSimple); } },\n                                ]);\n                                _this.SUBRULE1(_this.ObjectListPath);\n                            },\n                        },\n                        {\n                            GATE: function () { return !disallowEdgeProperties; },\n                            ALT: function () {\n                                _this.SUBRULE1(_this.Verb);\n                                _this.SUBRULE1(_this.EmbeddedPropertyListPath);\n                                _this.SUBRULE1(_this.ObjectPath);\n                            },\n                        },\n                    ]);\n                });\n            });\n        });\n        // NOTE: Intentionally does not conform to the SPARQL* spec.\n        // Stardog does not allow nesting of embedded triples.\n        _this.EmbeddedPropertyListPath = _this.RULE('EmbeddedPropertyListPath', function () {\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.SUBRULE(_this.PropertyListPathNotEmpty, { ARGS: [true] });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.GraphNodePath = _this.OVERRIDE_RULE('GraphNodePath', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VarOrTermOrEmbeddedTriplePattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.TriplesNodePath); } },\n            ]);\n        });\n        // NOTE: Intentionally does not conform to the SPARQL* spec. Stardog does not\n        // allow nesting of embedded triples.\n        _this.EmbeddedTriplePattern = _this.RULE('EmbeddedTriplePattern', function () {\n            _this.CONSUME(sparqlTokenMap.LEmbed);\n            _this.SUBRULE(_this.VarOrBlankNodeOrIriOrLit);\n            _this.SUBRULE(_this.Verb);\n            _this.SUBRULE1(_this.VarOrBlankNodeOrIriOrLit);\n            _this.CONSUME(sparqlTokenMap.REmbed);\n        });\n        _this.VarOrTermOrEmbeddedTriplePattern = _this.RULE('VarOrTermOrEmbeddedTriplePattern', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.GraphTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.EmbeddedTriplePattern); } },\n            ]);\n        });\n        _this.Bind = _this.OVERRIDE_RULE('Bind', function () {\n            _this.CONSUME(sparqlTokenMap.BIND);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.ExpressionOrEmbeddedTriplePattern);\n            _this.CONSUME(sparqlTokenMap.AS);\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.ExpressionOrEmbeddedTriplePattern = _this.RULE('ExpressionOrEmbeddedTriplePattern', function () {\n            _this.OR([\n                {\n                    ALT: function () { return _this.SUBRULE(_this.Expression); },\n                },\n                {\n                    ALT: function () { return _this.SUBRULE(_this.EmbeddedTriplePattern); },\n                },\n            ]);\n        });\n        // NOTE: This is nearly equivalent to VarOrTerm, but excludes NIL.\n        _this.VarOrBlankNodeOrIriOrLit = _this.RULE('VarOrBlankNodeOrIriOrLit', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n            ]);\n        });\n        _this.Unnest = _this.RULE('Unnest', function () {\n            _this.CONSUME(sparqlTokenMap.UNNEST);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.AS);\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall = _this.OVERRIDE_RULE('BuiltInCall', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Aggregate); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LANG); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LANGMATCHES); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_DATATYPE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_BOUND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_IRI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_URI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_BNODE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_RAND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ABS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CEIL); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_FLOOR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ROUND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CONCAT); } },\n                { ALT: function () { return _this.SUBRULE(_this.SubstringExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRLEN); } },\n                { ALT: function () { return _this.SUBRULE(_this.StrReplaceExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_UCASE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LCASE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ENCODE_FOR_URI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CONTAINS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRSTARTS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRENDS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRBEFORE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRAFTER); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_YEAR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MONTH); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_DAY); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_HOURS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MINUTES); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SECONDS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_TIMEZONE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_TZ); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_NOW); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_UUID); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRUUID); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MD5); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA1); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA256); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA384); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA512); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_COALESCE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_IF); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRLANG); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRDT); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_sameTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isIRI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isURI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isBLANK); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isLITERAL); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isNUMERIC); } },\n                { ALT: function () { return _this.SUBRULE(_this.RegexExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.ExistsFunction); } },\n                { ALT: function () { return _this.SUBRULE(_this.NotExistsFunction); } },\n                // Stardog has some additional built-in functions, and supports user-defined custom functions\n                { ALT: function () { return _this.SUBRULE(_this.StardogOrCustomFunction); } },\n            ]);\n        });\n        _this.StardogOrCustomFunction = _this.RULE('StardogOrCustomFunction', function () {\n            _this.CONSUME(sparqlTokenMap.Unknown);\n            _this.SUBRULE(_this.ExpressionList);\n        });\n        _this.ConstructTemplate = _this.OVERRIDE_RULE('ConstructTemplate', function () {\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.OPTION(function () {\n                // Stardog supports the request of Quads in a Construct template. See Stardog issue #675\n                return _this.SUBRULE(_this.Quads);\n            });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        if (!shouldSkipAnalysis) {\n            Parser.performSelfAnalysis(_this);\n        }\n        return _this;\n    }\n    return StardogSparqlParser;\n}(BaseSparqlParser));\nexport { StardogSparqlParser };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a = require('./tokens'), turtleTokenTypes = _a.turtleTokenTypes, turtleTokenMap = _a.turtleTokenMap;\nimport { Parser, Lexer, } from 'chevrotain';\nvar TurtleParser = /** @class */ (function (_super) {\n    __extends(TurtleParser, _super);\n    function TurtleParser(config, tokens, lexerDefinition, performSelfAnalysis) {\n        if (config === void 0) { config = {}; }\n        if (tokens === void 0) { tokens = turtleTokenTypes; }\n        if (lexerDefinition === void 0) { lexerDefinition = tokens; }\n        if (performSelfAnalysis === void 0) { performSelfAnalysis = true; }\n        var _this = _super.call(this, tokens, __assign({ outputCst: true, recoveryEnabled: true }, config)) || this;\n        // Parsing Turtle requires that the parser keep a map of namespaces in state.\n        // Empty prefixes, for example, are allowed only if the empty prefix has been\n        // added to the namespaces map (for now, that's all this tracks). (TODO: We\n        // might want to use a visitor for this, but I'm doing it quick-and-dirty for\n        // now.)\n        // See here: https://www.w3.org/TR/turtle/#handle-PNAME_LN\n        _this.namespacesMap = {};\n        _this.semanticErrors = [];\n        // Clears the state that we have to manage on our own for each parse (see\n        // above for details).\n        _this.resetManagedState = function () {\n            _this.namespacesMap = {};\n            _this.semanticErrors = [];\n        };\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        // NOTE: This parser can parse in two modes, 'standard' and 'stardog'. The\n        // latter includes non-standard features like embedded triples patterns (edge\n        // properties).\n        _this.parse = function (document, mode) {\n            if (mode === void 0) { mode = 'standard'; }\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = _this.turtleDoc(0, [mode]);\n            // Next two items are copied so that they can be returned/held after parse\n            // state is cleared.\n            var errors = _this.errors.slice();\n            var semanticErrors = _this.semanticErrors.slice();\n            _this.resetManagedState();\n            return {\n                errors: errors,\n                semanticErrors: semanticErrors,\n                cst: cst,\n            };\n        };\n        _this.turtleDoc = _this.RULE('turtleDoc', function (mode) {\n            var allowEdgeProperties = mode === 'stardog';\n            _this.MANY(function () {\n                return _this.SUBRULE(_this.statement, { ARGS: [allowEdgeProperties] });\n            });\n        });\n        _this.statement = _this.RULE('statement', function (allowEdgeProperties) {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.directive); } },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.triples, { ARGS: [allowEdgeProperties] });\n                        _this.CONSUME(turtleTokenMap.Period);\n                    },\n                },\n            ]);\n        });\n        _this.directive = _this.RULE('directive', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.prefixID); } },\n                { ALT: function () { return _this.SUBRULE(_this.base); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlPrefix); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlBase); } },\n            ]);\n        });\n        _this.prefixID = _this.RULE('prefixID', function () {\n            _this.CONSUME(turtleTokenMap.TTL_PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.base = _this.RULE('base', function () {\n            _this.CONSUME(turtleTokenMap.TTL_BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.sparqlBase = _this.RULE('sparqlBase', function () {\n            _this.CONSUME(turtleTokenMap.BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n        });\n        _this.sparqlPrefix = _this.RULE('sparqlPrefix', function () {\n            _this.CONSUME(turtleTokenMap.PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        // ALSO NOTE: Intentionally does not conform to the RDF* spec.\n        // Stardog does not allow nesting of embedded triples.\n        _this.triples = _this.RULE('triples', function (allowEdgeProperties) {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.subject);\n                        _this.SUBRULE1(_this.predicateObjectList, {\n                            ARGS: [allowEdgeProperties],\n                        });\n                    },\n                },\n                {\n                    GATE: function () { return Boolean(allowEdgeProperties); },\n                    ALT: function () {\n                        _this.SUBRULE(_this.EmbeddedTriplePattern);\n                        _this.SUBRULE(_this.predicateObjectList);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.blankNodePropertyList, {\n                            ARGS: [allowEdgeProperties],\n                        });\n                        _this.OPTION(function () {\n                            return _this.SUBRULE2(_this.predicateObjectList, {\n                                ARGS: [allowEdgeProperties],\n                            });\n                        });\n                    },\n                },\n            ]);\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        // ALSO NOTE: Intentionally does not conform to the RDF* spec.\n        // Stardog does not allow nesting of embedded triples.\n        _this.EmbeddedTriplePattern = _this.RULE('EmbeddedTriplePattern', function () {\n            _this.CONSUME(turtleTokenMap.LEmbed);\n            _this.SUBRULE(_this.triples);\n            _this.CONSUME(turtleTokenMap.REmbed);\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        // ALSO NOTE: Intentionally does not conform to the RDF* spec.\n        // Stardog does not allow embedded triples with object lists.\n        _this.predicateObjectList = _this.RULE('predicateObjectList', function (allowEdgeProperties) {\n            _this.SUBRULE(_this.verb);\n            _this.OR([\n                {\n                    ALT: function () {\n                        return _this.SUBRULE(_this.objectList, { ARGS: [allowEdgeProperties] });\n                    },\n                },\n                {\n                    GATE: function () { return Boolean(allowEdgeProperties); },\n                    ALT: function () {\n                        _this.SUBRULE(_this.EmbeddedPredicateObjectList);\n                        _this.SUBRULE(_this.object, { ARGS: [allowEdgeProperties] });\n                    },\n                },\n            ]);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.SUBRULE1(_this.verb);\n                    _this.OR1([\n                        {\n                            ALT: function () {\n                                return _this.SUBRULE1(_this.objectList, { ARGS: [allowEdgeProperties] });\n                            },\n                        },\n                        {\n                            GATE: function () { return Boolean(allowEdgeProperties); },\n                            ALT: function () {\n                                _this.SUBRULE1(_this.EmbeddedPredicateObjectList);\n                                _this.SUBRULE1(_this.object, { ARGS: [allowEdgeProperties] });\n                            },\n                        },\n                    ]);\n                });\n            });\n        });\n        // NOTE: Not part of Turtle spec. Part of Stardog's support for edge\n        // properties/embedded triples/a subset of RDF*.\n        // ALSO NOTE: Intentionally does not conform to the RDF* spec.\n        // Stardog does not allow nesting of embedded triples.\n        _this.EmbeddedPredicateObjectList = _this.RULE('EmbeddedPredicateObjectList', function () {\n            _this.CONSUME(turtleTokenMap.LCurly);\n            _this.SUBRULE(_this.predicateObjectList);\n            _this.CONSUME(turtleTokenMap.RCurly);\n        });\n        _this.subject = _this.RULE('subject', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n            ]);\n        });\n        _this.predicate = _this.RULE('predicate', function () {\n            _this.SUBRULE(_this.iri);\n        });\n        _this.objectList = _this.RULE('objectList', function (allowEdgeProperties) {\n            _this.SUBRULE(_this.object, { ARGS: [allowEdgeProperties] });\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Comma);\n                _this.SUBRULE1(_this.object, { ARGS: [allowEdgeProperties] });\n            });\n        });\n        _this.verb = _this.RULE('verb', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.predicate); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.A); } },\n            ]);\n        });\n        _this.literal = _this.RULE('literal', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n            ]);\n        });\n        _this.blankNodePropertyList = _this.RULE('blankNodePropertyList', function (allowEdgeProperties) {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.SUBRULE(_this.predicateObjectList, { ARGS: [allowEdgeProperties] });\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.object = _this.RULE('object', function (allowEdgeProperties) {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n                {\n                    ALT: function () {\n                        return _this.SUBRULE(_this.blankNodePropertyList, {\n                            ARGS: [allowEdgeProperties],\n                        });\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE(_this.literal); } },\n            ]);\n        });\n        _this.collection = _this.RULE('collection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () { return _this.SUBRULE(_this.object); });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.NumericLiteral = _this.RULE('NumericLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.INTEGER); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DECIMAL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DOUBLE); } },\n            ]);\n        });\n        _this.RDFLiteral = _this.RULE('RDFLiteral', function () {\n            _this.SUBRULE(_this.String);\n            _this.OPTION(function () {\n                _this.OR([\n                    { ALT: function () { return _this.CONSUME(turtleTokenMap.LANGTAG); } },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(turtleTokenMap.DoubleCaret);\n                            _this.SUBRULE(_this.iri);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.BooleanLiteral = _this.RULE('BooleanLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.TRUE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.FALSE); } },\n            ]);\n        });\n        _this.String = _this.RULE('String', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_QUOTE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE); } },\n                {\n                    ALT: function () {\n                        return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE);\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_QUOTE); } },\n            ]);\n        });\n        _this.iri = _this.RULE('iri', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.IRIREF); } },\n                { ALT: function () { return _this.SUBRULE(_this.PrefixedName); } },\n            ]);\n        });\n        _this.PrefixedName = _this.RULE('PrefixedName', function () {\n            var prefixedNameToken = _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_LN); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_NS); } },\n            ]);\n            var pnameNsImage = prefixedNameToken.image.slice(0, prefixedNameToken.image.indexOf(':'));\n            if (!(pnameNsImage in _this.namespacesMap)) {\n                _this.semanticErrors.push({\n                    name: 'NoNamespacePrefixError',\n                    message: 'A prefix was used for which there was no namespace defined.',\n                    token: prefixedNameToken,\n                    context: {\n                        ruleStack: _this.getHumanReadableRuleStack(),\n                        ruleOccurrenceStack: _this.RULE_OCCURRENCE_STACK.slice(),\n                    },\n                    resyncedTokens: [],\n                });\n            }\n        });\n        _this.BlankNode = _this.RULE('BlankNode', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.BLANK_NODE_LABEL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.ANON); } },\n            ]);\n        });\n        _this.lexer = new Lexer(lexerDefinition);\n        if (performSelfAnalysis) {\n            Parser.performSelfAnalysis(_this);\n        }\n        return _this;\n    }\n    return TurtleParser;\n}(Parser));\nexport { TurtleParser };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar baseTokens = require('./tokens').baseTokens;\nimport { BaseSparqlParser } from './BaseSparqlParser';\nimport { Parser } from 'chevrotain';\nvar W3SpecSparqlParser = /** @class */ (function (_super) {\n    __extends(W3SpecSparqlParser, _super);\n    function W3SpecSparqlParser(options) {\n        var _this = _super.call(this, options, baseTokens) || this;\n        Parser.performSelfAnalysis(_this);\n        return _this;\n    }\n    return W3SpecSparqlParser;\n}(BaseSparqlParser));\nexport { W3SpecSparqlParser };\n","export * from './BaseSparqlParser';\nexport * from './W3SpecSparqlParser';\nexport * from './StardogSparqlParser';\n// Convenience imports/exports that aren't core functionality:\n// NOTE: Tokens MUST be imported using CommonJS syntax; see here: https://github.com/SAP/chevrotain/issues/345\nexport var sparqlTokens = require('./tokens');\nexport var keywords = require('./keywords').keywords;\nexport var terminals = require('./terminals').terminals;\n","var _a;\nvar _b = require('../turtle/tokens'), turtleTokenTypes = _b.turtleTokenTypes, turtleTokenMap = _b.turtleTokenMap;\nvar sparqlTokenMap = require('../sparql/tokens').sparqlTokenMap;\nimport { createToken } from 'chevrotain';\nimport { CATCH_ALL_AT_LEAST_ONE } from '../helpers/matchers';\nvar LexerMode;\n(function (LexerMode) {\n    LexerMode[\"TURTLE\"] = \"turtle\";\n    LexerMode[\"IFCLAUSE\"] = \"ifclause\";\n    LexerMode[\"THENCLAUSE\"] = \"thenclause\";\n})(LexerMode || (LexerMode = {}));\nvar Rule = createToken({\n    name: 'Rule',\n    pattern: /rule/i,\n});\nvar If = createToken({\n    name: 'If',\n    pattern: /if/i,\n    push_mode: LexerMode.IFCLAUSE,\n});\nvar Then = createToken({\n    name: 'Then',\n    pattern: /then/i,\n    push_mode: LexerMode.THENCLAUSE,\n});\nvar EndThen = createToken({\n    name: 'EndThen',\n    pattern: '}',\n    pop_mode: true,\n});\n// NOTE: Not a SPARQL GroupGraphPattern. Rather, a placeholder for one. We have\n// to let the SRS parser create this token, then replace with a token returned\n// by the SPARQL sub-parser.\nvar GroupGraphPattern = createToken({\n    name: 'GroupGraphPattern',\n    pattern: function (text, startOffset) {\n        if (startOffset === void 0) { startOffset = 0; }\n        // Capture a single brace and then anything up to its closing brace.\n        if (text[startOffset] !== '{') {\n            return null;\n        }\n        var unclosedBraceCount = 1;\n        var cursor;\n        for (cursor = startOffset + 1; cursor < text.length && unclosedBraceCount > 0; cursor++) {\n            if (text[cursor] === '{') {\n                unclosedBraceCount++;\n            }\n            else if (text[cursor] === '}') {\n                unclosedBraceCount--;\n            }\n        }\n        if (unclosedBraceCount > 0) {\n            return null;\n        }\n        return CATCH_ALL_AT_LEAST_ONE.exec(text.slice(startOffset, cursor));\n    },\n    line_breaks: true,\n    pop_mode: true,\n});\n// NOTE: Not a SPARQL TriplesBlock. Rather, a placeholder for one. We have\n// to let the SRS parser create this token, then replace with a token returned\n// by the SPARQL sub-parser.\nvar TriplesBlock = createToken({\n    name: 'TriplesBlock',\n    pattern: /[^{}]+/,\n    line_breaks: true,\n});\nvar indexOfIriRef = turtleTokenTypes.indexOf(turtleTokenMap.IRIREF);\nexport var multiModeLexerDefinition = {\n    modes: (_a = {},\n        _a[LexerMode.TURTLE] = turtleTokenTypes.slice(0, indexOfIriRef + 1).concat([\n            Rule,\n            If,\n            Then\n        ], turtleTokenTypes.slice(indexOfIriRef + 1)),\n        _a[LexerMode.IFCLAUSE] = [turtleTokenMap.WhiteSpace, GroupGraphPattern],\n        _a[LexerMode.THENCLAUSE] = [\n            turtleTokenMap.WhiteSpace,\n            sparqlTokenMap.LCurly,\n            EndThen,\n            TriplesBlock,\n        ],\n        _a),\n    defaultMode: LexerMode.TURTLE,\n};\nexport var srsTokenMap = {\n    Rule: Rule,\n    If: If,\n    Then: Then,\n    EndThen: EndThen,\n    GroupGraphPattern: GroupGraphPattern,\n    TriplesBlock: TriplesBlock,\n};\nexport var srsTokenTypes = [\n    Rule,\n    If,\n    Then,\n    EndThen,\n    sparqlTokenMap.LCurly\n].concat(turtleTokenTypes, [\n    GroupGraphPattern,\n    TriplesBlock,\n]);\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { StardogSparqlParser } from '../sparql';\n// Returns a custom visitor that extends the BaseVisitor for the SRS parser.\n// When the visitor encounters an SRS `IfClause` or an SRS `ThenClause`, it\n// delegates parsing of the block to the existing SPARQL parser's relevant\n// sub-rule (GroupGraphPattern or TriplesBlock).\nexport var getSparqlSrsVisitor = function (BaseVisitor) {\n    var SparqlSrsVisitor = /** @class */ (function (_super) {\n        __extends(SparqlSrsVisitor, _super);\n        function SparqlSrsVisitor() {\n            var _this = _super.call(this) || this;\n            _this.groupGraphPatterns = [];\n            _this.triplesBlocks = [];\n            // Get and store the SPARQL `GroupGraphPattern` that should replace the\n            // SRS placeholder `GroupGraphPattern` token inside of an SRS `IfClause`.\n            _this.IfClause = function (ctx, cstInputTokens) {\n                var GroupGraphPattern = ctx.GroupGraphPattern;\n                _this.$storePlaceholderTokenReplacement({\n                    tokenStore: _this.groupGraphPatterns,\n                    originalTokenContext: GroupGraphPattern,\n                    subParserRule: _this.sparqlParser.parseGroupGraphPattern.bind(_this.sparqlParser),\n                    cstInputTokens: cstInputTokens,\n                });\n            };\n            // Get and store the SPARQL `TriplesBlock` that should replace the\n            // SRS placeholder `TriplesBlock` token inside of an SRS `ThenClause`.\n            _this.ThenClause = function (ctx, cstInputTokens) {\n                var TriplesBlock = ctx.TriplesBlock;\n                _this.$storePlaceholderTokenReplacement({\n                    tokenStore: _this.triplesBlocks,\n                    originalTokenContext: TriplesBlock,\n                    subParserRule: _this.sparqlParser.parseTriplesBlock.bind(_this.sparqlParser),\n                    cstInputTokens: cstInputTokens,\n                });\n            };\n            // Utility methods ('$' prefix is necessary to prevent chevrotain's\n            // `validateVisitor` method from complaining that these are not grammar\n            // rules):\n            _this.$storePlaceholderTokenReplacement = function (_a) {\n                var tokenStore = _a.tokenStore, _b = _a.originalTokenContext, originalTokenContext = _b === void 0 ? [] : _b, subParserRule = _a.subParserRule, cstInputTokens = _a.cstInputTokens, stripWrappers = _a.stripWrappers;\n                var originalToken = originalTokenContext[0];\n                if (!originalToken || typeof originalToken.image !== 'string') {\n                    return;\n                }\n                var replacement = _this.$getPlaceholderTokenReplacement(originalToken, subParserRule, cstInputTokens, stripWrappers);\n                tokenStore.push({\n                    parseResult: replacement,\n                    originalToken: originalToken,\n                });\n            };\n            _this.$getPlaceholderTokenReplacement = function (originalToken, subParserRule, cstInputTokens, stripWrappers) {\n                if (stripWrappers === void 0) { stripWrappers = false; }\n                // Because we are replacing tokens by delegating the parsing of parts\n                // of the original document to sub-parsers, we add some empty padding to\n                // the part that is passed to the sub-parser, where the amount of padding\n                // matches the start line and offset of the token we are replacing. This\n                // ensures that all tokens have the right positions in the resulting CST\n                // (otherwise, the sub-parsers assume that the text starts at offset 0).\n                var image = originalToken.image;\n                var frontPadding = '';\n                var latestEndOffset = 0;\n                var latestEndLine = 0;\n                // Traditional `for` loop because we need to `break`.\n                for (var i = 0; i < cstInputTokens.length; i++) {\n                    var token = cstInputTokens[i];\n                    if (i > 0) {\n                        // Account for whitespace between this token and the previous one.\n                        var linesBetweenTokens = token.startLine - latestEndLine;\n                        var untokenizedSpaceBetweenTokens = token.startOffset - 1 - latestEndOffset - linesBetweenTokens;\n                        if (linesBetweenTokens > 0) {\n                            frontPadding += '\\n'.repeat(linesBetweenTokens - 1);\n                            frontPadding +=\n                                ' '.repeat(Math.max(untokenizedSpaceBetweenTokens, 0)) + '\\n';\n                        }\n                        else {\n                            frontPadding += ' '.repeat(Math.max(untokenizedSpaceBetweenTokens, 0));\n                        }\n                    }\n                    if (token === originalToken) {\n                        break;\n                    }\n                    // We haven't hit the token we're replacing yet, so we need to continue\n                    // accumulating padding by adding the newlines _inside_ the current\n                    // token, and replacing all non-newline characters inside the current\n                    // token with spaces.\n                    var newlinesInToken = token.image.split('\\n');\n                    newlinesInToken.forEach(function (line, idx) {\n                        if (idx > 0) {\n                            frontPadding += '\\n';\n                        }\n                        frontPadding += ' '.repeat(line.length);\n                    });\n                    // Track where the current token ends, in case the next token starts\n                    // much later (meaning that there was untokenized stuff (e.g.,\n                    // whitespace) in between) that needs to be accounted for.\n                    latestEndOffset = token.endOffset;\n                    latestEndLine = token.endLine;\n                }\n                // Finally, if we're stripping the wrappers (e.g., braces), replace them\n                // with whitespace.\n                var parseImage = stripWrappers ? \" \" + image.slice(1, -1) + \" \" : image;\n                return subParserRule(\"\" + frontPadding + parseImage);\n            };\n            _this.$getGroupGraphPatterns = function () { return _this.groupGraphPatterns; };\n            _this.$getTriplesBlocks = function () { return _this.triplesBlocks; };\n            _this.$resetState = function () {\n                _this.groupGraphPatterns = [];\n                _this.triplesBlocks = [];\n            };\n            _this.sparqlParser = new StardogSparqlParser();\n            _this.validateVisitor();\n            return _this;\n        }\n        return SparqlSrsVisitor;\n    }(BaseVisitor));\n    return new SparqlSrsVisitor();\n};\nexport function reduceVisitorItemErrors(acc, item) {\n    return acc.concat(item.parseResult.errors);\n}\n// The SRS cst contains placeholder tokens for unparsed blocks of SPARQL\n// inside of an SRS `IfClause` or `ThenClause`. This method swaps out those\n// placeholders with the actual SPARQL CST created by the SparqlSrsVisitor.\nexport function findAndSwapPlaceholders(node, parentNode, visitorItems, key) {\n    var matchingVisitorItem = visitorItems.find(function (visitorItem) { return visitorItem.originalToken === node; });\n    if (matchingVisitorItem) {\n        parentNode.children[key] = [matchingVisitorItem.parseResult.cst];\n    }\n    return matchingVisitorItem;\n}\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexport var defaultNamespacesMap = Object.freeze(['', 'rdf', 'rdfs', 'xsd', 'owl', 'stardog'].reduce(function (namespacesMap, prefix) {\n    var _a;\n    return (__assign({}, namespacesMap, (_a = {}, _a[prefix] = true, _a)));\n}, {}));\n","var _a;\nimport { isCstNode, traverse } from '../helpers/cst';\nimport { sparqlTokenMap } from '../sparql/tokens';\n// RegEx for matching any relevant children of `Expression` inside of `Bind`;\n// used to avoid false negatives in the check for disallowed literals inside of\n// `Bind`.\nvar subExpressionMatcher = /(?:[A-Z]+Expression|ValueLogical)$/i;\n// Default: just don't abort early at all. Used in the stack unwinding process\n// that creates an error rule stack.\nvar defaultEarlyAbortTest = function () { return false; };\n// Tokens that are allowed in SPARQL but not inside the `IfClause` of SRS.\nvar disallowedSparqlTokenNameToRuleMap = (_a = {},\n    _a[sparqlTokenMap.EXISTS.tokenName] = 'ExistsFunction',\n    _a[sparqlTokenMap.NOT_EXISTS.tokenName] = 'NotExistsFunction',\n    _a[sparqlTokenMap.NOW.tokenName] = 'BuiltInCall_NOW',\n    _a[sparqlTokenMap.LEmbed.tokenName] = 'LeftEmbed',\n    _a[sparqlTokenMap.REmbed.tokenName] = 'RightEmbed',\n    _a);\nvar disallowedSparqlTokenNames = Object.keys(disallowedSparqlTokenNameToRuleMap);\n// Token names for literals; these are not allowed in the subject position of\n// certain patterns in SRS.\nvar disallowedSparqlLiteralTokenNames = [\n    sparqlTokenMap.DOUBLE,\n    sparqlTokenMap.DECIMAL,\n    sparqlTokenMap.INTEGER,\n    sparqlTokenMap.DOUBLE_POSITIVE,\n    sparqlTokenMap.DECIMAL_POSITIVE,\n    sparqlTokenMap.INTEGER_POSITIVE,\n    sparqlTokenMap.DOUBLE_NEGATIVE,\n    sparqlTokenMap.DECIMAL_NEGATIVE,\n    sparqlTokenMap.INTEGER_NEGATIVE,\n    sparqlTokenMap.STRING_LITERAL1,\n    sparqlTokenMap.STRING_LITERAL2,\n    sparqlTokenMap.STRING_LITERAL_LONG1,\n    sparqlTokenMap.STRING_LITERAL_LONG2,\n].map(function (token) { return token.tokenName; });\n// Helper functions for more \"literate\" code.\nvar isCstNodeTraverseContext = function (ctx) {\n    return Boolean(ctx && ctx.node);\n};\n// Is the parent node an Expression child of a Bind node or an Expression\n// child of an ExpressionOrEmbeddedTriplePattern node that is itself a child\n// of a Bind node? The former accounts for standard SPARQL; the latter accounts\n// for Stardog SPARQL with edge properties. This lets certain custom errors\n// work with the output of either the W3CSpecSparqlParser or the\n// StardogSparqlParser.\nvar isParentBindOrBoundExpressionOrEmbeddedTriplePattern = function (parentCtx) {\n    if (!isCstNodeTraverseContext(parentCtx)) {\n        return false;\n    }\n    var parentNodeName = parentCtx.node.name;\n    return (parentNodeName === 'Bind' ||\n        (parentNodeName === 'ExpressionOrEmbeddedTriplePattern' &&\n            isCstNodeTraverseContext(parentCtx.parentCtx) &&\n            parentCtx.parentCtx.node.name === 'Bind'));\n};\n// Walks back up the tree to construct the rule stack, first going upward\n// through the provided `traverseCtx`, and then continuing up through the\n// `fullCtx`. `traverseCtx` is intended to be the \"inner\" ITraverseContext\n// representing the results of the SPARQL sub-parser used by the\n// SparqlSrsVisitor. `fullCtx` is intended to be the \"outer\" ITraverseContext\n// representing the results of the SRS parser itself. The SRS parser delegates\n// blocks of SPARQL to a SPARQL sub-parser, so, by combinging the two contexts,\n// we get the full parser stack. The traversal adds rules to the stack only\n// once a rule matching one of the `startRuleNames` is hit.\n//\n// At the point where the traversal of `traverseCtx` ends and the traversal of\n// `fullCtx` begins, you may need to insert a rule into the stack (e.g.,\n// because the `traverseCtx` doesn't include the top-level rule for that\n// parse). If so, use `topLevelSubParserRuleName`.\n//\n// In some cases, there is a need to track nodes and potentially bail out early\n// at certain points while constructing the rule stack. For that, use\n// `earlyAbortTest`. If that method returns true, the rule stack construction\n// will abort.\nfunction getCustomErrorRuleStack(traverseCtx, fullCtx, startRuleNames, topLevelSubParserRuleName, earlyAbortTest) {\n    if (earlyAbortTest === void 0) { earlyAbortTest = defaultEarlyAbortTest; }\n    if (!traverseCtx) {\n        return []; // forced early exit\n    }\n    var ruleStack = [];\n    var stackUnwindingPointer = traverseCtx;\n    // Move up from current context to the first rule that should \"start\" the stack.\n    while (isCstNode(stackUnwindingPointer.node) &&\n        !startRuleNames.includes(stackUnwindingPointer.node.name)) {\n        if (earlyAbortTest(stackUnwindingPointer)) {\n            return [];\n        }\n        stackUnwindingPointer = stackUnwindingPointer.parentCtx;\n    }\n    // Now start adding all found rules to the stack as we move upward.\n    while (isCstNode(stackUnwindingPointer.node)) {\n        ruleStack.unshift(stackUnwindingPointer.node.name);\n        if (earlyAbortTest(stackUnwindingPointer)) {\n            return [];\n        }\n        stackUnwindingPointer = stackUnwindingPointer.parentCtx;\n    }\n    // If the rule stack of the sub-parser doesn't get all the way up to the\n    // relevant top-level rule, this will force the top-level rule to be put onto\n    // the stack before proceeding.\n    if (typeof topLevelSubParserRuleName === 'string') {\n        ruleStack.unshift(topLevelSubParserRuleName);\n    }\n    // Now that we've got the sub-parser's rule stack, we trace the remaining\n    // outer parser's stack to get to the true bottom of the stack.\n    stackUnwindingPointer = fullCtx;\n    while (stackUnwindingPointer) {\n        if (isCstNode(stackUnwindingPointer.node)) {\n            ruleStack.unshift(stackUnwindingPointer.node.name);\n            if (earlyAbortTest(stackUnwindingPointer)) {\n                return [];\n            }\n        }\n        stackUnwindingPointer = stackUnwindingPointer.parentCtx;\n    }\n    return ['SrsDoc'].concat(ruleStack);\n}\nvar getCustomIRecognitionException = function (_a) {\n    var name = _a.name, message = _a.message, node = _a.node, ruleStack = _a.ruleStack;\n    return ({\n        name: name,\n        message: message,\n        token: node,\n        context: {\n            ruleStack: ruleStack,\n            // `ruleOccurrenceStack` is meaningless to us as it just\n            // records the number used when the chevrotain rule is\n            // created (e.g., SUBRULE1 vs SUBRULE2); we can't know that\n            // or care about that here\n            ruleOccurrenceStack: [],\n        },\n        resyncedTokens: [],\n    });\n};\nvar getNoPrefixError = function (node, parentCtx, fullCtx, subParserRuleName) {\n    return getCustomIRecognitionException({\n        name: 'NoNamespacePrefixError',\n        message: \"A prefix (\\\"\" + node.image + \"\\\") was used for which there was no namespace defined.\",\n        node: node,\n        ruleStack: getCustomErrorRuleStack(parentCtx, fullCtx, ['PrefixedName'], subParserRuleName),\n    });\n};\nvar getDisallowedTokenError = function (node, parentCtx, fullCtx, subParserRuleName) {\n    if (subParserRuleName === void 0) { subParserRuleName = 'GroupGraphPattern'; }\n    return getCustomIRecognitionException({\n        name: 'DisallowedTokenError',\n        message: \"Token \" + node.tokenType.tokenName + \" cannot be used in Stardog Rules.\",\n        node: node,\n        ruleStack: getCustomErrorRuleStack(parentCtx, fullCtx, [disallowedSparqlTokenNameToRuleMap[node.tokenType.tokenName]], subParserRuleName),\n    });\n};\nvar getDisallowedLiteralError = function (node, parentCtx, fullCtx, subParserRuleName) {\n    var foundPropertyListPathNotEmptyCtx = null;\n    var didFindSubExpressionWithMultipleChildren = false;\n    var errorContext = null;\n    var errorRuleStack = getCustomErrorRuleStack(parentCtx, fullCtx, ['Expression', 'TriplesSameSubjectPath'], subParserRuleName, function (stackCtx) {\n        var node = stackCtx.node, parentCtx = stackCtx.parentCtx;\n        var nodeName = node.name;\n        if (nodeName === 'PropertyListPathNotEmpty') {\n            // Track the found `PropertyListPathNotEmmpty` node and keep going.\n            foundPropertyListPathNotEmptyCtx = stackCtx;\n            return false;\n        }\n        if (!didFindSubExpressionWithMultipleChildren &&\n            subExpressionMatcher.test(nodeName)) {\n            // Track that we found a sub-expression with multiple children, then\n            // keep going.\n            didFindSubExpressionWithMultipleChildren =\n                parentCtx.node.children[nodeName].length > 1;\n            return false;\n        }\n        var isExpression = nodeName === 'Expression';\n        var isTriplesBlock = nodeName === 'TriplesSameSubjectPath';\n        if (!isExpression && !isTriplesBlock) {\n            return false;\n        }\n        var isBoundExpressionWithLiteralSubject = isExpression &&\n            // If we've found a sub-expression with multiple children, it's highly\n            // likely (maybe definite?) that this `Bind` does not include an invalid\n            // literal as a subject, so we don't count this as an error. This _may_\n            // allow rare false positives, but it definitely prevents false\n            // negatives of the sort described in https://github.com/stardog-union/millan/issues/22\n            !didFindSubExpressionWithMultipleChildren &&\n            isParentBindOrBoundExpressionOrEmbeddedTriplePattern(parentCtx);\n        var isTriplesBlockSubject = isTriplesBlock &&\n            (!foundPropertyListPathNotEmptyCtx ||\n                foundPropertyListPathNotEmptyCtx.parentCtx.node.name !==\n                    'TriplesSameSubjectPath');\n        if (isBoundExpressionWithLiteralSubject || isTriplesBlockSubject) {\n            errorContext = isBoundExpressionWithLiteralSubject\n                ? 'Bind'\n                : 'TriplesBlock';\n            return false;\n        }\n        // We got to the Expression or TriplesBlock containing the literal, but\n        // the literal wasn't in the subject position (i.e., was not the lead\n        // Expression inside of Bind and was not the subject of\n        // TriplesSameSubjectPath), so we can bail early here.\n        return true;\n    });\n    if (errorRuleStack.length === 0) {\n        return;\n    }\n    return getCustomIRecognitionException({\n        name: 'DisallowedLiteralError',\n        message: \"Token \" + node.tokenType.tokenName + \" (\" + node.image + \") cannot be used as a subject inside of a \" + errorContext + \" in Stardog Rules Syntax.\",\n        node: node,\n        ruleStack: errorRuleStack,\n    });\n};\n// Since the SRS parser delegates to the SPARQL parser inside of\n// an SRS `IfClause`, and SPARQL allows certain constructs that SRS does not,\n// we need to create our own errors for SRS-specific restrictions here.\nexport function addIfClauseErrorsToErrors(_a) {\n    var cst = _a.cst, namespacesMap = _a.namespacesMap, fullCtx = _a.fullCtx, errors = _a.errors, semanticErrors = _a.semanticErrors;\n    traverse(cst, function (ctx, next) {\n        var node = ctx.node, parentCtx = ctx.parentCtx;\n        if (isCstNode(node)) {\n            return next();\n        }\n        var tokenName = node.tokenType.tokenName;\n        if (disallowedSparqlTokenNames.some(function (name) { return name === tokenName; })) {\n            errors.push(getDisallowedTokenError(node, parentCtx, fullCtx));\n        }\n        if (disallowedSparqlLiteralTokenNames.some(function (tokenName) { return tokenName === node.tokenType.tokenName; })) {\n            var error = getDisallowedLiteralError(node, parentCtx, fullCtx, 'GroupGraphPattern');\n            if (error) {\n                errors.push(error);\n            }\n        }\n        if (tokenName === 'PNAME_NS' || tokenName === 'PNAME_LN') {\n            var prefix = node.image.split(':').shift();\n            if (!namespacesMap[prefix]) {\n                semanticErrors.push(getNoPrefixError(node, parentCtx, fullCtx, 'GroupGraphPattern'));\n            }\n        }\n    });\n    return {\n        errors: errors,\n        semanticErrors: semanticErrors,\n    };\n}\nexport function addThenClauseErrorsToErrors(_a) {\n    var cst = _a.cst, namespacesMap = _a.namespacesMap, errors = _a.errors, semanticErrors = _a.semanticErrors, fullCtx = _a.fullCtx;\n    traverse(cst, function (ctx, next) {\n        var node = ctx.node, parentCtx = ctx.parentCtx;\n        if (isCstNode(node)) {\n            return next();\n        }\n        var tokenName = node.tokenType.tokenName;\n        if (disallowedSparqlLiteralTokenNames.some(function (tokenName) { return tokenName === node.tokenType.tokenName; })) {\n            var error = getDisallowedLiteralError(node, parentCtx, fullCtx, 'GroupGraphPattern');\n            if (error) {\n                errors.push(error);\n            }\n        }\n        // No embedded triple patterns in SRS THEN clauses.\n        if (tokenName === sparqlTokenMap.LEmbed.name ||\n            tokenName === sparqlTokenMap.REmbed.name) {\n            errors.push(getDisallowedTokenError(node, parentCtx, fullCtx, 'TriplesBlock'));\n        }\n        if (tokenName === 'PNAME_NS' || tokenName === 'PNAME_LN') {\n            var prefix = node.image.split(':').shift();\n            if (!namespacesMap[prefix]) {\n                semanticErrors.push(getNoPrefixError(node, parentCtx, fullCtx, 'TriplesBlock'));\n            }\n        }\n    });\n    return {\n        errors: errors,\n        semanticErrors: semanticErrors,\n    };\n}\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// tslint:disable:function-name\nvar sparqlTokenMap = require('../sparql/tokens').sparqlTokenMap;\nvar _a = require('./tokens'), srsTokenMap = _a.srsTokenMap, srsTokenTypes = _a.srsTokenTypes, multiModeLexerDefinition = _a.multiModeLexerDefinition;\nimport { Parser, Lexer, } from 'chevrotain';\nimport { TurtleParser } from '../turtle/TurtleParser';\nimport { isCstNode, unsafeTraverse } from '../helpers/cst';\nimport { defaultNamespacesMap } from 'turtle/defaultNamespaces';\nimport { getSparqlSrsVisitor, reduceVisitorItemErrors, findAndSwapPlaceholders, } from './visitor';\nimport { addThenClauseErrorsToErrors, addIfClauseErrorsToErrors, } from './customErrors';\nvar SrsParser = /** @class */ (function (_super) {\n    __extends(SrsParser, _super);\n    function SrsParser(config) {\n        var _this = _super.call(this, __assign({ outputCst: true, recoveryEnabled: true }, config), srsTokenTypes, multiModeLexerDefinition, false) || this;\n        _this.baseNamespacesMap = Object.freeze(__assign({}, defaultNamespacesMap));\n        _this.namespacesMap = {};\n        _this.visitCst = function (cst) {\n            // To save resources while parsing, the sparqlSrsVisitor is a singleton.\n            if (!_this.sparqlSrsVisitor) {\n                var BaseSrsVisitor = _this.getBaseCstVisitorConstructorWithDefaults();\n                _this.sparqlSrsVisitor = getSparqlSrsVisitor(BaseSrsVisitor);\n            }\n            else {\n                _this.sparqlSrsVisitor.$resetState();\n            }\n            _this.sparqlSrsVisitor.visit(cst, _this.input);\n        };\n        _this.getSparqlRulesFromVisitor = function (cst) {\n            _this.visitCst(cst);\n            return {\n                groupGraphPatterns: _this.sparqlSrsVisitor.$getGroupGraphPatterns(),\n                triplesBlocks: _this.sparqlSrsVisitor.$getTriplesBlocks(),\n            };\n        };\n        _this.resetManagedState = function () {\n            _this.namespacesMap = __assign({}, defaultNamespacesMap);\n            _this.semanticErrors = [];\n        };\n        _this.setBaseNamespaces = function (newBaseNamespaces) {\n            _this.baseNamespacesMap = __assign({}, newBaseNamespaces);\n        };\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        _this.parse = function (document, mode) {\n            if (mode === void 0) { mode = 'standard'; }\n            _this.resetManagedState();\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = _this.SrsDoc(0, [mode]);\n            var _a = _this.getSparqlRulesFromVisitor(cst), groupGraphPatterns = _a.groupGraphPatterns, triplesBlocks = _a.triplesBlocks;\n            // Pull visitor errors\n            var errors = _this.errors.concat(groupGraphPatterns.reduce(reduceVisitorItemErrors, []), triplesBlocks.reduce(reduceVisitorItemErrors, []));\n            var semanticErrors = _this.semanticErrors.slice();\n            // Replace placeholder CST nodes created by the SRS parser with CST nodes\n            // returned by the visitor sub-parsers.\n            unsafeTraverse(cst, function (ctx, next) {\n                var node = ctx.node, parentCtx = ctx.parentCtx;\n                if (isCstNode(node)) {\n                    return next();\n                }\n                var currentTokenName = node.tokenType.tokenName;\n                if (currentTokenName !== 'GroupGraphPattern' &&\n                    currentTokenName !== 'TriplesBlock') {\n                    return;\n                }\n                var parentNode = parentCtx.node;\n                // The SRS parser parses only Turtle and SRS-specific content (RULE, IF,\n                // THEN), and creates placeholder tokens for the blocks where SPARQL is\n                // valid. The SparqlSrsVisitor visits these nodes and delegates their\n                // parsing to a SPARQL parser. Here, we replace the placeholder nodes\n                // (`GroupGraphPattern` and `TriplesBlock`) with the real ones from the\n                // SPARQL parser, collecting some custom SRS-specific errors along the\n                // way.\n                if (parentNode.name === 'IfClause') {\n                    var matchingVisitorItem = findAndSwapPlaceholders(node, parentNode, groupGraphPatterns, 'GroupGraphPattern');\n                    if (matchingVisitorItem) {\n                        addIfClauseErrorsToErrors({\n                            fullCtx: ctx,\n                            namespacesMap: __assign({}, _this.baseNamespacesMap, _this.namespacesMap),\n                            cst: matchingVisitorItem.parseResult.cst,\n                            errors: errors,\n                            semanticErrors: semanticErrors,\n                        });\n                    }\n                }\n                else if (parentNode.name === 'ThenClause') {\n                    var matchingVisitorItem = findAndSwapPlaceholders(node, parentNode, triplesBlocks, 'TriplesBlock');\n                    if (matchingVisitorItem) {\n                        addThenClauseErrorsToErrors({\n                            fullCtx: ctx,\n                            namespacesMap: __assign({}, _this.baseNamespacesMap, _this.namespacesMap),\n                            cst: matchingVisitorItem.parseResult.cst,\n                            errors: errors,\n                            semanticErrors: semanticErrors,\n                        });\n                    }\n                }\n            });\n            return {\n                semanticErrors: semanticErrors,\n                errors: errors,\n                cst: cst,\n            };\n        };\n        _this.SrsDoc = _this.RULE('SrsDoc', function (mode) {\n            var allowEdgeProperties = mode === 'stardog';\n            _this.SUBRULE(_this.turtleDoc, { ARGS: [mode] });\n            _this.MANY(function () {\n                _this.SUBRULE(_this.RuleDoc);\n                _this.MANY1(function () {\n                    _this.SUBRULE(_this.triples, { ARGS: [allowEdgeProperties] });\n                    _this.CONSUME(sparqlTokenMap.Period);\n                });\n            });\n        });\n        _this.RuleDoc = _this.RULE('RuleDoc', function () {\n            _this.OPTION(function () { return _this.SUBRULE(_this.RuleClause); });\n            _this.SUBRULE(_this.IfClause);\n            _this.SUBRULE(_this.ThenClause);\n        });\n        _this.RuleClause = _this.RULE('RuleClause', function () {\n            _this.CONSUME(srsTokenMap.Rule);\n            _this.SUBRULE(_this.iri);\n        });\n        _this.IfClause = _this.RULE('IfClause', function () {\n            _this.CONSUME(srsTokenMap.If);\n            _this.CONSUME(srsTokenMap.GroupGraphPattern);\n        });\n        _this.ThenClause = _this.RULE('ThenClause', function () {\n            _this.CONSUME(srsTokenMap.Then);\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.CONSUME(srsTokenMap.TriplesBlock);\n            _this.CONSUME(srsTokenMap.EndThen);\n        });\n        _this.lexer = new Lexer(multiModeLexerDefinition);\n        Parser.performSelfAnalysis(_this);\n        return _this;\n    }\n    return SrsParser;\n}(TurtleParser));\nexport { SrsParser };\n","export * from './SrsParser';\n// Convenience imports/exports that aren't core functionality:\n// NOTE: Tokens MUST be imported using CommonJS syntax; see here: https://github.com/SAP/chevrotain/issues/345\nexport var srsTokens = require('./tokens');\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar sparqlTokenMap = require('./tokens').sparqlTokenMap;\nimport { Parser, Lexer, } from 'chevrotain';\n// @ts-ignore: debug logging\nfunction log() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    // console.log(...args);\n}\nvar BaseSparqlParser = /** @class */ (function (_super) {\n    __extends(BaseSparqlParser, _super);\n    function BaseSparqlParser(options, tokenVocab) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, tokenVocab, __assign({ recoveryEnabled: true, outputCst: true }, options.config)) || this;\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        _this.parse = function (document, entryRule) {\n            if (entryRule === void 0) { entryRule = _this.SparqlDoc; }\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = entryRule.call(_this);\n            var errors = _this.errors;\n            return {\n                errors: errors,\n                cst: cst,\n            };\n        };\n        _this.getInput = function () {\n            return _this.input;\n        };\n        _this.parseGroupGraphPattern = function (document) {\n            return _this.parse(document, _this.GroupGraphPattern);\n        };\n        _this.parseTriplesBlock = function (document) {\n            return _this.parse(document, _this.TriplesBlock);\n        };\n        // NOTE: For the sake of usability in text editors/IDEs, this parser encodes\n        // a grammar that is slightly different from the official SPARQL spec. The\n        // main differences are in the `SparqlDoc`, rule, the `Prologue` rule, and\n        // the `Update` rule. Essentially, the grammar encoded by this parser should\n        // allow any number of interspered Prologues (PREFIX/BASE), QueryUnits, and\n        // UpdateUnits, so that, e.g., this is valid:\n        //\n        //  select * { ?s ?p ?o }\n        //  prefix foo: <bar>\n        //  clear all\n        //  prefix x: <y>\n        //  construct { ?s ?p ?o }\n        //  ask { ?s ?p ?o }\n        //\n        // This is not valid according to the official spec. However, line 1 is\n        // valid, lines 2-3 are valid, lines 4-5 are valid, and line 6 is valid. In a\n        // text editor, a user might want to select and execute only those lines.\n        _this.SparqlDoc = _this.RULE('SparqlDoc', function () {\n            log('SparqlDoc');\n            _this.MANY(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.SUBRULE(_this.Prologue); } },\n                    { ALT: function () { return _this.SUBRULE(_this.QueryUnit); } },\n                    { ALT: function () { return _this.SUBRULE(_this.UpdateUnit); } },\n                ]);\n            });\n        });\n        _this.QueryUnit = _this.RULE('QueryUnit', function () {\n            log('QueryUnit');\n            _this.SUBRULE(_this.Query);\n        });\n        _this.Query = _this.RULE('Query', function () {\n            log('Query');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.SelectQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.ConstructQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.DescribeQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.AskQuery); } },\n            ]);\n            _this.SUBRULE(_this.ValuesClause);\n        });\n        _this.Constant = _this.RULE('Constant', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n            ]);\n        });\n        _this.MaxLength = _this.RULE('MaxLength', function () {\n            _this.CONSUME(sparqlTokenMap.MAX_LENGTH);\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.UpdateUnit = _this.RULE('UpdateUnit', function () {\n            log('UpdateUnit');\n            _this.SUBRULE(_this.Update);\n        });\n        _this.Prologue = _this.RULE('Prologue', function () {\n            log('Prologue');\n            _this.AT_LEAST_ONE(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.SUBRULE(_this.BaseDecl); } },\n                    { ALT: function () { return _this.SUBRULE(_this.PrefixDecl); } },\n                ]);\n            });\n        });\n        _this.BaseDecl = _this.RULE('BaseDecl', function () {\n            log('BaseDecl');\n            _this.CONSUME(sparqlTokenMap.BASE);\n            _this.CONSUME(sparqlTokenMap.IRIREF);\n        });\n        _this.PrefixDecl = _this.RULE('PrefixDecl', function () {\n            log('PrefixDecl');\n            _this.CONSUME(sparqlTokenMap.PREFIX);\n            _this.CONSUME(sparqlTokenMap.PNAME_NS);\n            _this.CONSUME(sparqlTokenMap.IRIREF);\n        });\n        _this.SelectQuery = _this.RULE('SelectQuery', function () {\n            log('SelectQuery');\n            _this.SUBRULE(_this.SelectClause);\n            _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n            _this.SUBRULE(_this.WhereClause);\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.SubSelect = _this.RULE('SubSelect', function () {\n            log('SubSelect');\n            _this.SUBRULE(_this.SelectClause);\n            _this.SUBRULE(_this.WhereClause);\n            _this.SUBRULE(_this.SolutionModifier);\n            _this.SUBRULE(_this.ValuesClause);\n        });\n        _this.SelectClause = _this.RULE('SelectClause', function () {\n            log('SelectClause');\n            _this.CONSUME(sparqlTokenMap.SELECT);\n            _this.OPTION(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.CONSUME(sparqlTokenMap.DISTINCT); } },\n                    { ALT: function () { return _this.CONSUME(sparqlTokenMap.REDUCED); } },\n                ]);\n            });\n            _this.OR1([\n                {\n                    ALT: function () {\n                        _this.AT_LEAST_ONE(function () {\n                            return _this.OR2([\n                                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                                {\n                                    ALT: function () {\n                                        _this.CONSUME(sparqlTokenMap.LParen);\n                                        _this.SUBRULE(_this.Expression);\n                                        _this.CONSUME(sparqlTokenMap.AS);\n                                        _this.SUBRULE1(_this.Var);\n                                        _this.CONSUME(sparqlTokenMap.RParen);\n                                    },\n                                },\n                            ]);\n                        });\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n            ]);\n        });\n        _this.ConstructQuery = _this.RULE('ConstructQuery', function () {\n            _this.CONSUME(sparqlTokenMap.CONSTRUCT);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.ConstructTemplate);\n                        _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n                        _this.SUBRULE(_this.WhereClause);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.MANY1(function () { return _this.SUBRULE1(_this.DatasetClause); });\n                        _this.CONSUME(sparqlTokenMap.WHERE);\n                        _this.CONSUME(sparqlTokenMap.LCurly);\n                        _this.OPTION(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n                        _this.CONSUME(sparqlTokenMap.RCurly);\n                    },\n                },\n            ]);\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.DescribeQuery = _this.RULE('DescribeQuery', function () {\n            log('DescribeQuery');\n            _this.CONSUME(sparqlTokenMap.DESCRIBE);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.VarOrIri); });\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n            ]);\n            _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n            _this.OPTION(function () { return _this.SUBRULE(_this.WhereClause); });\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.AskQuery = _this.RULE('AskQuery', function () {\n            log('AskQuery');\n            _this.CONSUME(sparqlTokenMap.ASK);\n            _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n            _this.SUBRULE(_this.WhereClause);\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.DatasetClause = _this.RULE('DatasetClause', function () {\n            log('DatasetClause');\n            _this.CONSUME(sparqlTokenMap.FROM);\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.DefaultGraphClause); } },\n                { ALT: function () { return _this.SUBRULE(_this.NamedGraphClause); } },\n            ]);\n        });\n        _this.DefaultGraphClause = _this.RULE('DefaultGraphClause', function () {\n            log('DefaultGraphClause');\n            _this.SUBRULE(_this.SourceSelector);\n        });\n        _this.NamedGraphClause = _this.RULE('NamedGraphClause', function () {\n            log('NamedGraphClause');\n            _this.CONSUME(sparqlTokenMap.NAMED);\n            _this.SUBRULE(_this.SourceSelector);\n        });\n        _this.SourceSelector = _this.RULE('SourceSelector', function () {\n            log('SourceSelector');\n            _this.SUBRULE(_this.iri);\n        });\n        _this.WhereClause = _this.RULE('WhereClause', function () {\n            log('WhereClause');\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.WHERE); });\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.SolutionModifier = _this.RULE('SolutionModifier', function () {\n            log('SolutionModifier');\n            _this.OPTION(function () { return _this.SUBRULE(_this.GroupClause); });\n            _this.OPTION1(function () { return _this.SUBRULE(_this.HavingClause); });\n            _this.OPTION2(function () { return _this.SUBRULE(_this.OrderClause); });\n            _this.OPTION3(function () { return _this.SUBRULE(_this.LimitOffsetClause); });\n        });\n        _this.GroupClause = _this.RULE('GroupClause', function () {\n            log('GroupClause');\n            _this.CONSUME(sparqlTokenMap.GROUP_BY);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.GroupCondition); });\n        });\n        _this.GroupCondition = _this.RULE('GroupCondition', function () {\n            log('GroupCondition');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall); } },\n                { ALT: function () { return _this.SUBRULE(_this.FunctionCall); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Expression);\n                        _this.OPTION(function () {\n                            _this.CONSUME(sparqlTokenMap.AS);\n                            _this.SUBRULE(_this.Var);\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE1(_this.Var); } },\n            ]);\n        });\n        _this.HavingClause = _this.RULE('HavingClause', function () {\n            log('HavingClause');\n            _this.CONSUME(sparqlTokenMap.HAVING);\n            _this.SUBRULE(_this.HavingCondition);\n        });\n        _this.HavingCondition = _this.RULE('HavingCondition', function () {\n            log('HavingCondition');\n            _this.SUBRULE(_this.Constraint);\n        });\n        _this.OrderClause = _this.RULE('OrderClause', function () {\n            log('OrderClause');\n            _this.CONSUME(sparqlTokenMap.ORDER_BY);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.OrderCondition); });\n        });\n        _this.OrderCondition = _this.RULE('OrderCondition', function () {\n            log('OrderCondition');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.OR1([\n                            { ALT: function () { return _this.CONSUME(sparqlTokenMap.ASC); } },\n                            { ALT: function () { return _this.CONSUME(sparqlTokenMap.DESC); } },\n                        ]);\n                        _this.SUBRULE(_this.BrackettedExpression);\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE(_this.Constraint); } },\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n            ]);\n        });\n        _this.LimitOffsetClause = _this.RULE('LimitOffsetClause', function () {\n            log('LimitOffsetClause');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.LimitClause);\n                        _this.OPTION(function () { return _this.SUBRULE(_this.OffsetClause); });\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE1(_this.OffsetClause);\n                        _this.OPTION1(function () { return _this.SUBRULE1(_this.LimitClause); });\n                    },\n                },\n            ]);\n        });\n        _this.OffsetClause = _this.RULE('OffsetClause', function () {\n            log('OffsetClause');\n            _this.CONSUME(sparqlTokenMap.OFFSET);\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.LimitClause = _this.RULE('LimitClause', function () {\n            log('LimitClause');\n            _this.CONSUME(sparqlTokenMap.LIMIT);\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.ValuesClause = _this.RULE('ValuesClause', function () {\n            log('ValuesClause');\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.VALUES);\n                _this.SUBRULE(_this.DataBlock);\n            });\n        });\n        _this.Update = _this.RULE('Update', function () {\n            log('Update');\n            _this.SUBRULE(_this.Update1);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.SUBRULE(_this.Update);\n            });\n        });\n        _this.Update1 = _this.RULE('Update1', function () {\n            log('Update1');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Load); } },\n                { ALT: function () { return _this.SUBRULE(_this.Clear); } },\n                { ALT: function () { return _this.SUBRULE(_this.Drop); } },\n                { ALT: function () { return _this.SUBRULE(_this.Add); } },\n                { ALT: function () { return _this.SUBRULE(_this.Move); } },\n                { ALT: function () { return _this.SUBRULE(_this.Copy); } },\n                { ALT: function () { return _this.SUBRULE(_this.Create); } },\n                { ALT: function () { return _this.SUBRULE(_this.InsertData); } },\n                { ALT: function () { return _this.SUBRULE(_this.DeleteData); } },\n                { ALT: function () { return _this.SUBRULE(_this.DeleteWhere); } },\n                { ALT: function () { return _this.SUBRULE(_this.Modify); } },\n            ]);\n        });\n        _this.Load = _this.RULE('Load', function () {\n            log('Load');\n            _this.CONSUME(sparqlTokenMap.LOAD);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.iri);\n            _this.OPTION1(function () {\n                _this.CONSUME(sparqlTokenMap.INTO);\n                _this.SUBRULE(_this.GraphRef);\n            });\n        });\n        _this.Clear = _this.RULE('Clear', function () {\n            log('Clear');\n            _this.CONSUME(sparqlTokenMap.CLEAR);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphRefAll);\n        });\n        _this.Drop = _this.RULE('Drop', function () {\n            log('Drop');\n            _this.CONSUME(sparqlTokenMap.DROP);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphRefAll);\n        });\n        _this.Create = _this.RULE('Create', function () {\n            log('Create');\n            _this.CONSUME(sparqlTokenMap.CREATE);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphRefAll);\n        });\n        _this.Add = _this.RULE('Add', function () {\n            log('Add');\n            _this.CONSUME(sparqlTokenMap.ADD);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphOrDefault);\n            _this.CONSUME(sparqlTokenMap.TO);\n            _this.SUBRULE1(_this.GraphOrDefault);\n        });\n        _this.Move = _this.RULE('Move', function () {\n            log('Move');\n            _this.CONSUME(sparqlTokenMap.MOVE);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphOrDefault);\n            _this.CONSUME(sparqlTokenMap.TO);\n            _this.SUBRULE1(_this.GraphOrDefault);\n        });\n        _this.Copy = _this.RULE('Copy', function () {\n            log('Copy');\n            _this.CONSUME(sparqlTokenMap.COPY);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphOrDefault);\n            _this.CONSUME(sparqlTokenMap.TO);\n            _this.SUBRULE1(_this.GraphOrDefault);\n        });\n        _this.InsertData = _this.RULE('InsertData', function () {\n            log('InsertData');\n            _this.CONSUME(sparqlTokenMap.INSERT_DATA);\n            _this.SUBRULE(_this.QuadData);\n        });\n        _this.DeleteData = _this.RULE('DeleteData', function () {\n            log('DeleteData');\n            _this.CONSUME(sparqlTokenMap.DELETE_DATA);\n            _this.SUBRULE(_this.QuadData);\n        });\n        _this.DeleteWhere = _this.RULE('DeleteWhere', function () {\n            log('DeleteWhere');\n            _this.CONSUME(sparqlTokenMap.DELETE_WHERE);\n            _this.SUBRULE(_this.QuadPattern);\n        });\n        _this.Modify = _this.RULE('Modify', function () {\n            log('Modify');\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.WITH);\n                _this.SUBRULE(_this.iri);\n            });\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.DeleteClause);\n                        _this.OPTION1(function () { return _this.SUBRULE(_this.InsertClause); });\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE1(_this.InsertClause); } },\n            ]);\n            _this.MANY(function () { return _this.SUBRULE(_this.UsingClause); });\n            _this.CONSUME(sparqlTokenMap.WHERE);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.DeleteClause = _this.RULE('DeleteClause', function () {\n            log('DeleteClause');\n            _this.CONSUME(sparqlTokenMap.DELETE);\n            _this.SUBRULE(_this.QuadPattern);\n        });\n        _this.InsertClause = _this.RULE('InsertClause', function () {\n            log('InsertClause');\n            _this.CONSUME(sparqlTokenMap.INSERT);\n            _this.SUBRULE(_this.QuadPattern);\n        });\n        _this.UsingClause = _this.RULE('UsingClause', function () {\n            log('UsingClause');\n            _this.CONSUME(sparqlTokenMap.USING);\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.NAMED);\n                        _this.SUBRULE1(_this.iri);\n                    },\n                },\n            ]);\n        });\n        _this.GraphOrDefault = _this.RULE('GraphOrDefault', function () {\n            log('GraphOrDefault');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DEFAULT); } },\n                {\n                    ALT: function () {\n                        _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.GRAPH); });\n                        _this.SUBRULE(_this.iri);\n                    },\n                },\n            ]);\n        });\n        _this.GraphRef = _this.RULE('GraphRef', function () {\n            log('GraphRef');\n            _this.CONSUME(sparqlTokenMap.GRAPH);\n            _this.SUBRULE(_this.iri);\n        });\n        _this.GraphRefAll = _this.RULE('GraphRefAll', function () {\n            log('GraphRefAll');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.GraphRef); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DEFAULT); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NAMED); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.ALL); } },\n            ]);\n        });\n        _this.QuadPattern = _this.RULE('QuadPattern', function () {\n            log('QuadPattern');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.SUBRULE(_this.Quads);\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.QuadData = _this.RULE('QuadData', function () {\n            log('QuadData');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.SUBRULE(_this.Quads);\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.Quads = _this.RULE('Quads', function () {\n            log('Quads');\n            _this.OPTION(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n            _this.MANY(function () {\n                _this.SUBRULE(_this.QuadsNotTriples);\n                _this.OPTION1(function () { return _this.CONSUME(sparqlTokenMap.Period); });\n                _this.OPTION2(function () { return _this.SUBRULE1(_this.TriplesTemplate); });\n            });\n        });\n        _this.QuadsNotTriples = _this.RULE('QuadsNotTriples', function () {\n            log('QuadsNotTriples');\n            _this.CONSUME(sparqlTokenMap.GRAPH);\n            _this.SUBRULE(_this.VarOrIri);\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.OPTION(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.TriplesTemplate = _this.RULE('TriplesTemplate', function () {\n            log('TriplesTemplate');\n            _this.SUBRULE(_this.TriplesSameSubject);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Period);\n                _this.OPTION1(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n            });\n        });\n        _this.GroupGraphPattern = _this.RULE('GroupGraphPattern', function () {\n            log('GroupGraphPattern');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.SubSelect); } },\n                { ALT: function () { return _this.SUBRULE(_this.GroupGraphPatternSub); } },\n            ]);\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.GroupGraphPatternSub = _this.RULE('GroupGraphPatternSub', function () {\n            log('GroupGraphPatternSub');\n            _this.OPTION(function () { return _this.SUBRULE(_this.TriplesBlock); });\n            _this.MANY(function () {\n                _this.SUBRULE(_this.GraphPatternNotTriples);\n                _this.OPTION1(function () { return _this.CONSUME(sparqlTokenMap.Period); });\n                _this.OPTION2(function () { return _this.SUBRULE1(_this.TriplesBlock); });\n            });\n        });\n        _this.TriplesBlock = _this.RULE('TriplesBlock', function () {\n            log('TriplesBlock');\n            _this.SUBRULE(_this.TriplesSameSubjectPath);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Period);\n                _this.OPTION1(function () { return _this.SUBRULE(_this.TriplesBlock); });\n            });\n        });\n        _this.GraphPatternNotTriples = _this.RULE('GraphPatternNotTriples', function () {\n            log('GraphPatternNotTriples');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.GroupOrUnionGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.OptionalGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.MinusGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.GraphGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.ServiceGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.Filter); } },\n                { ALT: function () { return _this.SUBRULE(_this.Bind); } },\n                { ALT: function () { return _this.SUBRULE(_this.InlineData); } },\n            ]);\n        });\n        _this.OptionalGraphPattern = _this.RULE('OptionalGraphPattern', function () {\n            log('OptionalGraphPattern');\n            _this.CONSUME(sparqlTokenMap.OPTIONAL);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.GraphGraphPattern = _this.RULE('GraphGraphPattern', function () {\n            log('GraphGraphPattern');\n            _this.CONSUME(sparqlTokenMap.GRAPH);\n            _this.SUBRULE(_this.VarOrIri);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.ServiceGraphPattern = _this.RULE('ServiceGraphPattern', function () {\n            log('ServiceGraphPattern');\n            _this.CONSUME(sparqlTokenMap.SERVICE);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.VarOrIri);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.Bind = _this.RULE('Bind', function () {\n            log('Bind');\n            _this.CONSUME(sparqlTokenMap.BIND);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.AS);\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.InlineData = _this.RULE('InlineData', function () {\n            log('InlineData');\n            _this.CONSUME(sparqlTokenMap.VALUES);\n            _this.SUBRULE(_this.DataBlock);\n        });\n        _this.DataBlock = _this.RULE('DataBlock', function () {\n            log('DataBlock');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.InlineDataOneVar); } },\n                { ALT: function () { return _this.SUBRULE(_this.InlineDataFull); } },\n            ]);\n        });\n        _this.InlineDataOneVar = _this.RULE('InlineDataOneVar', function () {\n            log('InlineDataOneVar');\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.MANY(function () { return _this.SUBRULE(_this.DataBlockValue); });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.InlineDataFull = _this.RULE('InlineDataFull', function () {\n            log('InlineDataFull');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.MANY(function () { return _this.SUBRULE(_this.Var); });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.MANY1(function () {\n                return _this.OR1([\n                    {\n                        ALT: function () {\n                            _this.CONSUME1(sparqlTokenMap.LParen);\n                            _this.MANY2(function () { return _this.SUBRULE(_this.DataBlockValue); });\n                            _this.CONSUME1(sparqlTokenMap.RParen);\n                        },\n                    },\n                    { ALT: function () { return _this.CONSUME1(sparqlTokenMap.NIL); } },\n                ]);\n            });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.DataBlockValue = _this.RULE('DataBlockValue', function () {\n            log('DataBlockValue');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.UNDEF); } },\n            ]);\n        });\n        _this.MinusGraphPattern = _this.RULE('MinusGraphPattern', function () {\n            log('MinusGraphPattern');\n            _this.CONSUME(sparqlTokenMap.MINUS);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.GroupOrUnionGraphPattern = _this.RULE('GroupOrUnionGraphPattern', function () {\n            log('GroupOrUnionGraphPattern');\n            _this.SUBRULE(_this.GroupGraphPattern);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.UNION);\n                _this.SUBRULE1(_this.GroupGraphPattern);\n            });\n        });\n        _this.Filter = _this.RULE('Filter', function () {\n            log('Filter');\n            _this.CONSUME(sparqlTokenMap.FILTER);\n            _this.SUBRULE(_this.Constraint);\n        });\n        _this.Constraint = _this.RULE('Constraint', function () {\n            log('Constraint');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.BrackettedExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall); } },\n                { ALT: function () { return _this.SUBRULE(_this.FunctionCall); } },\n            ]);\n        });\n        _this.FunctionCall = _this.RULE('FunctionCall', function () {\n            log('FunctionCall');\n            _this.SUBRULE(_this.iri);\n            _this.SUBRULE(_this.ArgList);\n        });\n        _this.ArgList = _this.RULE('ArgList', function () {\n            log('ArgList');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.DISTINCT); });\n                        _this.SUBRULE(_this.Expression);\n                        _this.MANY(function () {\n                            _this.CONSUME(sparqlTokenMap.Comma);\n                            _this.SUBRULE1(_this.Expression);\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.ExpressionList = _this.RULE('ExpressionList', function () {\n            log('ExpressionList');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Expression);\n                        _this.MANY(function () {\n                            _this.CONSUME(sparqlTokenMap.Comma);\n                            _this.SUBRULE1(_this.Expression);\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.ConstructTemplate = _this.RULE('ConstructTemplate', function () {\n            log('ConstructTemplate');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.OPTION(function () { return _this.SUBRULE(_this.ConstructTriples); });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.ConstructTriples = _this.RULE('ConstructTriples', function () {\n            log('ConstructTriples');\n            _this.SUBRULE(_this.TriplesSameSubject);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Period);\n                _this.OPTION1(function () { return _this.SUBRULE(_this.ConstructTriples); });\n            });\n        });\n        _this.TriplesSameSubject = _this.RULE('TriplesSameSubject', function () {\n            log('TriplesSameSubject');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.VarOrTerm);\n                        _this.SUBRULE(_this.PropertyListNotEmpty);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.TriplesNode);\n                        _this.SUBRULE(_this.PropertyList);\n                    },\n                },\n            ]);\n        });\n        _this.PropertyList = _this.RULE('PropertyList', function () {\n            log('PropertyList');\n            _this.OPTION(function () { return _this.SUBRULE(_this.PropertyListNotEmpty); });\n        });\n        _this.PropertyListNotEmpty = _this.RULE('PropertyListNotEmpty', function () {\n            log('PropertyListNotEmpty');\n            _this.SUBRULE(_this.Verb);\n            _this.SUBRULE(_this.ObjectList);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.SUBRULE1(_this.Verb);\n                    _this.SUBRULE1(_this.ObjectList);\n                });\n            });\n        });\n        _this.Verb = _this.RULE('Verb', function () {\n            log('Verb');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VarOrIri); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.A); } },\n            ]);\n        });\n        _this.ObjectList = _this.RULE('ObjectList', function () {\n            log('ObjectList');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.Comma,\n                DEF: function () { return _this.SUBRULE(_this.Object); },\n            });\n        });\n        _this.Object = _this.RULE('Object', function () {\n            log('Object');\n            _this.SUBRULE(_this.GraphNode);\n        });\n        _this.TriplesSameSubjectPath = _this.RULE('TriplesSameSubjectPath', function () {\n            log('TriplesSameSubjectPath');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.VarOrTerm);\n                        _this.SUBRULE(_this.PropertyListPathNotEmpty);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.TriplesNodePath);\n                        _this.SUBRULE(_this.PropertyListPath);\n                    },\n                },\n            ]);\n        });\n        _this.PropertyListPath = _this.RULE('PropertyListPath', function () {\n            log('PropertyListPath');\n            _this.OPTION(function () { return _this.SUBRULE(_this.PropertyListPathNotEmpty); });\n        });\n        _this.PropertyListPathNotEmpty = _this.RULE('PropertyListPathNotEmpty', function () {\n            log('PropertyListPathNotEmpty');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VerbPath); } },\n                { ALT: function () { return _this.SUBRULE(_this.VerbSimple); } },\n            ]);\n            _this.SUBRULE(_this.ObjectListPath);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.OR1([\n                        { ALT: function () { return _this.SUBRULE1(_this.VerbPath); } },\n                        { ALT: function () { return _this.SUBRULE1(_this.VerbSimple); } },\n                    ]);\n                    _this.SUBRULE1(_this.ObjectListPath);\n                });\n            });\n        });\n        _this.VerbPath = _this.RULE('VerbPath', function () {\n            log('VerbPath');\n            _this.SUBRULE(_this.Path);\n        });\n        _this.VerbSimple = _this.RULE('VerbSimple', function () {\n            log('VerbSimple');\n            _this.SUBRULE(_this.Var);\n        });\n        _this.ObjectListPath = _this.RULE('ObjectListPath', function () {\n            log('ObjectListPath');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.Comma,\n                DEF: function () { return _this.SUBRULE(_this.ObjectPath); },\n            });\n        });\n        _this.ObjectPath = _this.RULE('ObjectPath', function () {\n            log('ObjectPath');\n            _this.SUBRULE(_this.GraphNodePath);\n        });\n        _this.Path = _this.RULE('Path', function () {\n            log('Path');\n            _this.SUBRULE(_this.PathAlternative);\n        });\n        _this.PathAlternative = _this.RULE('PathAlternative', function () {\n            log('PathAlternative');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.Pipe,\n                DEF: function () { return _this.SUBRULE(_this.PathSequence); },\n            });\n        });\n        _this.PathSequence = _this.RULE('PathSequence', function () {\n            log('PathSequence');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.ForwardSlash,\n                DEF: function () { return _this.SUBRULE(_this.PathEltOrInverse); },\n            });\n        });\n        _this.PathElt = _this.RULE('PathElt', function () {\n            log('PathElt');\n            _this.SUBRULE(_this.PathPrimary);\n            _this.OPTION(function () { return _this.SUBRULE(_this.PathMod); });\n        });\n        _this.PathEltOrInverse = _this.RULE('PathEltOrInverse', function () {\n            log('PathEltOrInverse');\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.Caret); });\n            _this.SUBRULE(_this.PathElt);\n        });\n        _this.PathMod = _this.RULE('PathMod', function () {\n            log('PathMod');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.QuestionMark); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Plus); } },\n            ]);\n        });\n        _this.PathPrimary = _this.RULE('PathPrimary', function () {\n            log('PathPrimary');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.A); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Bang);\n                        _this.SUBRULE(_this.PathNegatedPropertySet);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Path);\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.PathNegatedPropertySet = _this.RULE('PathNegatedPropertySet', function () {\n            log('PathNegatedPropertySet');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.PathOneInPropertySet); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.MANY_SEP({\n                            SEP: sparqlTokenMap.Pipe,\n                            DEF: function () { return _this.SUBRULE1(_this.PathOneInPropertySet); },\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.PathOneInPropertySet = _this.RULE('PathOneInPropertySet', function () {\n            log('PathOneInPropertySet');\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.Caret); });\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.A); } },\n            ]);\n        });\n        _this.Integer = _this.RULE('Integer', function () {\n            log('Integer');\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.TriplesNode = _this.RULE('TriplesNode', function () {\n            log('TriplesNode');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Collection); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNodePropertyList); } },\n            ]);\n        });\n        _this.BlankNodePropertyList = _this.RULE('BlankNodePropertyList', function () {\n            log('BlankNodePropertyList');\n            _this.CONSUME(sparqlTokenMap.LBracket);\n            _this.SUBRULE(_this.PropertyListNotEmpty);\n            _this.CONSUME(sparqlTokenMap.RBracket);\n        });\n        _this.TriplesNodePath = _this.RULE('TriplesNodePath', function () {\n            log('TriplesNodePath');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.CollectionPath); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNodePropertyListPath); } },\n            ]);\n        });\n        _this.BlankNodePropertyListPath = _this.RULE('BlankNodePropertyListPath', function () {\n            log('BlankNodePropertyListPath');\n            _this.CONSUME(sparqlTokenMap.LBracket);\n            _this.SUBRULE(_this.PropertyListPathNotEmpty);\n            _this.CONSUME(sparqlTokenMap.RBracket);\n        });\n        _this.Collection = _this.RULE('Collection', function () {\n            log('Collection');\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.GraphNode); });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.CollectionPath = _this.RULE('CollectionPath', function () {\n            log('CollectionPath');\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.GraphNodePath); });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.GraphNode = _this.RULE('GraphNode', function () {\n            log('GraphNode');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VarOrTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.TriplesNode); } },\n            ]);\n        });\n        _this.GraphNodePath = _this.RULE('GraphNodePath', function () {\n            log('GraphNodePath');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VarOrTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.TriplesNodePath); } },\n            ]);\n        });\n        _this.VarOrTerm = _this.RULE('VarOrTerm', function () {\n            log('VarOrTerm');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.GraphTerm); } },\n            ]);\n        });\n        _this.VarOrIri = _this.RULE('VarOrIri', function () {\n            log('VarOrIri');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n            ]);\n        });\n        _this.Var = _this.RULE('Var', function () {\n            log('Var');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.VAR1); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.VAR2); } },\n            ]);\n        });\n        _this.GraphTerm = _this.RULE('GraphTerm', function () {\n            log('GraphTerm');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n            ]);\n        });\n        _this.Expression = _this.RULE('Expression', function () {\n            log('Expression');\n            _this.SUBRULE(_this.ConditionalOrExpression);\n        });\n        _this.ConditionalOrExpression = _this.RULE('ConditionalOrExpression', function () {\n            log('ConditionalOrExpression');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.LogicalOr,\n                DEF: function () { return _this.SUBRULE(_this.ConditionalAndExpression); },\n            });\n        });\n        _this.ConditionalAndExpression = _this.RULE('ConditionalAndExpression', function () {\n            log('ConditionalAndExpression');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.LogicalAnd,\n                DEF: function () { return _this.SUBRULE(_this.ValueLogical); },\n            });\n        });\n        _this.ValueLogical = _this.RULE('ValueLogical', function () {\n            log('ValueLogical');\n            _this.SUBRULE(_this.RelationalExpression);\n        });\n        _this.RelationalExpression = _this.RULE('RelationalExpression', function () {\n            log('RelationalExpression');\n            _this.SUBRULE(_this.NumericExpression);\n            _this.OPTION(function () {\n                return _this.OR([\n                    {\n                        ALT: function () {\n                            _this.OR1([\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Equals); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NotEquals); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.LessThan); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.GreaterThan); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.LessThanEquals); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.GreaterThanEquals); } },\n                            ]);\n                            _this.SUBRULE1(_this.NumericExpression);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.IN);\n                            _this.SUBRULE(_this.ExpressionList);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.NOT_IN);\n                            _this.SUBRULE1(_this.ExpressionList);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.NumericExpression = _this.RULE('NumericExpression', function () {\n            log('NumericExpression');\n            _this.SUBRULE(_this.AdditiveExpression);\n        });\n        _this.AdditiveExpression = _this.RULE('AdditiveExpression', function () {\n            log('AdditiveExpression');\n            _this.SUBRULE(_this.MultiplicativeExpression);\n            _this.MANY(function () {\n                return _this.OR([\n                    {\n                        ALT: function () {\n                            _this.OR1([\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Plus); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Minus); } },\n                            ]);\n                            _this.SUBRULE1(_this.MultiplicativeExpression);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.OR2([\n                                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralPositive); } },\n                                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralNegative); } },\n                            ]);\n                            _this.MANY1(function () {\n                                return _this.OR3([\n                                    {\n                                        ALT: function () {\n                                            _this.OR4([\n                                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n                                                {\n                                                    ALT: function () { return _this.CONSUME(sparqlTokenMap.ForwardSlash); },\n                                                },\n                                            ]);\n                                            _this.SUBRULE1(_this.UnaryExpression);\n                                        },\n                                    },\n                                ]);\n                            });\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.MultiplicativeExpression = _this.RULE('MultiplicativeExpression', function () {\n            log('MultiplicativeExpression');\n            _this.SUBRULE(_this.UnaryExpression);\n            _this.MANY(function () {\n                return _this.OR([\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.Star);\n                            _this.SUBRULE1(_this.UnaryExpression);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.ForwardSlash);\n                            _this.SUBRULE2(_this.UnaryExpression);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.UnaryExpression = _this.RULE('UnaryExpression', function () {\n            log('UnaryExpression');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Bang);\n                        _this.SUBRULE(_this.PrimaryExpression);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Plus);\n                        _this.SUBRULE1(_this.PrimaryExpression);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Minus);\n                        _this.SUBRULE2(_this.PrimaryExpression);\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE3(_this.PrimaryExpression); } },\n            ]);\n        });\n        _this.PrimaryExpression = _this.RULE('PrimaryExpression', function () {\n            log('PrimaryExpression');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.BrackettedExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall); } },\n                { ALT: function () { return _this.SUBRULE(_this.iriOrFunction); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n            ]);\n        });\n        _this.BrackettedExpression = _this.RULE('BrackettedExpression', function () {\n            log('BrackettedExpression');\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STR = _this.RULE('BuiltInCall_STR', function () {\n            log('BuiltInCall_STR');\n            _this.CONSUME(sparqlTokenMap.STR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_LANG = _this.RULE('BuiltInCall_LANG', function () {\n            log('BuiltInCall_LANG');\n            _this.CONSUME(sparqlTokenMap.LANG);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_LANGMATCHES = _this.RULE('BuiltInCall_LANGMATCHES', function () {\n            log('BuiltInCall_LANGMATCHES');\n            _this.CONSUME(sparqlTokenMap.LANGMATCHES);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_DATATYPE = _this.RULE('BuiltInCall_DATATYPE', function () {\n            log('BuiltInCall_DATATYPE');\n            _this.CONSUME(sparqlTokenMap.DATATYPE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_BOUND = _this.RULE('BuiltInCall_BOUND', function () {\n            log('BuiltInCall_BOUND');\n            _this.CONSUME(sparqlTokenMap.BOUND);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_IRI = _this.RULE('BuiltInCall_IRI', function () {\n            log('BuiltInCall_IRI');\n            _this.CONSUME(sparqlTokenMap.IRI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_URI = _this.RULE('BuiltInCall_URI', function () {\n            log('BuiltInCall_URI');\n            _this.CONSUME(sparqlTokenMap.URI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_BNODE = _this.RULE('BuiltInCall_BNODE', function () {\n            log('BuiltInCall_BNODE');\n            _this.CONSUME(sparqlTokenMap.BNODE);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Expression);\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n            ]);\n        });\n        _this.BuiltInCall_RAND = _this.RULE('BuiltInCall_RAND', function () {\n            log('BuiltInCall_RAND');\n            _this.CONSUME(sparqlTokenMap.RAND);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_ABS = _this.RULE('BuiltInCall_ABS', function () {\n            log('BuiltInCall_ABS');\n            _this.CONSUME(sparqlTokenMap.ABS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_CEIL = _this.RULE('BuiltInCall_CEIL', function () {\n            log('BuiltInCall_CEIL');\n            _this.CONSUME(sparqlTokenMap.CEIL);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_FLOOR = _this.RULE('BuiltInCall_FLOOR', function () {\n            log('BuiltInCall_FLOOR');\n            _this.CONSUME(sparqlTokenMap.FLOOR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_ROUND = _this.RULE('BuiltInCall_ROUND', function () {\n            log('BuiltInCall_ROUND');\n            _this.CONSUME(sparqlTokenMap.ROUND);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_CONCAT = _this.RULE('BuiltInCall_CONCAT', function () {\n            log('BuiltInCall_CONCAT');\n            _this.CONSUME(sparqlTokenMap.CONCAT);\n            _this.SUBRULE(_this.ExpressionList);\n        });\n        _this.BuiltInCall_STRLEN = _this.RULE('BuiltInCall_STRLEN', function () {\n            log('BuiltInCall_STRLEN');\n            _this.CONSUME(sparqlTokenMap.STRLEN);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_UCASE = _this.RULE('BuiltInCall_UCASE', function () {\n            log('BuiltInCall_UCASE');\n            _this.CONSUME(sparqlTokenMap.UCASE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_LCASE = _this.RULE('BuiltInCall_LCASE', function () {\n            log('BuiltInCall_LCASE');\n            _this.CONSUME(sparqlTokenMap.LCASE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_ENCODE_FOR_URI = _this.RULE('BuiltInCall_ENCODE_FOR_URI', function () {\n            log('BuiltInCall_ENCODE_FOR_URI');\n            _this.CONSUME(sparqlTokenMap.ENCODE_FOR_URI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_CONTAINS = _this.RULE('BuiltInCall_CONTAINS', function () {\n            log('BuiltInCall_CONTAINS');\n            _this.CONSUME(sparqlTokenMap.CONTAINS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRSTARTS = _this.RULE('BuiltInCall_STRSTARTS', function () {\n            log('BuiltInCall_STRSTARTS');\n            _this.CONSUME(sparqlTokenMap.STRSTARTS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRENDS = _this.RULE('BuiltInCall_STRENDS', function () {\n            log('BuiltInCall_STRENDS');\n            _this.CONSUME(sparqlTokenMap.STRENDS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRBEFORE = _this.RULE('BuiltInCall_STRBEFORE', function () {\n            log('BuiltInCall_STRBEFORE');\n            _this.CONSUME(sparqlTokenMap.STRBEFORE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRAFTER = _this.RULE('BuiltInCall_STRAFTER', function () {\n            log('BuiltInCall_STRAFTER');\n            _this.CONSUME(sparqlTokenMap.STRAFTER);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_YEAR = _this.RULE('BuiltInCall_YEAR', function () {\n            log('BuiltInCall_YEAR');\n            _this.CONSUME(sparqlTokenMap.YEAR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_MONTH = _this.RULE('BuiltInCall_MONTH', function () {\n            log('BuiltInCall_MONTH');\n            _this.CONSUME(sparqlTokenMap.MONTH);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_DAY = _this.RULE('BuiltInCall_DAY', function () {\n            log('BuiltInCall_DAY');\n            _this.CONSUME(sparqlTokenMap.DAY);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_HOURS = _this.RULE('BuiltInCall_HOURS', function () {\n            log('BuiltInCall_HOURS');\n            _this.CONSUME(sparqlTokenMap.HOURS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_MINUTES = _this.RULE('BuiltInCall_MINUTES', function () {\n            log('BuiltInCall_MINUTES');\n            _this.CONSUME(sparqlTokenMap.MINUTES);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SECONDS = _this.RULE('BuiltInCall_SECONDS', function () {\n            log('BuiltInCall_SECONDS');\n            _this.CONSUME(sparqlTokenMap.SECONDS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_TIMEZONE = _this.RULE('BuiltInCall_TIMEZONE', function () {\n            log('BuiltInCall_TIMEZONE');\n            _this.CONSUME(sparqlTokenMap.TIMEZONE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_TZ = _this.RULE('BuiltInCall_TZ', function () {\n            log('BuiltInCall_TZ');\n            _this.CONSUME(sparqlTokenMap.TZ);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_NOW = _this.RULE('BuiltInCall_NOW', function () {\n            log('BuiltInCall_NOW');\n            _this.CONSUME(sparqlTokenMap.NOW);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_UUID = _this.RULE('BuiltInCall_UUID', function () {\n            log('BuiltInCall_UUID');\n            _this.CONSUME(sparqlTokenMap.UUID);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_STRUUID = _this.RULE('BuiltInCall_STRUUID', function () {\n            log('BuiltInCall_STRUUID');\n            _this.CONSUME(sparqlTokenMap.STRUUID);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_MD5 = _this.RULE('BuiltInCall_MD5', function () {\n            log('BuiltInCall_MD5');\n            _this.CONSUME(sparqlTokenMap.MD5);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA1 = _this.RULE('BuiltInCall_SHA1', function () {\n            log('BuiltInCall_SHA1');\n            _this.CONSUME(sparqlTokenMap.SHA1);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA256 = _this.RULE('BuiltInCall_SHA256', function () {\n            log('BuiltInCall_SHA256');\n            _this.CONSUME(sparqlTokenMap.SHA256);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA384 = _this.RULE('BuiltInCall_SHA384', function () {\n            log('BuiltInCall_SHA384');\n            _this.CONSUME(sparqlTokenMap.SHA384);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA512 = _this.RULE('BuiltInCall_SHA512', function () {\n            log('BuiltInCall_SHA512');\n            _this.CONSUME(sparqlTokenMap.SHA512);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_COALESCE = _this.RULE('BuiltInCall_COALESCE', function () {\n            log('BuiltInCall_COALESCE');\n            _this.CONSUME(sparqlTokenMap.COALESCE);\n            _this.SUBRULE(_this.ExpressionList);\n        });\n        _this.BuiltInCall_IF = _this.RULE('BuiltInCall_IF', function () {\n            log('BuiltInCall_IF');\n            _this.CONSUME(sparqlTokenMap.IF);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME1(sparqlTokenMap.Comma);\n            _this.SUBRULE2(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRLANG = _this.RULE('BuiltInCall_STRLANG', function () {\n            log('BuiltInCall_STRLANG');\n            _this.CONSUME(sparqlTokenMap.STRLANG);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRDT = _this.RULE('BuiltInCall_STRDT', function () {\n            log('BuiltInCall_STRDT');\n            _this.CONSUME(sparqlTokenMap.STRDT);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_sameTerm = _this.RULE('BuiltInCall_sameTerm', function () {\n            log('BuiltInCall_sameTerm');\n            _this.CONSUME(sparqlTokenMap.sameTerm);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isIRI = _this.RULE('BuiltInCall_isIRI', function () {\n            log('BuiltInCall_isIRI');\n            _this.CONSUME(sparqlTokenMap.isIRI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isURI = _this.RULE('BuiltInCall_isURI', function () {\n            log('BuiltInCall_isURI');\n            _this.CONSUME(sparqlTokenMap.isURI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isBLANK = _this.RULE('BuiltInCall_isBLANK', function () {\n            log('BuiltInCall_isBLANK');\n            _this.CONSUME(sparqlTokenMap.isBLANK);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isLITERAL = _this.RULE('BuiltInCall_isLITERAL', function () {\n            log('BuiltInCall_isLITERAL');\n            _this.CONSUME(sparqlTokenMap.isLITERAL);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isNUMERIC = _this.RULE('BuiltInCall_isNUMERIC', function () {\n            log('BuiltInCall_isNUMERIC');\n            _this.CONSUME(sparqlTokenMap.isNUMERIC);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall = _this.RULE('BuiltInCall', function () {\n            log('BuiltInCall');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Aggregate); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LANG); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LANGMATCHES); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_DATATYPE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_BOUND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_IRI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_URI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_BNODE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_RAND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ABS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CEIL); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_FLOOR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ROUND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CONCAT); } },\n                { ALT: function () { return _this.SUBRULE(_this.SubstringExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRLEN); } },\n                { ALT: function () { return _this.SUBRULE(_this.StrReplaceExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_UCASE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LCASE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ENCODE_FOR_URI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CONTAINS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRSTARTS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRENDS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRBEFORE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRAFTER); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_YEAR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MONTH); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_DAY); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_HOURS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MINUTES); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SECONDS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_TIMEZONE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_TZ); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_NOW); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_UUID); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRUUID); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MD5); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA1); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA256); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA384); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA512); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_COALESCE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_IF); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRLANG); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRDT); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_sameTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isIRI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isURI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isBLANK); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isLITERAL); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isNUMERIC); } },\n                { ALT: function () { return _this.SUBRULE(_this.RegexExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.ExistsFunction); } },\n                { ALT: function () { return _this.SUBRULE(_this.NotExistsFunction); } },\n            ]);\n        });\n        _this.RegexExpression = _this.RULE('RegexExpression', function () {\n            log('RegexExpression');\n            _this.CONSUME(sparqlTokenMap.REGEX);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.OPTION(function () {\n                _this.CONSUME1(sparqlTokenMap.Comma);\n                _this.SUBRULE2(_this.Expression);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.SubstringExpression = _this.RULE('SubstringExpression', function () {\n            log('SubstringExpression');\n            _this.CONSUME(sparqlTokenMap.SUBSTR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.OPTION(function () {\n                _this.CONSUME1(sparqlTokenMap.Comma);\n                _this.SUBRULE2(_this.Expression);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.StrReplaceExpression = _this.RULE('StrReplaceExpression', function () {\n            log('StrReplaceExpression');\n            _this.CONSUME(sparqlTokenMap.REPLACE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME1(sparqlTokenMap.Comma);\n            _this.SUBRULE2(_this.Expression);\n            _this.OPTION(function () {\n                _this.CONSUME2(sparqlTokenMap.Comma);\n                _this.SUBRULE3(_this.Expression);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.ExistsFunction = _this.RULE('ExistsFunction', function () {\n            log('ExistsFunction');\n            _this.CONSUME(sparqlTokenMap.EXISTS);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.NotExistsFunction = _this.RULE('NotExistsFunction', function () {\n            log('NotExistsFunction');\n            _this.CONSUME(sparqlTokenMap.NOT_EXISTS);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.Count = _this.RULE('Count', function () {\n            log('Count');\n            _this.CONSUME(sparqlTokenMap.COUNT);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.OR([\n                { ALT: function () { return _this.CONSUME3(sparqlTokenMap.Star); } },\n                { ALT: function () { return _this.SUBRULE(_this.Expression); } },\n            ]);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Sum = _this.RULE('Sum', function () {\n            log('Sum');\n            _this.CONSUME(sparqlTokenMap.SUM);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Min = _this.RULE('Min', function () {\n            log('Min');\n            _this.CONSUME(sparqlTokenMap.MIN);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Max = _this.RULE('Max', function () {\n            log('Max');\n            _this.CONSUME(sparqlTokenMap.MAX);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Avg = _this.RULE('Avg', function () {\n            log('Avg');\n            _this.CONSUME(sparqlTokenMap.AVG);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Sample = _this.RULE('Sample', function () {\n            log('Sample');\n            _this.CONSUME(sparqlTokenMap.SAMPLE);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.GroupConcat = _this.RULE('GroupConcat', function () {\n            log('GroupConcat');\n            _this.CONSUME(sparqlTokenMap.GROUP_CONCAT);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.OPTION1(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.CONSUME(sparqlTokenMap.SEPARATOR);\n                _this.CONSUME(sparqlTokenMap.Equals);\n                _this.SUBRULE(_this.String);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Aggregate = _this.RULE('Aggregate', function () {\n            log('Aggregate');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Count); } },\n                { ALT: function () { return _this.SUBRULE(_this.Sum); } },\n                { ALT: function () { return _this.SUBRULE(_this.Min); } },\n                { ALT: function () { return _this.SUBRULE(_this.Max); } },\n                { ALT: function () { return _this.SUBRULE(_this.Avg); } },\n                { ALT: function () { return _this.SUBRULE(_this.Sample); } },\n                { ALT: function () { return _this.SUBRULE(_this.GroupConcat); } },\n            ]);\n        });\n        _this.iriOrFunction = _this.RULE('iriOrFunction', function () {\n            log('iriOrFunction');\n            _this.SUBRULE(_this.iri);\n            _this.OPTION(function () { return _this.SUBRULE(_this.ArgList); });\n        });\n        _this.RDFLiteral = _this.RULE('RDFLiteral', function () {\n            log('RDFLiteral');\n            _this.SUBRULE(_this.String);\n            _this.OPTION(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.CONSUME(sparqlTokenMap.LANGTAG); } },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.DoubleCaret);\n                            _this.SUBRULE(_this.iri);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.NumericLiteral = _this.RULE('NumericLiteral', function () {\n            log('NumericLiteral');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralUnsigned); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralPositive); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralNegative); } },\n            ]);\n        });\n        _this.NumericLiteralUnsigned = _this.RULE('NumericLiteralUnsigned', function () {\n            log('NumericLiteralUnsigned');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.INTEGER); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DECIMAL); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DOUBLE); } },\n            ]);\n        });\n        _this.NumericLiteralPositive = _this.RULE('NumericLiteralPositive', function () {\n            log('NumericLiteralPositive');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.INTEGER_POSITIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DECIMAL_POSITIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DOUBLE_POSITIVE); } },\n            ]);\n        });\n        _this.NumericLiteralNegative = _this.RULE('NumericLiteralNegative', function () {\n            log('NumericLiteralNegative');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.INTEGER_NEGATIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DECIMAL_NEGATIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DOUBLE_NEGATIVE); } },\n            ]);\n        });\n        _this.BooleanLiteral = _this.RULE('BooleanLiteral', function () {\n            log('BooleanLiteral');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.TRUE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.FALSE); } },\n            ]);\n        });\n        _this.String = _this.RULE('String', function () {\n            log('String');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL1); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL2); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL_LONG1); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL_LONG2); } },\n            ]);\n        });\n        _this.iri = _this.RULE('iri', function () {\n            log('iri');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.IRIREF); } },\n                { ALT: function () { return _this.SUBRULE(_this.PrefixedName); } },\n            ]);\n        });\n        _this.PrefixedName = _this.RULE('PrefixedName', function () {\n            log('PrefixedName');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PNAME_LN); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PNAME_NS); } },\n            ]);\n        });\n        _this.BlankNode = _this.RULE('BlankNode', function () {\n            log('BlankNode');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.BLANK_NODE_LABEL); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.ANON); } },\n            ]);\n        });\n        _this.lexer = new Lexer(tokenVocab);\n        return _this;\n    }\n    return BaseSparqlParser;\n}(Parser));\nexport { BaseSparqlParser };\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexport var traverse = function (root, visit) {\n    _traverse(root, null, visit);\n};\nexport var unsafeTraverse = function (root, visit) {\n    _traverse(root, null, visit, false);\n};\nexport function isCstNode(object) {\n    return Boolean(object && 'name' in object);\n}\nvar TraverseContext = /** @class */ (function () {\n    function TraverseContext(_a) {\n        var node = _a.node, parentCtx = _a.parentCtx;\n        this.node = __assign({}, node);\n        this.parentCtx = __assign({}, parentCtx);\n    }\n    return TraverseContext;\n}());\nvar _traverse = function (root, ctx, visit, visitSafely) {\n    if (ctx === void 0) { ctx = new TraverseContext({ node: root }); }\n    if (visitSafely === void 0) { visitSafely = true; }\n    if (!isCstNode(root)) {\n        // must be a token\n        return visit(visitSafely ? __assign({}, ctx) : ctx);\n    }\n    // is a grammar rule node\n    var children = root.children;\n    Object.keys(children).forEach(function (key) {\n        var childType = children[key];\n        if (!childType.length) {\n            return;\n        }\n        childType.forEach(function (child) {\n            var childCtx = visitSafely\n                ? new TraverseContext({ node: child, parentCtx: ctx })\n                : { node: child, parentCtx: ctx };\n            var afterVisit = function (transformedCtx) {\n                var nextCtx = childCtx;\n                if (transformedCtx) {\n                    nextCtx = visitSafely\n                        ? new TraverseContext({\n                            node: transformedCtx.node,\n                            parentCtx: transformedCtx.parentCtx,\n                        })\n                        : {\n                            node: transformedCtx.node,\n                            parentCtx: transformedCtx.parentCtx,\n                        };\n                }\n                _traverse(child, nextCtx, visit, visitSafely);\n            };\n            visit(childCtx, afterVisit);\n        });\n    });\n};\n","/*\nCopyright ©2012–2018 Ruben Verborgh\nWith modifications Copyright ©2018 Stardog Union\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nvar escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\[uU]|\\\\(.)/g;\nvar escapeReplacements = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\"': '\"',\n    n: '\\n',\n    r: '\\r',\n    t: '\\t',\n    f: '\\f',\n    b: '\\b',\n    _: '_',\n    '~': '~',\n    '.': '.',\n    '-': '-',\n    '!': '!',\n    $: '$',\n    '&': '&',\n    '(': '(',\n    ')': ')',\n    '*': '*',\n    '+': '+',\n    ',': ',',\n    ';': ';',\n    '=': '=',\n    '/': '/',\n    '?': '?',\n    '#': '#',\n    '@': '@',\n    '%': '%',\n};\nexport var unescapedStringLiteralQuote = /^\"([^\"\\\\\\r\\n]+)\"/; // non-empty string without escape sequences\nexport var unescapedStringLiteralSingleQuote = /^'([^'\\\\\\r\\n]+)'/;\nexport var stringLiteralQuote = /^\"((?:[^\"\\\\\\r\\n]|\\\\.)*)\"(?=[^\"])/;\nexport var stringLiteralSingleQuote = /^'((?:[^'\\\\\\r\\n]|\\\\.)*)'(?=[^'])/;\nexport var stringLiteralLongQuote = /^\"\"\"([^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*)\"\"\"/;\nexport var stringLiteralLongSingleQuote = /^'''([^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*)'''/;\nexport var illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\nexport var escapedIri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/;\nexport var unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/;\n// Handle special unescaping needs related to the IRIREF rule and others.\nexport var unescape = function (item) {\n    try {\n        return item.replace(escapeSequence, function (_, unicode4, unicode8, escapedChar) {\n            if (unicode4) {\n                return String.fromCharCode(parseInt(unicode4, 16));\n            }\n            else if (unicode8) {\n                var charCode = parseInt(unicode8, 16);\n                if (charCode <= 0xffff) {\n                    return String.fromCharCode(charCode);\n                }\n                return String.fromCharCode(0xd800 + (charCode -= 0x10000) / 0x400, 0xdc00 + (charCode & 0x3ff));\n            }\n            else {\n                var replacement = escapeReplacements[escapedChar];\n                if (!replacement) {\n                    throw new Error();\n                }\n                return replacement;\n            }\n        });\n    }\n    catch (error) {\n        return null;\n    }\n};\n","var sparqlTokenMap = require('../sparql/tokens').sparqlTokenMap;\nimport { createToken } from 'chevrotain';\nimport { regex } from '../helpers/regex';\nimport { EXPONENT, ECHAR, PLX, HEX, PN_CHARS_BASE, PN_CHARS_U, PN_CHARS, PN_PREFIX, PN_LOCAL, PN_LOCAL_ESC, } from '../helpers/matchers';\nimport { unescape, stringLiteralLongSingleQuote, stringLiteralLongQuote, unescapedStringLiteralQuote, stringLiteralQuote, unescapedStringLiteralSingleQuote, stringLiteralSingleQuote, unescapedIri, escapedIri, illegalIriChars, } from '../helpers/unescape';\nvar unicodeRegexp = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nexport var turtleTokenMap = {\n    Comment: createToken({\n        name: 'Comment',\n        pattern: /#[^\\n]*/,\n        group: 'comments',\n    }),\n    LBracket: sparqlTokenMap.LBracket,\n    RBracket: sparqlTokenMap.RBracket,\n    LCurly: sparqlTokenMap.LCurly,\n    RCurly: sparqlTokenMap.RCurly,\n    LParen: sparqlTokenMap.LParen,\n    RParen: sparqlTokenMap.RParen,\n    Period: sparqlTokenMap.Period,\n    WhiteSpace: sparqlTokenMap.WhiteSpace,\n    // 'true' and 'false' are case sensitive in Turtle but not in SPARQL\n    TRUE: createToken({\n        name: 'TRUE',\n        pattern: /true/,\n    }),\n    FALSE: createToken({\n        name: 'FALSE',\n        pattern: /false/,\n    }),\n    DoubleCaret: sparqlTokenMap.DoubleCaret,\n    LEmbed: sparqlTokenMap.LEmbed,\n    REmbed: sparqlTokenMap.REmbed,\n    Comma: sparqlTokenMap.Comma,\n    Semicolon: sparqlTokenMap.Semicolon,\n    A: sparqlTokenMap.A,\n    PREFIX: sparqlTokenMap.PREFIX,\n    BASE: sparqlTokenMap.BASE,\n    PNAME_NS: sparqlTokenMap.PNAME_NS,\n    PNAME_LN: sparqlTokenMap.PNAME_LN,\n    BLANK_NODE_LABEL: sparqlTokenMap.BLANK_NODE_LABEL,\n    TTL_BASE: createToken({ name: 'TTL_BASE', pattern: /@base/ }),\n    TTL_PREFIX: createToken({ name: 'TTL_PREFIX', pattern: /@prefix/ }),\n    LANGTAG: sparqlTokenMap.LANGTAG,\n    INTEGER: createToken({\n        name: 'INTEGER',\n        pattern: regex.and(regex.option(/[+-]/), /\\d+/),\n    }),\n    DECIMAL: createToken({\n        name: 'DECIMAL',\n        pattern: regex.and(regex.option(/[+-]/), /(\\d*\\.\\d+)/),\n    }),\n    DOUBLE: createToken({\n        name: 'DOUBLE',\n        pattern: regex.and(regex.option(/[+-]/), regex.or(regex.and(/\\d+\\.\\d*/, EXPONENT), regex.and(/\\.\\d+/, EXPONENT), regex.and(/\\d+/, EXPONENT))),\n    }),\n    EXPONENT: createToken({ name: 'EXPONENT', pattern: EXPONENT }),\n    ECHAR: createToken({ name: 'ECHAR', pattern: ECHAR }),\n    ANON: sparqlTokenMap.ANON,\n    PLX: createToken({ name: 'PLX', pattern: PLX }),\n    PERCENT: sparqlTokenMap.PERCENT,\n    HEX: createToken({ name: 'HEX', pattern: HEX }),\n    STRING_LITERAL_LONG_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongSingleQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_LONG_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_QUOTE: createToken({\n        name: 'STRING_LITERAL_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    STRING_LITERAL_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralSingleQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralSingleQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    UCHAR: createToken({\n        name: 'UCHAR',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            return unicodeRegexp.exec(text.slice(startOffset));\n        },\n        line_breaks: false,\n    }),\n    IRIREF: createToken({\n        name: 'IRIREF',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedIri.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = escapedIri.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            var value = unescape(match[1]);\n            if (value === null || illegalIriChars.test(value)) {\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    PN_CHARS_BASE: createToken({ name: 'PN_CHARS_BASE', pattern: PN_CHARS_BASE }),\n    PN_CHARS_U: createToken({ name: 'PN_CHARS_U', pattern: PN_CHARS_U }),\n    PN_CHARS: createToken({ name: 'PN_CHARS', pattern: PN_CHARS }),\n    PN_PREFIX: createToken({ name: 'PN_PREFIX', pattern: PN_PREFIX }),\n    PN_LOCAL: createToken({ name: 'PN_LOCAL', pattern: PN_LOCAL }),\n    PN_LOCAL_ESC: createToken({ name: 'PN_LOCAL_ESC', pattern: PN_LOCAL_ESC }),\n    Unknown: createToken({\n        name: 'Unknown',\n        pattern: /\\w+/,\n    }),\n};\nexport var turtleTokenTypes = [\n    turtleTokenMap.Comment,\n    sparqlTokenMap.ANON,\n    sparqlTokenMap.LBracket,\n    sparqlTokenMap.RBracket,\n    sparqlTokenMap.LCurly,\n    sparqlTokenMap.RCurly,\n    sparqlTokenMap.LParen,\n    sparqlTokenMap.RParen,\n    sparqlTokenMap.WhiteSpace,\n    turtleTokenMap.TRUE,\n    turtleTokenMap.FALSE,\n    sparqlTokenMap.Comma,\n    sparqlTokenMap.Semicolon,\n    sparqlTokenMap.PNAME_NS,\n    sparqlTokenMap.A,\n    sparqlTokenMap.PREFIX,\n    sparqlTokenMap.BASE,\n    sparqlTokenMap.PNAME_LN,\n    sparqlTokenMap.BLANK_NODE_LABEL,\n    turtleTokenMap.TTL_BASE,\n    turtleTokenMap.TTL_PREFIX,\n    sparqlTokenMap.LANGTAG,\n    turtleTokenMap.DOUBLE,\n    turtleTokenMap.DECIMAL,\n    sparqlTokenMap.Period,\n    sparqlTokenMap.DoubleCaret,\n    turtleTokenMap.LEmbed,\n    turtleTokenMap.REmbed,\n    turtleTokenMap.IRIREF,\n    turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE,\n    turtleTokenMap.STRING_LITERAL_LONG_QUOTE,\n    turtleTokenMap.STRING_LITERAL_QUOTE,\n    turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE,\n    turtleTokenMap.INTEGER,\n    turtleTokenMap.EXPONENT,\n    turtleTokenMap.PLX,\n    sparqlTokenMap.PERCENT,\n    turtleTokenMap.HEX,\n    turtleTokenMap.PN_CHARS_BASE,\n    turtleTokenMap.PN_CHARS_U,\n    turtleTokenMap.PN_CHARS,\n    turtleTokenMap.PN_PREFIX,\n    turtleTokenMap.PN_LOCAL,\n    turtleTokenMap.PN_LOCAL_ESC,\n    turtleTokenMap.ECHAR,\n    turtleTokenMap.UCHAR,\n    turtleTokenMap.Unknown,\n];\n"],"sourceRoot":""}