{"version":3,"sources":["webpack://millan.[name]/webpack/universalModuleDefinition","webpack://millan.[name]/webpack/bootstrap","webpack://millan.[name]/./src/sparql/BaseSparqlParser.ts","webpack://millan.[name]/./src/turtle/TurtleParser.ts","webpack://millan.[name]/./src/sparql/W3SpecSparqlParser.ts","webpack://millan.[name]/./src/srs/tokens.ts","webpack://millan.[name]/./src/srs/visitor.ts","webpack://millan.[name]/./src/turtle/defaultNamespaces.ts","webpack://millan.[name]/./src/srs/customErrors.ts","webpack://millan.[name]/./src/srs/SrsParser.ts","webpack://millan.[name]/./src/srs/index.ts","webpack://millan.[name]/./src/helpers/unescape.ts","webpack://millan.[name]/./src/turtle/tokens.ts","webpack://millan.[name]/./src/helpers/cst.ts"],"names":["root","factory","exports","module","define","amd","self","this","webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","6","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","oldJsonpFunction","slice","__webpack_exports__","BaseSparqlParser","extendStatics","chevrotain__WEBPACK_IMPORTED_MODULE_0__","__extends","b","setPrototypeOf","__proto__","Array","__","constructor","__assign","assign","arguments","sparqlTokenMap","log","args","_i","_super","options","tokenVocab","_this","recoveryEnabled","outputCst","config","tokenize","document","lexer","tokens","parse","entryRule","SparqlDoc","input","cst","errors","parseGroupGraphPattern","GroupGraphPattern","parseTriplesBlock","TriplesBlock","RULE","MANY","OR","ALT","SUBRULE","Prologue","QueryUnit","UpdateUnit","Query","SelectQuery","ConstructQuery","DescribeQuery","AskQuery","ValuesClause","Constant","iri","RDFLiteral","NumericLiteral","BooleanLiteral","MaxLength","CONSUME","MAX_LENGTH","INTEGER","Update","AT_LEAST_ONE","BaseDecl","PrefixDecl","BASE","IRIREF","PREFIX","PNAME_NS","SelectClause","DatasetClause","WhereClause","SolutionModifier","SubSelect","SELECT","OPTION","DISTINCT","REDUCED","OR1","OR2","Var","LParen","Expression","AS","SUBRULE1","RParen","Star","CONSTRUCT","ConstructTemplate","MANY1","WHERE","LCurly","TriplesTemplate","RCurly","DESCRIBE","VarOrIri","ASK","FROM","DefaultGraphClause","NamedGraphClause","SourceSelector","NAMED","GroupClause","OPTION1","HavingClause","OPTION2","OrderClause","OPTION3","LimitOffsetClause","GROUP_BY","GroupCondition","BuiltInCall","FunctionCall","HAVING","HavingCondition","Constraint","ORDER_BY","OrderCondition","ASC","DESC","BrackettedExpression","LimitClause","OffsetClause","OFFSET","LIMIT","VALUES","DataBlock","Update1","Semicolon","Load","Clear","Drop","Add","Move","Copy","Create","InsertData","DeleteData","DeleteWhere","Modify","LOAD","SILENT","INTO","GraphRef","CLEAR","GraphRefAll","DROP","CREATE","ADD","GraphOrDefault","TO","MOVE","COPY","INSERT_DATA","QuadData","DELETE_DATA","DELETE_WHERE","QuadPattern","WITH","DeleteClause","InsertClause","UsingClause","DELETE","INSERT","USING","DEFAULT","GRAPH","ALL","Quads","QuadsNotTriples","Period","TriplesSameSubject","GroupGraphPatternSub","GraphPatternNotTriples","TriplesSameSubjectPath","GroupOrUnionGraphPattern","OptionalGraphPattern","MinusGraphPattern","GraphGraphPattern","ServiceGraphPattern","Filter","Bind","InlineData","OPTIONAL","SERVICE","BIND","InlineDataOneVar","InlineDataFull","DataBlockValue","NIL","CONSUME1","MANY2","UNDEF","MINUS","UNION","FILTER","ArgList","Comma","ExpressionList","ConstructTriples","VarOrTerm","PropertyListNotEmpty","TriplesNode","PropertyList","Verb","ObjectList","A","AT_LEAST_ONE_SEP","SEP","DEF","GraphNode","PropertyListPathNotEmpty","TriplesNodePath","PropertyListPath","VerbPath","VerbSimple","ObjectListPath","Path","ObjectPath","GraphNodePath","PathAlternative","Pipe","PathSequence","ForwardSlash","PathEltOrInverse","PathElt","PathPrimary","PathMod","Caret","QuestionMark","Plus","Bang","PathNegatedPropertySet","PathOneInPropertySet","MANY_SEP","Integer","Collection","BlankNodePropertyList","LBracket","RBracket","CollectionPath","BlankNodePropertyListPath","GraphTerm","VAR1","VAR2","BlankNode","ConditionalOrExpression","LogicalOr","ConditionalAndExpression","LogicalAnd","ValueLogical","RelationalExpression","NumericExpression","Equals","NotEquals","LessThan","GreaterThan","LessThanEquals","GreaterThanEquals","IN","NOT_IN","AdditiveExpression","MultiplicativeExpression","Minus","NumericLiteralPositive","NumericLiteralNegative","OR3","OR4","UnaryExpression","SUBRULE2","PrimaryExpression","SUBRULE3","iriOrFunction","BuiltInCall_STR","STR","BuiltInCall_LANG","LANG","BuiltInCall_LANGMATCHES","LANGMATCHES","BuiltInCall_DATATYPE","DATATYPE","BuiltInCall_BOUND","BOUND","BuiltInCall_IRI","IRI","BuiltInCall_URI","URI","BuiltInCall_BNODE","BNODE","BuiltInCall_RAND","RAND","BuiltInCall_ABS","ABS","BuiltInCall_CEIL","CEIL","BuiltInCall_FLOOR","FLOOR","BuiltInCall_ROUND","ROUND","BuiltInCall_CONCAT","CONCAT","BuiltInCall_STRLEN","STRLEN","BuiltInCall_UCASE","UCASE","BuiltInCall_LCASE","LCASE","BuiltInCall_ENCODE_FOR_URI","ENCODE_FOR_URI","BuiltInCall_CONTAINS","CONTAINS","BuiltInCall_STRSTARTS","STRSTARTS","BuiltInCall_STRENDS","STRENDS","BuiltInCall_STRBEFORE","STRBEFORE","BuiltInCall_STRAFTER","STRAFTER","BuiltInCall_YEAR","YEAR","BuiltInCall_MONTH","MONTH","BuiltInCall_DAY","DAY","BuiltInCall_HOURS","HOURS","BuiltInCall_MINUTES","MINUTES","BuiltInCall_SECONDS","SECONDS","BuiltInCall_TIMEZONE","TIMEZONE","BuiltInCall_TZ","TZ","BuiltInCall_NOW","NOW","BuiltInCall_UUID","UUID","BuiltInCall_STRUUID","STRUUID","BuiltInCall_MD5","MD5","BuiltInCall_SHA1","SHA1","BuiltInCall_SHA256","SHA256","BuiltInCall_SHA384","SHA384","BuiltInCall_SHA512","SHA512","BuiltInCall_COALESCE","COALESCE","BuiltInCall_IF","IF","BuiltInCall_STRLANG","STRLANG","BuiltInCall_STRDT","STRDT","BuiltInCall_sameTerm","sameTerm","BuiltInCall_isIRI","isIRI","BuiltInCall_isURI","isURI","BuiltInCall_isBLANK","isBLANK","BuiltInCall_isLITERAL","isLITERAL","BuiltInCall_isNUMERIC","isNUMERIC","Aggregate","SubstringExpression","StrReplaceExpression","RegexExpression","ExistsFunction","NotExistsFunction","REGEX","SUBSTR","REPLACE","CONSUME2","EXISTS","NOT_EXISTS","Count","COUNT","CONSUME3","Sum","SUM","Min","MIN","Max","MAX","Avg","AVG","Sample","SAMPLE","GroupConcat","GROUP_CONCAT","SEPARATOR","String","LANGTAG","DoubleCaret","NumericLiteralUnsigned","DECIMAL","DOUBLE","INTEGER_POSITIVE","DECIMAL_POSITIVE","DOUBLE_POSITIVE","INTEGER_NEGATIVE","DECIMAL_NEGATIVE","DOUBLE_NEGATIVE","TRUE","FALSE","STRING_LITERAL1","STRING_LITERAL2","STRING_LITERAL_LONG1","STRING_LITERAL_LONG2","PrefixedName","PNAME_LN","BLANK_NODE_LABEL","ANON","TurtleParser","_a","turtleTokenTypes","turtleTokenMap","lexerDefinition","performSelfAnalysis","namespacesMap","semanticErrors","resetManagedState","turtleDoc","statement","directive","triples","prefixID","base","sparqlPrefix","sparqlBase","TTL_PREFIX","pnameNsToken","iriToken","pnameImageWithoutColon","image","iriImage","TTL_BASE","subject","predicateObjectList","blankNodePropertyList","verb","objectList","collection","predicate","literal","STRING_LITERAL_QUOTE","STRING_LITERAL_SINGLE_QUOTE","STRING_LITERAL_LONG_SINGLE_QUOTE","STRING_LITERAL_LONG_QUOTE","prefixedNameToken","indexOf","message","token","context","ruleStack","getHumanReadableRuleStack","ruleOccurrenceStack","RULE_OCCURRENCE_STACK","resyncedTokens","W3SpecSparqlParser","_BaseSparqlParser__WEBPACK_IMPORTED_MODULE_0__","chevrotain__WEBPACK_IMPORTED_MODULE_1__","baseTokens","multiModeLexerDefinition","srsTokenMap","srsTokenTypes","LexerMode","helpers_matchers__WEBPACK_IMPORTED_MODULE_1__","turtle_tokens__WEBPACK_IMPORTED_MODULE_2__","sparql_tokens__WEBPACK_IMPORTED_MODULE_3__","Rule","pattern","If","push_mode","IFCLAUSE","Then","THENCLAUSE","EndThen","pop_mode","text","startOffset","cursor","unclosedBraceCount","exec","line_breaks","indexOfIriRef","modes","TURTLE","concat","WhiteSpace","defaultMode","defaultNamespacesMap","freeze","reduce","prefix","getSparqlSrsVisitor","BaseVisitor","SparqlSrsVisitor","groupGraphPatterns","triplesBlocks","IfClause","ctx","cstInputTokens","$storePlaceholderTokenReplacement","tokenStore","originalTokenContext","subParserRule","sparqlParser","ThenClause","_b","stripWrappers","originalToken","replacement","$getPlaceholderTokenReplacement","parseResult","frontPadding","latestEndOffset","latestEndLine","linesBetweenTokens","startLine","untokenizedSpaceBetweenTokens","repeat","Math","max","split","forEach","line","idx","endOffset","endLine","parseImage","$getGroupGraphPatterns","$getTriplesBlocks","$resetState","validateVisitor","reduceVisitorItemErrors","acc","item","findAndSwapPlaceholders","node","parentNode","visitorItems","matchingVisitorItem","find","visitorItem","children","customErrors_a","subExpressionMatcher","defaultEarlyAbortTest","disallowedSparqlTokenNameToRuleMap","tokenName","disallowedSparqlTokenNames","keys","disallowedSparqlLiteralTokenNames","map","getCustomErrorRuleStack","traverseCtx","fullCtx","startRuleNames","topLevelSubParserRuleName","earlyAbortTest","stackUnwindingPointer","helpers_cst","includes","parentCtx","unshift","getCustomIRecognitionException","getNoPrefixError","subParserRuleName","getDisallowedTokenError","tokenType","getDisallowedLiteralError","foundPropertyListPathNotEmptyCtx","didFindSubExpressionWithMultipleChildren","errorContext","errorRuleStack","stackCtx","nodeName","test","isExpression","isTriplesBlock","isBoundExpressionWithLiteralSubject","isTriplesBlockSubject","SrsParser_extends","SrsParser_assign","SrsParser_a","SrsParser_SrsParser","SrsParser","baseNamespacesMap","visitCst","sparqlSrsVisitor","BaseSrsVisitor","getBaseCstVisitorConstructorWithDefaults","visit","getSparqlRulesFromVisitor","setBaseNamespaces","newBaseNamespaces","SrsDoc","next","currentTokenName","some","error","addIfClauseErrorsToErrors","addThenClauseErrorsToErrors","RuleDoc","RuleClause","api","srsTokens","escapeSequence","escapeReplacements","\\","'","\"","f","_","~",".","-","!","$","&","(",")","*","+",",",";","=","/","?","#","@","%","unescapedStringLiteralQuote","unescapedStringLiteralSingleQuote","stringLiteralQuote","stringLiteralSingleQuote","stringLiteralLongQuote","stringLiteralLongSingleQuote","illegalIriChars","escapedIri","unescapedIri","unescape_unescape","replace","unicode4","unicode8","escapedChar","fromCharCode","parseInt","charCode","Error","unicodeRegexp","Comment","group","regex","and","option","or","matchers","EXPONENT","ECHAR","PLX","PERCENT","HEX","match","textToMatch","UCHAR","PN_CHARS_BASE","PN_CHARS_U","PN_CHARS","PN_PREFIX","PN_LOCAL","PN_LOCAL_ESC","Unknown","traverse","unsafeTraverse","isCstNode","_traverse","Boolean","TraverseContext","visitSafely","childType","child","childCtx","transformedCtx","nextCtx"],"mappings":"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","file":"millan.srs.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"srs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"srs\"] = factory();\n\telse\n\t\troot[\"millan\"] = root[\"millan\"] || {}, root[\"millan\"][\"srs\"] = factory();\n})((typeof self !== 'undefined' ? self : this), function() {\nreturn "," \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t6: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] = (typeof self !== 'undefined' ? self : this)[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([66,0,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar sparqlTokenMap = require('./tokens').sparqlTokenMap;\nimport { Parser, Lexer, } from 'chevrotain';\n// @ts-ignore: debug logging\nfunction log() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    // console.log(...args);\n}\nvar BaseSparqlParser = /** @class */ (function (_super) {\n    __extends(BaseSparqlParser, _super);\n    function BaseSparqlParser(options, tokenVocab) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, tokenVocab, __assign({ recoveryEnabled: true, outputCst: true }, options.config)) || this;\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        _this.parse = function (document, entryRule) {\n            if (entryRule === void 0) { entryRule = _this.SparqlDoc; }\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = entryRule.call(_this);\n            var errors = _this.errors;\n            return {\n                errors: errors,\n                cst: cst,\n            };\n        };\n        _this.parseGroupGraphPattern = function (document) {\n            return _this.parse(document, _this.GroupGraphPattern);\n        };\n        _this.parseTriplesBlock = function (document) {\n            return _this.parse(document, _this.TriplesBlock);\n        };\n        // NOTE: For the sake of usability in text editors/IDEs, this parser encodes\n        // a grammar that is slightly different from the official SPARQL spec. The\n        // main differences are in the `SparqlDoc`, rule, the `Prologue` rule, and\n        // the `Update` rule. Essentially, the grammar encoded by this parser should\n        // allow any number of interspered Prologues (PREFIX/BASE), QueryUnits, and\n        // UpdateUnits, so that, e.g., this is valid:\n        //\n        //  select * { ?s ?p ?o }\n        //  prefix foo: <bar>\n        //  clear all\n        //  prefix x: <y>\n        //  construct { ?s ?p ?o }\n        //  ask { ?s ?p ?o }\n        //\n        // This is not valid according to the official spec. However, line 1 is\n        // valid, lines 2-3 are valid, lines 4-5 are valid, and line 6 is valid. In a\n        // text editor, a user might want to select and execute only those lines.\n        _this.SparqlDoc = _this.RULE('SparqlDoc', function () {\n            log('SparqlDoc');\n            _this.MANY(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.SUBRULE(_this.Prologue); } },\n                    { ALT: function () { return _this.SUBRULE(_this.QueryUnit); } },\n                    { ALT: function () { return _this.SUBRULE(_this.UpdateUnit); } },\n                ]);\n            });\n        });\n        _this.QueryUnit = _this.RULE('QueryUnit', function () {\n            log('QueryUnit');\n            _this.SUBRULE(_this.Query);\n        });\n        _this.Query = _this.RULE('Query', function () {\n            log('Query');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.SelectQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.ConstructQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.DescribeQuery); } },\n                { ALT: function () { return _this.SUBRULE(_this.AskQuery); } },\n            ]);\n            _this.SUBRULE(_this.ValuesClause);\n        });\n        _this.Constant = _this.RULE('Constant', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n            ]);\n        });\n        _this.MaxLength = _this.RULE('MaxLength', function () {\n            _this.CONSUME(sparqlTokenMap.MAX_LENGTH);\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.UpdateUnit = _this.RULE('UpdateUnit', function () {\n            log('UpdateUnit');\n            _this.SUBRULE(_this.Update);\n        });\n        _this.Prologue = _this.RULE('Prologue', function () {\n            log('Prologue');\n            _this.AT_LEAST_ONE(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.SUBRULE(_this.BaseDecl); } },\n                    { ALT: function () { return _this.SUBRULE(_this.PrefixDecl); } },\n                ]);\n            });\n        });\n        _this.BaseDecl = _this.RULE('BaseDecl', function () {\n            log('BaseDecl');\n            _this.CONSUME(sparqlTokenMap.BASE);\n            _this.CONSUME(sparqlTokenMap.IRIREF);\n        });\n        _this.PrefixDecl = _this.RULE('PrefixDecl', function () {\n            log('PrefixDecl');\n            _this.CONSUME(sparqlTokenMap.PREFIX);\n            _this.CONSUME(sparqlTokenMap.PNAME_NS);\n            _this.CONSUME(sparqlTokenMap.IRIREF);\n        });\n        _this.SelectQuery = _this.RULE('SelectQuery', function () {\n            log('SelectQuery');\n            _this.SUBRULE(_this.SelectClause);\n            _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n            _this.SUBRULE(_this.WhereClause);\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.SubSelect = _this.RULE('SubSelect', function () {\n            log('SubSelect');\n            _this.SUBRULE(_this.SelectClause);\n            _this.SUBRULE(_this.WhereClause);\n            _this.SUBRULE(_this.SolutionModifier);\n            _this.SUBRULE(_this.ValuesClause);\n        });\n        _this.SelectClause = _this.RULE('SelectClause', function () {\n            log('SelectClause');\n            _this.CONSUME(sparqlTokenMap.SELECT);\n            _this.OPTION(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.CONSUME(sparqlTokenMap.DISTINCT); } },\n                    { ALT: function () { return _this.CONSUME(sparqlTokenMap.REDUCED); } },\n                ]);\n            });\n            _this.OR1([\n                {\n                    ALT: function () {\n                        _this.AT_LEAST_ONE(function () {\n                            return _this.OR2([\n                                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                                {\n                                    ALT: function () {\n                                        _this.CONSUME(sparqlTokenMap.LParen);\n                                        _this.SUBRULE(_this.Expression);\n                                        _this.CONSUME(sparqlTokenMap.AS);\n                                        _this.SUBRULE1(_this.Var);\n                                        _this.CONSUME(sparqlTokenMap.RParen);\n                                    },\n                                },\n                            ]);\n                        });\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n            ]);\n        });\n        _this.ConstructQuery = _this.RULE('ConstructQuery', function () {\n            _this.CONSUME(sparqlTokenMap.CONSTRUCT);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.ConstructTemplate);\n                        _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n                        _this.SUBRULE(_this.WhereClause);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.MANY1(function () { return _this.SUBRULE1(_this.DatasetClause); });\n                        _this.CONSUME(sparqlTokenMap.WHERE);\n                        _this.CONSUME(sparqlTokenMap.LCurly);\n                        _this.OPTION(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n                        _this.CONSUME(sparqlTokenMap.RCurly);\n                    },\n                },\n            ]);\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.DescribeQuery = _this.RULE('DescribeQuery', function () {\n            log('DescribeQuery');\n            _this.CONSUME(sparqlTokenMap.DESCRIBE);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.VarOrIri); });\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n            ]);\n            _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n            _this.OPTION(function () { return _this.SUBRULE(_this.WhereClause); });\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.AskQuery = _this.RULE('AskQuery', function () {\n            log('AskQuery');\n            _this.CONSUME(sparqlTokenMap.ASK);\n            _this.MANY(function () { return _this.SUBRULE(_this.DatasetClause); });\n            _this.SUBRULE(_this.WhereClause);\n            _this.SUBRULE(_this.SolutionModifier);\n        });\n        _this.DatasetClause = _this.RULE('DatasetClause', function () {\n            log('DatasetClause');\n            _this.CONSUME(sparqlTokenMap.FROM);\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.DefaultGraphClause); } },\n                { ALT: function () { return _this.SUBRULE(_this.NamedGraphClause); } },\n            ]);\n        });\n        _this.DefaultGraphClause = _this.RULE('DefaultGraphClause', function () {\n            log('DefaultGraphClause');\n            _this.SUBRULE(_this.SourceSelector);\n        });\n        _this.NamedGraphClause = _this.RULE('NamedGraphClause', function () {\n            log('NamedGraphClause');\n            _this.CONSUME(sparqlTokenMap.NAMED);\n            _this.SUBRULE(_this.SourceSelector);\n        });\n        _this.SourceSelector = _this.RULE('SourceSelector', function () {\n            log('SourceSelector');\n            _this.SUBRULE(_this.iri);\n        });\n        _this.WhereClause = _this.RULE('WhereClause', function () {\n            log('WhereClause');\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.WHERE); });\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.SolutionModifier = _this.RULE('SolutionModifier', function () {\n            log('SolutionModifier');\n            _this.OPTION(function () { return _this.SUBRULE(_this.GroupClause); });\n            _this.OPTION1(function () { return _this.SUBRULE(_this.HavingClause); });\n            _this.OPTION2(function () { return _this.SUBRULE(_this.OrderClause); });\n            _this.OPTION3(function () { return _this.SUBRULE(_this.LimitOffsetClause); });\n        });\n        _this.GroupClause = _this.RULE('GroupClause', function () {\n            log('GroupClause');\n            _this.CONSUME(sparqlTokenMap.GROUP_BY);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.GroupCondition); });\n        });\n        _this.GroupCondition = _this.RULE('GroupCondition', function () {\n            log('GroupCondition');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall); } },\n                { ALT: function () { return _this.SUBRULE(_this.FunctionCall); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Expression);\n                        _this.OPTION(function () {\n                            _this.CONSUME(sparqlTokenMap.AS);\n                            _this.SUBRULE(_this.Var);\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE1(_this.Var); } },\n            ]);\n        });\n        _this.HavingClause = _this.RULE('HavingClause', function () {\n            log('HavingClause');\n            _this.CONSUME(sparqlTokenMap.HAVING);\n            _this.SUBRULE(_this.HavingCondition);\n        });\n        _this.HavingCondition = _this.RULE('HavingCondition', function () {\n            log('HavingCondition');\n            _this.SUBRULE(_this.Constraint);\n        });\n        _this.OrderClause = _this.RULE('OrderClause', function () {\n            log('OrderClause');\n            _this.CONSUME(sparqlTokenMap.ORDER_BY);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.OrderCondition); });\n        });\n        _this.OrderCondition = _this.RULE('OrderCondition', function () {\n            log('OrderCondition');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.OR1([\n                            { ALT: function () { return _this.CONSUME(sparqlTokenMap.ASC); } },\n                            { ALT: function () { return _this.CONSUME(sparqlTokenMap.DESC); } },\n                        ]);\n                        _this.SUBRULE(_this.BrackettedExpression);\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE(_this.Constraint); } },\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n            ]);\n        });\n        _this.LimitOffsetClause = _this.RULE('LimitOffsetClause', function () {\n            log('LimitOffsetClause');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.LimitClause);\n                        _this.OPTION(function () { return _this.SUBRULE(_this.OffsetClause); });\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE1(_this.OffsetClause);\n                        _this.OPTION1(function () { return _this.SUBRULE1(_this.LimitClause); });\n                    },\n                },\n            ]);\n        });\n        _this.OffsetClause = _this.RULE('OffsetClause', function () {\n            log('OffsetClause');\n            _this.CONSUME(sparqlTokenMap.OFFSET);\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.LimitClause = _this.RULE('LimitClause', function () {\n            log('LimitClause');\n            _this.CONSUME(sparqlTokenMap.LIMIT);\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.ValuesClause = _this.RULE('ValuesClause', function () {\n            log('ValuesClause');\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.VALUES);\n                _this.SUBRULE(_this.DataBlock);\n            });\n        });\n        _this.Update = _this.RULE('Update', function () {\n            log('Update');\n            _this.SUBRULE(_this.Update1);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.SUBRULE(_this.Update);\n            });\n        });\n        _this.Update1 = _this.RULE('Update1', function () {\n            log('Update1');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Load); } },\n                { ALT: function () { return _this.SUBRULE(_this.Clear); } },\n                { ALT: function () { return _this.SUBRULE(_this.Drop); } },\n                { ALT: function () { return _this.SUBRULE(_this.Add); } },\n                { ALT: function () { return _this.SUBRULE(_this.Move); } },\n                { ALT: function () { return _this.SUBRULE(_this.Copy); } },\n                { ALT: function () { return _this.SUBRULE(_this.Create); } },\n                { ALT: function () { return _this.SUBRULE(_this.InsertData); } },\n                { ALT: function () { return _this.SUBRULE(_this.DeleteData); } },\n                { ALT: function () { return _this.SUBRULE(_this.DeleteWhere); } },\n                { ALT: function () { return _this.SUBRULE(_this.Modify); } },\n            ]);\n        });\n        _this.Load = _this.RULE('Load', function () {\n            log('Load');\n            _this.CONSUME(sparqlTokenMap.LOAD);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.iri);\n            _this.OPTION1(function () {\n                _this.CONSUME(sparqlTokenMap.INTO);\n                _this.SUBRULE(_this.GraphRef);\n            });\n        });\n        _this.Clear = _this.RULE('Clear', function () {\n            log('Clear');\n            _this.CONSUME(sparqlTokenMap.CLEAR);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphRefAll);\n        });\n        _this.Drop = _this.RULE('Drop', function () {\n            log('Drop');\n            _this.CONSUME(sparqlTokenMap.DROP);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphRefAll);\n        });\n        _this.Create = _this.RULE('Create', function () {\n            log('Create');\n            _this.CONSUME(sparqlTokenMap.CREATE);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphRefAll);\n        });\n        _this.Add = _this.RULE('Add', function () {\n            log('Add');\n            _this.CONSUME(sparqlTokenMap.ADD);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphOrDefault);\n            _this.CONSUME(sparqlTokenMap.TO);\n            _this.SUBRULE1(_this.GraphOrDefault);\n        });\n        _this.Move = _this.RULE('Move', function () {\n            log('Move');\n            _this.CONSUME(sparqlTokenMap.MOVE);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphOrDefault);\n            _this.CONSUME(sparqlTokenMap.TO);\n            _this.SUBRULE1(_this.GraphOrDefault);\n        });\n        _this.Copy = _this.RULE('Copy', function () {\n            log('Copy');\n            _this.CONSUME(sparqlTokenMap.COPY);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.GraphOrDefault);\n            _this.CONSUME(sparqlTokenMap.TO);\n            _this.SUBRULE1(_this.GraphOrDefault);\n        });\n        _this.InsertData = _this.RULE('InsertData', function () {\n            log('InsertData');\n            _this.CONSUME(sparqlTokenMap.INSERT_DATA);\n            _this.SUBRULE(_this.QuadData);\n        });\n        _this.DeleteData = _this.RULE('DeleteData', function () {\n            log('DeleteData');\n            _this.CONSUME(sparqlTokenMap.DELETE_DATA);\n            _this.SUBRULE(_this.QuadData);\n        });\n        _this.DeleteWhere = _this.RULE('DeleteWhere', function () {\n            log('DeleteWhere');\n            _this.CONSUME(sparqlTokenMap.DELETE_WHERE);\n            _this.SUBRULE(_this.QuadPattern);\n        });\n        _this.Modify = _this.RULE('Modify', function () {\n            log('Modify');\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.WITH);\n                _this.SUBRULE(_this.iri);\n            });\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.DeleteClause);\n                        _this.OPTION1(function () { return _this.SUBRULE(_this.InsertClause); });\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE1(_this.InsertClause); } },\n            ]);\n            _this.MANY(function () { return _this.SUBRULE(_this.UsingClause); });\n            _this.CONSUME(sparqlTokenMap.WHERE);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.DeleteClause = _this.RULE('DeleteClause', function () {\n            log('DeleteClause');\n            _this.CONSUME(sparqlTokenMap.DELETE);\n            _this.SUBRULE(_this.QuadPattern);\n        });\n        _this.InsertClause = _this.RULE('InsertClause', function () {\n            log('InsertClause');\n            _this.CONSUME(sparqlTokenMap.INSERT);\n            _this.SUBRULE(_this.QuadPattern);\n        });\n        _this.UsingClause = _this.RULE('UsingClause', function () {\n            log('UsingClause');\n            _this.CONSUME(sparqlTokenMap.USING);\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.NAMED);\n                        _this.SUBRULE1(_this.iri);\n                    },\n                },\n            ]);\n        });\n        _this.GraphOrDefault = _this.RULE('GraphOrDefault', function () {\n            log('GraphOrDefault');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DEFAULT); } },\n                {\n                    ALT: function () {\n                        _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.GRAPH); });\n                        _this.SUBRULE(_this.iri);\n                    },\n                },\n            ]);\n        });\n        _this.GraphRef = _this.RULE('GraphRef', function () {\n            log('GraphRef');\n            _this.CONSUME(sparqlTokenMap.GRAPH);\n            _this.SUBRULE(_this.iri);\n        });\n        _this.GraphRefAll = _this.RULE('GraphRefAll', function () {\n            log('GraphRefAll');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.GraphRef); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DEFAULT); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NAMED); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.ALL); } },\n            ]);\n        });\n        _this.QuadPattern = _this.RULE('QuadPattern', function () {\n            log('QuadPattern');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.SUBRULE(_this.Quads);\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.QuadData = _this.RULE('QuadData', function () {\n            log('QuadData');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.SUBRULE(_this.Quads);\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.Quads = _this.RULE('Quads', function () {\n            log('Quads');\n            _this.OPTION(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n            _this.MANY(function () {\n                _this.SUBRULE(_this.QuadsNotTriples);\n                _this.OPTION1(function () { return _this.CONSUME(sparqlTokenMap.Period); });\n                _this.OPTION2(function () { return _this.SUBRULE1(_this.TriplesTemplate); });\n            });\n        });\n        _this.QuadsNotTriples = _this.RULE('QuadsNotTriples', function () {\n            log('QuadsNotTriples');\n            _this.CONSUME(sparqlTokenMap.GRAPH);\n            _this.SUBRULE(_this.VarOrIri);\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.OPTION(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.TriplesTemplate = _this.RULE('TriplesTemplate', function () {\n            log('TriplesTemplate');\n            _this.SUBRULE(_this.TriplesSameSubject);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Period);\n                _this.OPTION1(function () { return _this.SUBRULE(_this.TriplesTemplate); });\n            });\n        });\n        _this.GroupGraphPattern = _this.RULE('GroupGraphPattern', function () {\n            log('GroupGraphPattern');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.SubSelect); } },\n                { ALT: function () { return _this.SUBRULE(_this.GroupGraphPatternSub); } },\n            ]);\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.GroupGraphPatternSub = _this.RULE('GroupGraphPatternSub', function () {\n            log('GroupGraphPatternSub');\n            _this.OPTION(function () { return _this.SUBRULE(_this.TriplesBlock); });\n            _this.MANY(function () {\n                _this.SUBRULE(_this.GraphPatternNotTriples);\n                _this.OPTION1(function () { return _this.CONSUME(sparqlTokenMap.Period); });\n                _this.OPTION2(function () { return _this.SUBRULE1(_this.TriplesBlock); });\n            });\n        });\n        _this.TriplesBlock = _this.RULE('TriplesBlock', function () {\n            log('TriplesBlock');\n            _this.SUBRULE(_this.TriplesSameSubjectPath);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Period);\n                _this.OPTION1(function () { return _this.SUBRULE(_this.TriplesBlock); });\n            });\n        });\n        _this.GraphPatternNotTriples = _this.RULE('GraphPatternNotTriples', function () {\n            log('GraphPatternNotTriples');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.GroupOrUnionGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.OptionalGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.MinusGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.GraphGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.ServiceGraphPattern); } },\n                { ALT: function () { return _this.SUBRULE(_this.Filter); } },\n                { ALT: function () { return _this.SUBRULE(_this.Bind); } },\n                { ALT: function () { return _this.SUBRULE(_this.InlineData); } },\n            ]);\n        });\n        _this.OptionalGraphPattern = _this.RULE('OptionalGraphPattern', function () {\n            log('OptionalGraphPattern');\n            _this.CONSUME(sparqlTokenMap.OPTIONAL);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.GraphGraphPattern = _this.RULE('GraphGraphPattern', function () {\n            log('GraphGraphPattern');\n            _this.CONSUME(sparqlTokenMap.GRAPH);\n            _this.SUBRULE(_this.VarOrIri);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.ServiceGraphPattern = _this.RULE('ServiceGraphPattern', function () {\n            log('ServiceGraphPattern');\n            _this.CONSUME(sparqlTokenMap.SERVICE);\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.SILENT); });\n            _this.SUBRULE(_this.VarOrIri);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.Bind = _this.RULE('Bind', function () {\n            log('Bind');\n            _this.CONSUME(sparqlTokenMap.BIND);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.AS);\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.InlineData = _this.RULE('InlineData', function () {\n            log('InlineData');\n            _this.CONSUME(sparqlTokenMap.VALUES);\n            _this.SUBRULE(_this.DataBlock);\n        });\n        _this.DataBlock = _this.RULE('DataBlock', function () {\n            log('DataBlock');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.InlineDataOneVar); } },\n                { ALT: function () { return _this.SUBRULE(_this.InlineDataFull); } },\n            ]);\n        });\n        _this.InlineDataOneVar = _this.RULE('InlineDataOneVar', function () {\n            log('InlineDataOneVar');\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.MANY(function () { return _this.SUBRULE(_this.DataBlockValue); });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.InlineDataFull = _this.RULE('InlineDataFull', function () {\n            log('InlineDataFull');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.MANY(function () { return _this.SUBRULE(_this.Var); });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.MANY1(function () {\n                return _this.OR1([\n                    {\n                        ALT: function () {\n                            _this.CONSUME1(sparqlTokenMap.LParen);\n                            _this.MANY2(function () { return _this.SUBRULE(_this.DataBlockValue); });\n                            _this.CONSUME1(sparqlTokenMap.RParen);\n                        },\n                    },\n                    { ALT: function () { return _this.CONSUME1(sparqlTokenMap.NIL); } },\n                ]);\n            });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.DataBlockValue = _this.RULE('DataBlockValue', function () {\n            log('DataBlockValue');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.UNDEF); } },\n            ]);\n        });\n        _this.MinusGraphPattern = _this.RULE('MinusGraphPattern', function () {\n            log('MinusGraphPattern');\n            _this.CONSUME(sparqlTokenMap.MINUS);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.GroupOrUnionGraphPattern = _this.RULE('GroupOrUnionGraphPattern', function () {\n            log('GroupOrUnionGraphPattern');\n            _this.SUBRULE(_this.GroupGraphPattern);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.UNION);\n                _this.SUBRULE1(_this.GroupGraphPattern);\n            });\n        });\n        _this.Filter = _this.RULE('Filter', function () {\n            log('Filter');\n            _this.CONSUME(sparqlTokenMap.FILTER);\n            _this.SUBRULE(_this.Constraint);\n        });\n        _this.Constraint = _this.RULE('Constraint', function () {\n            log('Constraint');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.BrackettedExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall); } },\n                { ALT: function () { return _this.SUBRULE(_this.FunctionCall); } },\n            ]);\n        });\n        _this.FunctionCall = _this.RULE('FunctionCall', function () {\n            log('FunctionCall');\n            _this.SUBRULE(_this.iri);\n            _this.SUBRULE(_this.ArgList);\n        });\n        _this.ArgList = _this.RULE('ArgList', function () {\n            log('ArgList');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.DISTINCT); });\n                        _this.SUBRULE(_this.Expression);\n                        _this.MANY(function () {\n                            _this.CONSUME(sparqlTokenMap.Comma);\n                            _this.SUBRULE1(_this.Expression);\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.ExpressionList = _this.RULE('ExpressionList', function () {\n            log('ExpressionList');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Expression);\n                        _this.MANY(function () {\n                            _this.CONSUME(sparqlTokenMap.Comma);\n                            _this.SUBRULE1(_this.Expression);\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.ConstructTemplate = _this.RULE('ConstructTemplate', function () {\n            log('ConstructTemplate');\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.OPTION(function () { return _this.SUBRULE(_this.ConstructTriples); });\n            _this.CONSUME(sparqlTokenMap.RCurly);\n        });\n        _this.ConstructTriples = _this.RULE('ConstructTriples', function () {\n            log('ConstructTriples');\n            _this.SUBRULE(_this.TriplesSameSubject);\n            _this.OPTION(function () {\n                _this.CONSUME(sparqlTokenMap.Period);\n                _this.OPTION1(function () { return _this.SUBRULE(_this.ConstructTriples); });\n            });\n        });\n        _this.TriplesSameSubject = _this.RULE('TriplesSameSubject', function () {\n            log('TriplesSameSubject');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.VarOrTerm);\n                        _this.SUBRULE(_this.PropertyListNotEmpty);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.TriplesNode);\n                        _this.SUBRULE(_this.PropertyList);\n                    },\n                },\n            ]);\n        });\n        _this.PropertyList = _this.RULE('PropertyList', function () {\n            log('PropertyList');\n            _this.OPTION(function () { return _this.SUBRULE(_this.PropertyListNotEmpty); });\n        });\n        _this.PropertyListNotEmpty = _this.RULE('PropertyListNotEmpty', function () {\n            log('PropertyListNotEmpty');\n            _this.SUBRULE(_this.Verb);\n            _this.SUBRULE(_this.ObjectList);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.SUBRULE1(_this.Verb);\n                    _this.SUBRULE1(_this.ObjectList);\n                });\n            });\n        });\n        _this.Verb = _this.RULE('Verb', function () {\n            log('Verb');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VarOrIri); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.A); } },\n            ]);\n        });\n        _this.ObjectList = _this.RULE('ObjectList', function () {\n            log('ObjectList');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.Comma,\n                DEF: function () { return _this.SUBRULE(_this.Object); },\n            });\n        });\n        _this.Object = _this.RULE('Object', function () {\n            log('Object');\n            _this.SUBRULE(_this.GraphNode);\n        });\n        _this.TriplesSameSubjectPath = _this.RULE('TriplesSameSubjectPath', function () {\n            log('TriplesSameSubjectPath');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.VarOrTerm);\n                        _this.SUBRULE(_this.PropertyListPathNotEmpty);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.TriplesNodePath);\n                        _this.SUBRULE(_this.PropertyListPath);\n                    },\n                },\n            ]);\n        });\n        _this.PropertyListPath = _this.RULE('PropertyListPath', function () {\n            log('PropertyListPath');\n            _this.OPTION(function () { return _this.SUBRULE(_this.PropertyListPathNotEmpty); });\n        });\n        _this.PropertyListPathNotEmpty = _this.RULE('PropertyListPathNotEmpty', function () {\n            log('PropertyListPathNotEmpty');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VerbPath); } },\n                { ALT: function () { return _this.SUBRULE(_this.VerbSimple); } },\n            ]);\n            _this.SUBRULE(_this.ObjectListPath);\n            _this.MANY(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.OR1([\n                        { ALT: function () { return _this.SUBRULE1(_this.VerbPath); } },\n                        { ALT: function () { return _this.SUBRULE1(_this.VerbSimple); } },\n                    ]);\n                    _this.SUBRULE1(_this.ObjectListPath);\n                });\n            });\n        });\n        _this.VerbPath = _this.RULE('VerbPath', function () {\n            log('VerbPath');\n            _this.SUBRULE(_this.Path);\n        });\n        _this.VerbSimple = _this.RULE('VerbSimple', function () {\n            log('VerbSimple');\n            _this.SUBRULE(_this.Var);\n        });\n        _this.ObjectListPath = _this.RULE('ObjectListPath', function () {\n            log('ObjectListPath');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.Comma,\n                DEF: function () { return _this.SUBRULE(_this.ObjectPath); },\n            });\n        });\n        _this.ObjectPath = _this.RULE('ObjectPath', function () {\n            log('ObjectPath');\n            _this.SUBRULE(_this.GraphNodePath);\n        });\n        _this.Path = _this.RULE('Path', function () {\n            log('Path');\n            _this.SUBRULE(_this.PathAlternative);\n        });\n        _this.PathAlternative = _this.RULE('PathAlternative', function () {\n            log('PathAlternative');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.Pipe,\n                DEF: function () { return _this.SUBRULE(_this.PathSequence); },\n            });\n        });\n        _this.PathSequence = _this.RULE('PathSequence', function () {\n            log('PathSequence');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.ForwardSlash,\n                DEF: function () { return _this.SUBRULE(_this.PathEltOrInverse); },\n            });\n        });\n        _this.PathElt = _this.RULE('PathElt', function () {\n            log('PathElt');\n            _this.SUBRULE(_this.PathPrimary);\n            _this.OPTION(function () { return _this.SUBRULE(_this.PathMod); });\n        });\n        _this.PathEltOrInverse = _this.RULE('PathEltOrInverse', function () {\n            log('PathEltOrInverse');\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.Caret); });\n            _this.SUBRULE(_this.PathElt);\n        });\n        _this.PathMod = _this.RULE('PathMod', function () {\n            log('PathMod');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.QuestionMark); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Plus); } },\n            ]);\n        });\n        _this.PathPrimary = _this.RULE('PathPrimary', function () {\n            log('PathPrimary');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.A); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Bang);\n                        _this.SUBRULE(_this.PathNegatedPropertySet);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Path);\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.PathNegatedPropertySet = _this.RULE('PathNegatedPropertySet', function () {\n            log('PathNegatedPropertySet');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.PathOneInPropertySet); } },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.MANY_SEP({\n                            SEP: sparqlTokenMap.Pipe,\n                            DEF: function () { return _this.SUBRULE1(_this.PathOneInPropertySet); },\n                        });\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n            ]);\n        });\n        _this.PathOneInPropertySet = _this.RULE('PathOneInPropertySet', function () {\n            log('PathOneInPropertySet');\n            _this.OPTION(function () { return _this.CONSUME(sparqlTokenMap.Caret); });\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.A); } },\n            ]);\n        });\n        _this.Integer = _this.RULE('Integer', function () {\n            log('Integer');\n            _this.CONSUME(sparqlTokenMap.INTEGER);\n        });\n        _this.TriplesNode = _this.RULE('TriplesNode', function () {\n            log('TriplesNode');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Collection); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNodePropertyList); } },\n            ]);\n        });\n        _this.BlankNodePropertyList = _this.RULE('BlankNodePropertyList', function () {\n            log('BlankNodePropertyList');\n            _this.CONSUME(sparqlTokenMap.LBracket);\n            _this.SUBRULE(_this.PropertyListNotEmpty);\n            _this.CONSUME(sparqlTokenMap.RBracket);\n        });\n        _this.TriplesNodePath = _this.RULE('TriplesNodePath', function () {\n            log('TriplesNodePath');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.CollectionPath); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNodePropertyListPath); } },\n            ]);\n        });\n        _this.BlankNodePropertyListPath = _this.RULE('BlankNodePropertyListPath', function () {\n            log('BlankNodePropertyListPath');\n            _this.CONSUME(sparqlTokenMap.LBracket);\n            _this.SUBRULE(_this.PropertyListPathNotEmpty);\n            _this.CONSUME(sparqlTokenMap.RBracket);\n        });\n        _this.Collection = _this.RULE('Collection', function () {\n            log('Collection');\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.GraphNode); });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.CollectionPath = _this.RULE('CollectionPath', function () {\n            log('CollectionPath');\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.AT_LEAST_ONE(function () { return _this.SUBRULE(_this.GraphNodePath); });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.GraphNode = _this.RULE('GraphNode', function () {\n            log('GraphNode');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VarOrTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.TriplesNode); } },\n            ]);\n        });\n        _this.GraphNodePath = _this.RULE('GraphNodePath', function () {\n            log('GraphNodePath');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.VarOrTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.TriplesNodePath); } },\n            ]);\n        });\n        _this.VarOrTerm = _this.RULE('VarOrTerm', function () {\n            log('VarOrTerm');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.GraphTerm); } },\n            ]);\n        });\n        _this.VarOrIri = _this.RULE('VarOrIri', function () {\n            log('VarOrIri');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n            ]);\n        });\n        _this.Var = _this.RULE('Var', function () {\n            log('Var');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.VAR1); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.VAR2); } },\n            ]);\n        });\n        _this.GraphTerm = _this.RULE('GraphTerm', function () {\n            log('GraphTerm');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n            ]);\n        });\n        _this.Expression = _this.RULE('Expression', function () {\n            log('Expression');\n            _this.SUBRULE(_this.ConditionalOrExpression);\n        });\n        _this.ConditionalOrExpression = _this.RULE('ConditionalOrExpression', function () {\n            log('ConditionalOrExpression');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.LogicalOr,\n                DEF: function () { return _this.SUBRULE(_this.ConditionalAndExpression); },\n            });\n        });\n        _this.ConditionalAndExpression = _this.RULE('ConditionalAndExpression', function () {\n            log('ConditionalAndExpression');\n            _this.AT_LEAST_ONE_SEP({\n                SEP: sparqlTokenMap.LogicalAnd,\n                DEF: function () { return _this.SUBRULE(_this.ValueLogical); },\n            });\n        });\n        _this.ValueLogical = _this.RULE('ValueLogical', function () {\n            log('ValueLogical');\n            _this.SUBRULE(_this.RelationalExpression);\n        });\n        _this.RelationalExpression = _this.RULE('RelationalExpression', function () {\n            log('RelationalExpression');\n            _this.SUBRULE(_this.NumericExpression);\n            _this.OPTION(function () {\n                return _this.OR([\n                    {\n                        ALT: function () {\n                            _this.OR1([\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Equals); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NotEquals); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.LessThan); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.GreaterThan); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.LessThanEquals); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.GreaterThanEquals); } },\n                            ]);\n                            _this.SUBRULE1(_this.NumericExpression);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.IN);\n                            _this.SUBRULE(_this.ExpressionList);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.NOT_IN);\n                            _this.SUBRULE1(_this.ExpressionList);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.NumericExpression = _this.RULE('NumericExpression', function () {\n            log('NumericExpression');\n            _this.SUBRULE(_this.AdditiveExpression);\n        });\n        _this.AdditiveExpression = _this.RULE('AdditiveExpression', function () {\n            log('AdditiveExpression');\n            _this.SUBRULE(_this.MultiplicativeExpression);\n            _this.MANY(function () {\n                return _this.OR([\n                    {\n                        ALT: function () {\n                            _this.OR1([\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Plus); } },\n                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Minus); } },\n                            ]);\n                            _this.SUBRULE1(_this.MultiplicativeExpression);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.OR2([\n                                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralPositive); } },\n                                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralNegative); } },\n                            ]);\n                            _this.MANY1(function () {\n                                return _this.OR3([\n                                    {\n                                        ALT: function () {\n                                            _this.OR4([\n                                                { ALT: function () { return _this.CONSUME(sparqlTokenMap.Star); } },\n                                                {\n                                                    ALT: function () { return _this.CONSUME(sparqlTokenMap.ForwardSlash); },\n                                                },\n                                            ]);\n                                            _this.SUBRULE1(_this.UnaryExpression);\n                                        },\n                                    },\n                                ]);\n                            });\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.MultiplicativeExpression = _this.RULE('MultiplicativeExpression', function () {\n            log('MultiplicativeExpression');\n            _this.SUBRULE(_this.UnaryExpression);\n            _this.MANY(function () {\n                return _this.OR([\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.Star);\n                            _this.SUBRULE1(_this.UnaryExpression);\n                        },\n                    },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.ForwardSlash);\n                            _this.SUBRULE2(_this.UnaryExpression);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.UnaryExpression = _this.RULE('UnaryExpression', function () {\n            log('UnaryExpression');\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Bang);\n                        _this.SUBRULE(_this.PrimaryExpression);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Plus);\n                        _this.SUBRULE1(_this.PrimaryExpression);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.Minus);\n                        _this.SUBRULE2(_this.PrimaryExpression);\n                    },\n                },\n                { ALT: function () { return _this.SUBRULE3(_this.PrimaryExpression); } },\n            ]);\n        });\n        _this.PrimaryExpression = _this.RULE('PrimaryExpression', function () {\n            log('PrimaryExpression');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.BrackettedExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall); } },\n                { ALT: function () { return _this.SUBRULE(_this.iriOrFunction); } },\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.Var); } },\n            ]);\n        });\n        _this.BrackettedExpression = _this.RULE('BrackettedExpression', function () {\n            log('BrackettedExpression');\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STR = _this.RULE('BuiltInCall_STR', function () {\n            log('BuiltInCall_STR');\n            _this.CONSUME(sparqlTokenMap.STR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_LANG = _this.RULE('BuiltInCall_LANG', function () {\n            log('BuiltInCall_LANG');\n            _this.CONSUME(sparqlTokenMap.LANG);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_LANGMATCHES = _this.RULE('BuiltInCall_LANGMATCHES', function () {\n            log('BuiltInCall_LANGMATCHES');\n            _this.CONSUME(sparqlTokenMap.LANGMATCHES);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_DATATYPE = _this.RULE('BuiltInCall_DATATYPE', function () {\n            log('BuiltInCall_DATATYPE');\n            _this.CONSUME(sparqlTokenMap.DATATYPE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_BOUND = _this.RULE('BuiltInCall_BOUND', function () {\n            log('BuiltInCall_BOUND');\n            _this.CONSUME(sparqlTokenMap.BOUND);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Var);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_IRI = _this.RULE('BuiltInCall_IRI', function () {\n            log('BuiltInCall_IRI');\n            _this.CONSUME(sparqlTokenMap.IRI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_URI = _this.RULE('BuiltInCall_URI', function () {\n            log('BuiltInCall_URI');\n            _this.CONSUME(sparqlTokenMap.URI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_BNODE = _this.RULE('BuiltInCall_BNODE', function () {\n            log('BuiltInCall_BNODE');\n            _this.CONSUME(sparqlTokenMap.BNODE);\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.CONSUME(sparqlTokenMap.LParen);\n                        _this.SUBRULE(_this.Expression);\n                        _this.CONSUME(sparqlTokenMap.RParen);\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.NIL); } },\n            ]);\n        });\n        _this.BuiltInCall_RAND = _this.RULE('BuiltInCall_RAND', function () {\n            log('BuiltInCall_RAND');\n            _this.CONSUME(sparqlTokenMap.RAND);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_ABS = _this.RULE('BuiltInCall_ABS', function () {\n            log('BuiltInCall_ABS');\n            _this.CONSUME(sparqlTokenMap.ABS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_CEIL = _this.RULE('BuiltInCall_CEIL', function () {\n            log('BuiltInCall_CEIL');\n            _this.CONSUME(sparqlTokenMap.CEIL);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_FLOOR = _this.RULE('BuiltInCall_FLOOR', function () {\n            log('BuiltInCall_FLOOR');\n            _this.CONSUME(sparqlTokenMap.FLOOR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_ROUND = _this.RULE('BuiltInCall_ROUND', function () {\n            log('BuiltInCall_ROUND');\n            _this.CONSUME(sparqlTokenMap.ROUND);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_CONCAT = _this.RULE('BuiltInCall_CONCAT', function () {\n            log('BuiltInCall_CONCAT');\n            _this.CONSUME(sparqlTokenMap.CONCAT);\n            _this.SUBRULE(_this.ExpressionList);\n        });\n        _this.BuiltInCall_STRLEN = _this.RULE('BuiltInCall_STRLEN', function () {\n            log('BuiltInCall_STRLEN');\n            _this.CONSUME(sparqlTokenMap.STRLEN);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_UCASE = _this.RULE('BuiltInCall_UCASE', function () {\n            log('BuiltInCall_UCASE');\n            _this.CONSUME(sparqlTokenMap.UCASE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_LCASE = _this.RULE('BuiltInCall_LCASE', function () {\n            log('BuiltInCall_LCASE');\n            _this.CONSUME(sparqlTokenMap.LCASE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_ENCODE_FOR_URI = _this.RULE('BuiltInCall_ENCODE_FOR_URI', function () {\n            log('BuiltInCall_ENCODE_FOR_URI');\n            _this.CONSUME(sparqlTokenMap.ENCODE_FOR_URI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_CONTAINS = _this.RULE('BuiltInCall_CONTAINS', function () {\n            log('BuiltInCall_CONTAINS');\n            _this.CONSUME(sparqlTokenMap.CONTAINS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRSTARTS = _this.RULE('BuiltInCall_STRSTARTS', function () {\n            log('BuiltInCall_STRSTARTS');\n            _this.CONSUME(sparqlTokenMap.STRSTARTS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRENDS = _this.RULE('BuiltInCall_STRENDS', function () {\n            log('BuiltInCall_STRENDS');\n            _this.CONSUME(sparqlTokenMap.STRENDS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRBEFORE = _this.RULE('BuiltInCall_STRBEFORE', function () {\n            log('BuiltInCall_STRBEFORE');\n            _this.CONSUME(sparqlTokenMap.STRBEFORE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRAFTER = _this.RULE('BuiltInCall_STRAFTER', function () {\n            log('BuiltInCall_STRAFTER');\n            _this.CONSUME(sparqlTokenMap.STRAFTER);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_YEAR = _this.RULE('BuiltInCall_YEAR', function () {\n            log('BuiltInCall_YEAR');\n            _this.CONSUME(sparqlTokenMap.YEAR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_MONTH = _this.RULE('BuiltInCall_MONTH', function () {\n            log('BuiltInCall_MONTH');\n            _this.CONSUME(sparqlTokenMap.MONTH);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_DAY = _this.RULE('BuiltInCall_DAY', function () {\n            log('BuiltInCall_DAY');\n            _this.CONSUME(sparqlTokenMap.DAY);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_HOURS = _this.RULE('BuiltInCall_HOURS', function () {\n            log('BuiltInCall_HOURS');\n            _this.CONSUME(sparqlTokenMap.HOURS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_MINUTES = _this.RULE('BuiltInCall_MINUTES', function () {\n            log('BuiltInCall_MINUTES');\n            _this.CONSUME(sparqlTokenMap.MINUTES);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SECONDS = _this.RULE('BuiltInCall_SECONDS', function () {\n            log('BuiltInCall_SECONDS');\n            _this.CONSUME(sparqlTokenMap.SECONDS);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_TIMEZONE = _this.RULE('BuiltInCall_TIMEZONE', function () {\n            log('BuiltInCall_TIMEZONE');\n            _this.CONSUME(sparqlTokenMap.TIMEZONE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_TZ = _this.RULE('BuiltInCall_TZ', function () {\n            log('BuiltInCall_TZ');\n            _this.CONSUME(sparqlTokenMap.TZ);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_NOW = _this.RULE('BuiltInCall_NOW', function () {\n            log('BuiltInCall_NOW');\n            _this.CONSUME(sparqlTokenMap.NOW);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_UUID = _this.RULE('BuiltInCall_UUID', function () {\n            log('BuiltInCall_UUID');\n            _this.CONSUME(sparqlTokenMap.UUID);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_STRUUID = _this.RULE('BuiltInCall_STRUUID', function () {\n            log('BuiltInCall_STRUUID');\n            _this.CONSUME(sparqlTokenMap.STRUUID);\n            _this.CONSUME(sparqlTokenMap.NIL);\n        });\n        _this.BuiltInCall_MD5 = _this.RULE('BuiltInCall_MD5', function () {\n            log('BuiltInCall_MD5');\n            _this.CONSUME(sparqlTokenMap.MD5);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA1 = _this.RULE('BuiltInCall_SHA1', function () {\n            log('BuiltInCall_SHA1');\n            _this.CONSUME(sparqlTokenMap.SHA1);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA256 = _this.RULE('BuiltInCall_SHA256', function () {\n            log('BuiltInCall_SHA256');\n            _this.CONSUME(sparqlTokenMap.SHA256);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA384 = _this.RULE('BuiltInCall_SHA384', function () {\n            log('BuiltInCall_SHA384');\n            _this.CONSUME(sparqlTokenMap.SHA384);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_SHA512 = _this.RULE('BuiltInCall_SHA512', function () {\n            log('BuiltInCall_SHA512');\n            _this.CONSUME(sparqlTokenMap.SHA512);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_COALESCE = _this.RULE('BuiltInCall_COALESCE', function () {\n            log('BuiltInCall_COALESCE');\n            _this.CONSUME(sparqlTokenMap.COALESCE);\n            _this.SUBRULE(_this.ExpressionList);\n        });\n        _this.BuiltInCall_IF = _this.RULE('BuiltInCall_IF', function () {\n            log('BuiltInCall_IF');\n            _this.CONSUME(sparqlTokenMap.IF);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME1(sparqlTokenMap.Comma);\n            _this.SUBRULE2(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRLANG = _this.RULE('BuiltInCall_STRLANG', function () {\n            log('BuiltInCall_STRLANG');\n            _this.CONSUME(sparqlTokenMap.STRLANG);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_STRDT = _this.RULE('BuiltInCall_STRDT', function () {\n            log('BuiltInCall_STRDT');\n            _this.CONSUME(sparqlTokenMap.STRDT);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_sameTerm = _this.RULE('BuiltInCall_sameTerm', function () {\n            log('BuiltInCall_sameTerm');\n            _this.CONSUME(sparqlTokenMap.sameTerm);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isIRI = _this.RULE('BuiltInCall_isIRI', function () {\n            log('BuiltInCall_isIRI');\n            _this.CONSUME(sparqlTokenMap.isIRI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isURI = _this.RULE('BuiltInCall_isURI', function () {\n            log('BuiltInCall_isURI');\n            _this.CONSUME(sparqlTokenMap.isURI);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isBLANK = _this.RULE('BuiltInCall_isBLANK', function () {\n            log('BuiltInCall_isBLANK');\n            _this.CONSUME(sparqlTokenMap.isBLANK);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isLITERAL = _this.RULE('BuiltInCall_isLITERAL', function () {\n            log('BuiltInCall_isLITERAL');\n            _this.CONSUME(sparqlTokenMap.isLITERAL);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall_isNUMERIC = _this.RULE('BuiltInCall_isNUMERIC', function () {\n            log('BuiltInCall_isNUMERIC');\n            _this.CONSUME(sparqlTokenMap.isNUMERIC);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.BuiltInCall = _this.RULE('BuiltInCall', function () {\n            log('BuiltInCall');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Aggregate); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LANG); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LANGMATCHES); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_DATATYPE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_BOUND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_IRI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_URI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_BNODE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_RAND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ABS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CEIL); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_FLOOR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ROUND); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CONCAT); } },\n                { ALT: function () { return _this.SUBRULE(_this.SubstringExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRLEN); } },\n                { ALT: function () { return _this.SUBRULE(_this.StrReplaceExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_UCASE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_LCASE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_ENCODE_FOR_URI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_CONTAINS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRSTARTS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRENDS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRBEFORE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRAFTER); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_YEAR); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MONTH); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_DAY); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_HOURS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MINUTES); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SECONDS); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_TIMEZONE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_TZ); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_NOW); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_UUID); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRUUID); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_MD5); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA1); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA256); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA384); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_SHA512); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_COALESCE); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_IF); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRLANG); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_STRDT); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_sameTerm); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isIRI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isURI); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isBLANK); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isLITERAL); } },\n                { ALT: function () { return _this.SUBRULE(_this.BuiltInCall_isNUMERIC); } },\n                { ALT: function () { return _this.SUBRULE(_this.RegexExpression); } },\n                { ALT: function () { return _this.SUBRULE(_this.ExistsFunction); } },\n                { ALT: function () { return _this.SUBRULE(_this.NotExistsFunction); } },\n            ]);\n        });\n        _this.RegexExpression = _this.RULE('RegexExpression', function () {\n            log('RegexExpression');\n            _this.CONSUME(sparqlTokenMap.REGEX);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.OPTION(function () {\n                _this.CONSUME1(sparqlTokenMap.Comma);\n                _this.SUBRULE2(_this.Expression);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.SubstringExpression = _this.RULE('SubstringExpression', function () {\n            log('SubstringExpression');\n            _this.CONSUME(sparqlTokenMap.SUBSTR);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.OPTION(function () {\n                _this.CONSUME1(sparqlTokenMap.Comma);\n                _this.SUBRULE2(_this.Expression);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.StrReplaceExpression = _this.RULE('StrReplaceExpression', function () {\n            log('StrReplaceExpression');\n            _this.CONSUME(sparqlTokenMap.REPLACE);\n            _this.CONSUME(sparqlTokenMap.LParen);\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.Comma);\n            _this.SUBRULE1(_this.Expression);\n            _this.CONSUME1(sparqlTokenMap.Comma);\n            _this.SUBRULE2(_this.Expression);\n            _this.OPTION(function () {\n                _this.CONSUME2(sparqlTokenMap.Comma);\n                _this.SUBRULE3(_this.Expression);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.ExistsFunction = _this.RULE('ExistsFunction', function () {\n            log('ExistsFunction');\n            _this.CONSUME(sparqlTokenMap.EXISTS);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.NotExistsFunction = _this.RULE('NotExistsFunction', function () {\n            log('NotExistsFunction');\n            _this.CONSUME(sparqlTokenMap.NOT_EXISTS);\n            _this.SUBRULE(_this.GroupGraphPattern);\n        });\n        _this.Count = _this.RULE('Count', function () {\n            log('Count');\n            _this.CONSUME(sparqlTokenMap.COUNT);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.OR([\n                { ALT: function () { return _this.CONSUME3(sparqlTokenMap.Star); } },\n                { ALT: function () { return _this.SUBRULE(_this.Expression); } },\n            ]);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Sum = _this.RULE('Sum', function () {\n            log('Sum');\n            _this.CONSUME(sparqlTokenMap.SUM);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Min = _this.RULE('Min', function () {\n            log('Min');\n            _this.CONSUME(sparqlTokenMap.MIN);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Max = _this.RULE('Max', function () {\n            log('Max');\n            _this.CONSUME(sparqlTokenMap.MAX);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Avg = _this.RULE('Avg', function () {\n            log('Avg');\n            _this.CONSUME(sparqlTokenMap.AVG);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Sample = _this.RULE('Sample', function () {\n            log('Sample');\n            _this.CONSUME(sparqlTokenMap.SAMPLE);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.GroupConcat = _this.RULE('GroupConcat', function () {\n            log('GroupConcat');\n            _this.CONSUME(sparqlTokenMap.GROUP_CONCAT);\n            _this.CONSUME1(sparqlTokenMap.LParen);\n            _this.OPTION(function () { return _this.CONSUME2(sparqlTokenMap.DISTINCT); });\n            _this.SUBRULE(_this.Expression);\n            _this.OPTION1(function () {\n                _this.CONSUME(sparqlTokenMap.Semicolon);\n                _this.CONSUME(sparqlTokenMap.SEPARATOR);\n                _this.CONSUME(sparqlTokenMap.Equals);\n                _this.SUBRULE(_this.String);\n            });\n            _this.CONSUME(sparqlTokenMap.RParen);\n        });\n        _this.Aggregate = _this.RULE('Aggregate', function () {\n            log('Aggregate');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.Count); } },\n                { ALT: function () { return _this.SUBRULE(_this.Sum); } },\n                { ALT: function () { return _this.SUBRULE(_this.Min); } },\n                { ALT: function () { return _this.SUBRULE(_this.Max); } },\n                { ALT: function () { return _this.SUBRULE(_this.Avg); } },\n                { ALT: function () { return _this.SUBRULE(_this.Sample); } },\n                { ALT: function () { return _this.SUBRULE(_this.GroupConcat); } },\n            ]);\n        });\n        _this.iriOrFunction = _this.RULE('iriOrFunction', function () {\n            log('iriOrFunction');\n            _this.SUBRULE(_this.iri);\n            _this.OPTION(function () { return _this.SUBRULE(_this.ArgList); });\n        });\n        _this.RDFLiteral = _this.RULE('RDFLiteral', function () {\n            log('RDFLiteral');\n            _this.SUBRULE(_this.String);\n            _this.OPTION(function () {\n                return _this.OR([\n                    { ALT: function () { return _this.CONSUME(sparqlTokenMap.LANGTAG); } },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(sparqlTokenMap.DoubleCaret);\n                            _this.SUBRULE(_this.iri);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.NumericLiteral = _this.RULE('NumericLiteral', function () {\n            log('NumericLiteral');\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralUnsigned); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralPositive); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteralNegative); } },\n            ]);\n        });\n        _this.NumericLiteralUnsigned = _this.RULE('NumericLiteralUnsigned', function () {\n            log('NumericLiteralUnsigned');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.INTEGER); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DECIMAL); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DOUBLE); } },\n            ]);\n        });\n        _this.NumericLiteralPositive = _this.RULE('NumericLiteralPositive', function () {\n            log('NumericLiteralPositive');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.INTEGER_POSITIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DECIMAL_POSITIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DOUBLE_POSITIVE); } },\n            ]);\n        });\n        _this.NumericLiteralNegative = _this.RULE('NumericLiteralNegative', function () {\n            log('NumericLiteralNegative');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.INTEGER_NEGATIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DECIMAL_NEGATIVE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.DOUBLE_NEGATIVE); } },\n            ]);\n        });\n        _this.BooleanLiteral = _this.RULE('BooleanLiteral', function () {\n            log('BooleanLiteral');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.TRUE); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.FALSE); } },\n            ]);\n        });\n        _this.String = _this.RULE('String', function () {\n            log('String');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL1); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL2); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL_LONG1); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.STRING_LITERAL_LONG2); } },\n            ]);\n        });\n        _this.iri = _this.RULE('iri', function () {\n            log('iri');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.IRIREF); } },\n                { ALT: function () { return _this.SUBRULE(_this.PrefixedName); } },\n            ]);\n        });\n        _this.PrefixedName = _this.RULE('PrefixedName', function () {\n            log('PrefixedName');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PNAME_LN); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.PNAME_NS); } },\n            ]);\n        });\n        _this.BlankNode = _this.RULE('BlankNode', function () {\n            log('BlankNode');\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.BLANK_NODE_LABEL); } },\n                { ALT: function () { return _this.CONSUME(sparqlTokenMap.ANON); } },\n            ]);\n        });\n        _this.lexer = new Lexer(tokenVocab);\n        return _this;\n    }\n    return BaseSparqlParser;\n}(Parser));\nexport { BaseSparqlParser };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a = require('./tokens'), turtleTokenTypes = _a.turtleTokenTypes, turtleTokenMap = _a.turtleTokenMap;\nimport { Parser, Lexer, } from 'chevrotain';\nvar TurtleParser = /** @class */ (function (_super) {\n    __extends(TurtleParser, _super);\n    function TurtleParser(config, tokens, lexerDefinition, performSelfAnalysis) {\n        if (tokens === void 0) { tokens = turtleTokenTypes; }\n        if (lexerDefinition === void 0) { lexerDefinition = tokens; }\n        if (performSelfAnalysis === void 0) { performSelfAnalysis = true; }\n        var _this = _super.call(this, tokens, __assign({ outputCst: true, recoveryEnabled: true }, config)) || this;\n        // Parsing Turtle requires that the parser keep a map of namespaces in state.\n        // Empty prefixes, for example, are allowed only if the empty prefix has been\n        // added to the namespaces map (for now, that's all this tracks). (TODO: We\n        // might want to use a visitor for this, but I'm doing it quick-and-dirty for\n        // now.)\n        // See here: https://www.w3.org/TR/turtle/#handle-PNAME_LN\n        _this.namespacesMap = {};\n        _this.semanticErrors = [];\n        // Clears the state that we have to manage on our own for each parse (see\n        // above for details).\n        _this.resetManagedState = function () {\n            _this.namespacesMap = {};\n            _this.semanticErrors = [];\n        };\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        _this.parse = function (document) {\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = _this.turtleDoc();\n            // Next two items are copied so that they can be returned/held after parse\n            // state is cleared.\n            var errors = _this.errors.slice();\n            var semanticErrors = _this.semanticErrors.slice();\n            _this.resetManagedState();\n            return {\n                errors: errors,\n                semanticErrors: semanticErrors,\n                cst: cst,\n            };\n        };\n        _this.turtleDoc = _this.RULE('turtleDoc', function () {\n            _this.MANY(function () { return _this.SUBRULE(_this.statement); });\n        });\n        _this.statement = _this.RULE('statement', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.directive); } },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.triples);\n                        _this.CONSUME(turtleTokenMap.Period);\n                    },\n                },\n            ]);\n        });\n        _this.directive = _this.RULE('directive', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.prefixID); } },\n                { ALT: function () { return _this.SUBRULE(_this.base); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlPrefix); } },\n                { ALT: function () { return _this.SUBRULE(_this.sparqlBase); } },\n            ]);\n        });\n        _this.prefixID = _this.RULE('prefixID', function () {\n            _this.CONSUME(turtleTokenMap.TTL_PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.base = _this.RULE('base', function () {\n            _this.CONSUME(turtleTokenMap.TTL_BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n            _this.CONSUME(turtleTokenMap.Period);\n        });\n        _this.sparqlBase = _this.RULE('sparqlBase', function () {\n            _this.CONSUME(turtleTokenMap.BASE);\n            _this.CONSUME(turtleTokenMap.IRIREF);\n        });\n        _this.sparqlPrefix = _this.RULE('sparqlPrefix', function () {\n            _this.CONSUME(turtleTokenMap.PREFIX);\n            var pnameNsToken = _this.CONSUME(turtleTokenMap.PNAME_NS);\n            var iriToken = _this.CONSUME(turtleTokenMap.IRIREF);\n            var pnameImageWithoutColon = pnameNsToken.image.slice(0, -1);\n            var iriImage = iriToken.image;\n            _this.namespacesMap[pnameImageWithoutColon] = iriImage;\n        });\n        _this.triples = _this.RULE('triples', function () {\n            _this.OR([\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.subject);\n                        _this.SUBRULE(_this.predicateObjectList);\n                    },\n                },\n                {\n                    ALT: function () {\n                        _this.SUBRULE(_this.blankNodePropertyList);\n                        _this.OPTION(function () { return _this.SUBRULE1(_this.predicateObjectList); });\n                    },\n                },\n            ]);\n        });\n        _this.predicateObjectList = _this.RULE('predicateObjectList', function () {\n            _this.SUBRULE(_this.verb);\n            _this.SUBRULE(_this.objectList);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Semicolon);\n                _this.OPTION(function () {\n                    _this.SUBRULE1(_this.verb);\n                    _this.SUBRULE1(_this.objectList);\n                });\n            });\n        });\n        _this.subject = _this.RULE('subject', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n            ]);\n        });\n        _this.predicate = _this.RULE('predicate', function () {\n            _this.SUBRULE(_this.iri);\n        });\n        _this.objectList = _this.RULE('objectList', function () {\n            _this.SUBRULE(_this.object);\n            _this.MANY(function () {\n                _this.CONSUME(turtleTokenMap.Comma);\n                _this.SUBRULE1(_this.object);\n            });\n        });\n        _this.verb = _this.RULE('verb', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.predicate); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.A); } },\n            ]);\n        });\n        _this.literal = _this.RULE('literal', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.RDFLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.NumericLiteral); } },\n                { ALT: function () { return _this.SUBRULE(_this.BooleanLiteral); } },\n            ]);\n        });\n        _this.blankNodePropertyList = _this.RULE('blankNodePropertyList', function () {\n            _this.CONSUME(turtleTokenMap.LBracket);\n            _this.SUBRULE(_this.predicateObjectList);\n            _this.CONSUME(turtleTokenMap.RBracket);\n        });\n        _this.object = _this.RULE('object', function () {\n            _this.OR([\n                { ALT: function () { return _this.SUBRULE(_this.iri); } },\n                { ALT: function () { return _this.SUBRULE(_this.BlankNode); } },\n                { ALT: function () { return _this.SUBRULE(_this.collection); } },\n                { ALT: function () { return _this.SUBRULE(_this.blankNodePropertyList); } },\n                { ALT: function () { return _this.SUBRULE(_this.literal); } },\n            ]);\n        });\n        _this.collection = _this.RULE('collection', function () {\n            _this.CONSUME(turtleTokenMap.LParen);\n            _this.MANY(function () { return _this.SUBRULE(_this.object); });\n            _this.CONSUME(turtleTokenMap.RParen);\n        });\n        _this.NumericLiteral = _this.RULE('NumericLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.INTEGER); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DECIMAL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.DOUBLE); } },\n            ]);\n        });\n        _this.RDFLiteral = _this.RULE('RDFLiteral', function () {\n            _this.SUBRULE(_this.String);\n            _this.OPTION(function () {\n                _this.OR([\n                    { ALT: function () { return _this.CONSUME(turtleTokenMap.LANGTAG); } },\n                    {\n                        ALT: function () {\n                            _this.CONSUME(turtleTokenMap.DoubleCaret);\n                            _this.SUBRULE(_this.iri);\n                        },\n                    },\n                ]);\n            });\n        });\n        _this.BooleanLiteral = _this.RULE('BooleanLiteral', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.TRUE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.FALSE); } },\n            ]);\n        });\n        _this.String = _this.RULE('String', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_QUOTE); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE); } },\n                {\n                    ALT: function () {\n                        return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE);\n                    },\n                },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.STRING_LITERAL_LONG_QUOTE); } },\n            ]);\n        });\n        _this.iri = _this.RULE('iri', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.IRIREF); } },\n                { ALT: function () { return _this.SUBRULE(_this.PrefixedName); } },\n            ]);\n        });\n        _this.PrefixedName = _this.RULE('PrefixedName', function () {\n            var prefixedNameToken = _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_LN); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.PNAME_NS); } },\n            ]);\n            var pnameNsImage = prefixedNameToken.image.slice(0, prefixedNameToken.image.indexOf(':'));\n            if (!(pnameNsImage in _this.namespacesMap)) {\n                _this.semanticErrors.push({\n                    name: 'NoNamespacePrefixError',\n                    message: 'A prefix was used for which there was no namespace defined.',\n                    token: prefixedNameToken,\n                    context: {\n                        ruleStack: _this.getHumanReadableRuleStack(),\n                        ruleOccurrenceStack: _this.RULE_OCCURRENCE_STACK.slice(),\n                    },\n                    resyncedTokens: [],\n                });\n            }\n        });\n        _this.BlankNode = _this.RULE('BlankNode', function () {\n            _this.OR([\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.BLANK_NODE_LABEL); } },\n                { ALT: function () { return _this.CONSUME(turtleTokenMap.ANON); } },\n            ]);\n        });\n        _this.lexer = new Lexer(lexerDefinition);\n        if (performSelfAnalysis) {\n            Parser.performSelfAnalysis(_this);\n        }\n        return _this;\n    }\n    return TurtleParser;\n}(Parser));\nexport { TurtleParser };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar baseTokens = require('./tokens').baseTokens;\nimport { BaseSparqlParser } from './BaseSparqlParser';\nimport { Parser } from 'chevrotain';\nvar W3SpecSparqlParser = /** @class */ (function (_super) {\n    __extends(W3SpecSparqlParser, _super);\n    function W3SpecSparqlParser(options) {\n        var _this = _super.call(this, options, baseTokens) || this;\n        Parser.performSelfAnalysis(_this);\n        return _this;\n    }\n    return W3SpecSparqlParser;\n}(BaseSparqlParser));\nexport { W3SpecSparqlParser };\n","var _a;\nvar turtleTokenTypes = require('../turtle/tokens').turtleTokenTypes;\nimport { createToken } from 'chevrotain';\nimport { CATCH_ALL_AT_LEAST_ONE } from 'helpers/matchers';\nimport { turtleTokenMap } from 'turtle/tokens';\nimport { sparqlTokenMap } from 'sparql/tokens';\nvar LexerMode;\n(function (LexerMode) {\n    LexerMode[\"TURTLE\"] = \"turtle\";\n    LexerMode[\"IFCLAUSE\"] = \"ifclause\";\n    LexerMode[\"THENCLAUSE\"] = \"thenclause\";\n})(LexerMode || (LexerMode = {}));\nvar Rule = createToken({\n    name: 'Rule',\n    pattern: /rule/i,\n});\nvar If = createToken({\n    name: 'If',\n    pattern: /if/i,\n    push_mode: LexerMode.IFCLAUSE,\n});\nvar Then = createToken({\n    name: 'Then',\n    pattern: /then/i,\n    push_mode: LexerMode.THENCLAUSE,\n});\nvar EndThen = createToken({\n    name: 'EndThen',\n    pattern: '}',\n    pop_mode: true,\n});\n// NOTE: Not a SPARQL GroupGraphPattern. Rather, a placeholder for one. We have\n// to let the SRS parser create this token, then replace with a token returned\n// by the SPARQL sub-parser.\nvar GroupGraphPattern = createToken({\n    name: 'GroupGraphPattern',\n    pattern: function (text, startOffset) {\n        if (startOffset === void 0) { startOffset = 0; }\n        // Capture a single brace and then anything up to its closing brace.\n        if (text[startOffset] !== '{') {\n            return null;\n        }\n        var unclosedBraceCount = 1;\n        var cursor;\n        for (cursor = startOffset + 1; cursor < text.length && unclosedBraceCount > 0; cursor++) {\n            if (text[cursor] === '{') {\n                unclosedBraceCount++;\n            }\n            else if (text[cursor] === '}') {\n                unclosedBraceCount--;\n            }\n        }\n        if (unclosedBraceCount > 0) {\n            return null;\n        }\n        return CATCH_ALL_AT_LEAST_ONE.exec(text.slice(startOffset, cursor));\n    },\n    line_breaks: true,\n    pop_mode: true,\n});\n// NOTE: Not a SPARQL TriplesBlock. Rather, a placeholder for one. We have\n// to let the SRS parser create this token, then replace with a token returned\n// by the SPARQL sub-parser.\nvar TriplesBlock = createToken({\n    name: 'TriplesBlock',\n    pattern: /[^{}]+/,\n    line_breaks: true,\n});\nvar indexOfIriRef = turtleTokenTypes.indexOf(turtleTokenMap.IRIREF);\nexport var multiModeLexerDefinition = {\n    modes: (_a = {},\n        _a[LexerMode.TURTLE] = turtleTokenTypes.slice(0, indexOfIriRef + 1).concat([\n            Rule,\n            If,\n            Then\n        ], turtleTokenTypes.slice(indexOfIriRef + 1)),\n        _a[LexerMode.IFCLAUSE] = [turtleTokenMap.WhiteSpace, GroupGraphPattern],\n        _a[LexerMode.THENCLAUSE] = [\n            turtleTokenMap.WhiteSpace,\n            sparqlTokenMap.LCurly,\n            EndThen,\n            TriplesBlock,\n        ],\n        _a),\n    defaultMode: LexerMode.TURTLE,\n};\nexport var srsTokenMap = {\n    Rule: Rule,\n    If: If,\n    Then: Then,\n    EndThen: EndThen,\n    GroupGraphPattern: GroupGraphPattern,\n    TriplesBlock: TriplesBlock,\n};\nexport var srsTokenTypes = [\n    Rule,\n    If,\n    Then,\n    EndThen,\n    sparqlTokenMap.LCurly\n].concat(turtleTokenTypes, [\n    GroupGraphPattern,\n    TriplesBlock,\n]);\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { W3SpecSparqlParser } from '../sparql/W3SpecSparqlParser';\n// Returns a custom visitor that extends the BaseVisitor for the SRS parser.\n// When the visitor encounters an SRS `IfClause` or an SRS `ThenClause`, it\n// delegates parsing of the block to the existing SPARQL parser's relevant\n// sub-rule (GroupGraphPattern or TriplesBlock).\nexport var getSparqlSrsVisitor = function (BaseVisitor) {\n    var SparqlSrsVisitor = /** @class */ (function (_super) {\n        __extends(SparqlSrsVisitor, _super);\n        function SparqlSrsVisitor() {\n            var _this = _super.call(this) || this;\n            _this.groupGraphPatterns = [];\n            _this.triplesBlocks = [];\n            // Get and store the SPARQL `GroupGraphPattern` that should replace the\n            // SRS placeholder `GroupGraphPattern` token inside of an SRS `IfClause`.\n            _this.IfClause = function (ctx, cstInputTokens) {\n                var GroupGraphPattern = ctx.GroupGraphPattern;\n                _this.$storePlaceholderTokenReplacement({\n                    tokenStore: _this.groupGraphPatterns,\n                    originalTokenContext: GroupGraphPattern,\n                    subParserRule: _this.sparqlParser.parseGroupGraphPattern.bind(_this.sparqlParser),\n                    cstInputTokens: cstInputTokens,\n                });\n            };\n            // Get and store the SPARQL `TriplesBlock` that should replace the\n            // SRS placeholder `TriplesBlock` token inside of an SRS `ThenClause`.\n            _this.ThenClause = function (ctx, cstInputTokens) {\n                var TriplesBlock = ctx.TriplesBlock;\n                _this.$storePlaceholderTokenReplacement({\n                    tokenStore: _this.triplesBlocks,\n                    originalTokenContext: TriplesBlock,\n                    subParserRule: _this.sparqlParser.parseTriplesBlock.bind(_this.sparqlParser),\n                    cstInputTokens: cstInputTokens,\n                });\n            };\n            // Utility methods ('$' prefix is necessary to prevent chevrotain's\n            // `validateVisitor` method from complaining that these are not grammar\n            // rules):\n            _this.$storePlaceholderTokenReplacement = function (_a) {\n                var tokenStore = _a.tokenStore, _b = _a.originalTokenContext, originalTokenContext = _b === void 0 ? [] : _b, subParserRule = _a.subParserRule, cstInputTokens = _a.cstInputTokens, stripWrappers = _a.stripWrappers;\n                var originalToken = originalTokenContext[0];\n                if (!originalToken || typeof originalToken.image !== 'string') {\n                    return;\n                }\n                var replacement = _this.$getPlaceholderTokenReplacement(originalToken, subParserRule, cstInputTokens, stripWrappers);\n                tokenStore.push({\n                    parseResult: replacement,\n                    originalToken: originalToken,\n                });\n            };\n            _this.$getPlaceholderTokenReplacement = function (originalToken, subParserRule, cstInputTokens, stripWrappers) {\n                if (stripWrappers === void 0) { stripWrappers = false; }\n                // Because we are replacing tokens by delegating the parsing of parts\n                // of the original document to sub-parsers, we add some empty padding to\n                // the part that is passed to the sub-parser, where the amount of padding\n                // matches the start line and offset of the token we are replacing. This\n                // ensures that all tokens have the right positions in the resulting CST\n                // (otherwise, the sub-parsers assume that the text starts at offset 0).\n                var image = originalToken.image;\n                var frontPadding = '';\n                var latestEndOffset = 0;\n                var latestEndLine = 0;\n                // Traditional `for` loop because we need to `break`.\n                for (var i = 0; i < cstInputTokens.length; i++) {\n                    var token = cstInputTokens[i];\n                    if (i > 0) {\n                        // Account for whitespace between this token and the previous one.\n                        var linesBetweenTokens = token.startLine - latestEndLine;\n                        var untokenizedSpaceBetweenTokens = token.startOffset - 1 - latestEndOffset - linesBetweenTokens;\n                        if (linesBetweenTokens > 0) {\n                            frontPadding += '\\n'.repeat(linesBetweenTokens - 1);\n                            frontPadding +=\n                                ' '.repeat(Math.max(untokenizedSpaceBetweenTokens, 0)) + '\\n';\n                        }\n                        else {\n                            frontPadding += ' '.repeat(Math.max(untokenizedSpaceBetweenTokens, 0));\n                        }\n                    }\n                    if (token === originalToken) {\n                        break;\n                    }\n                    // We haven't hit the token we're replacing yet, so we need to continue\n                    // accumulating padding by adding the newlines _inside_ the current\n                    // token, and replacing all non-newline characters inside the current\n                    // token with spaces.\n                    var newlinesInToken = token.image.split('\\n');\n                    newlinesInToken.forEach(function (line, idx) {\n                        if (idx > 0) {\n                            frontPadding += '\\n';\n                        }\n                        frontPadding += ' '.repeat(line.length);\n                    });\n                    // Track where the current token ends, in case the next token starts\n                    // much later (meaning that there was untokenized stuff (e.g.,\n                    // whitespace) in between) that needs to be accounted for.\n                    latestEndOffset = token.endOffset;\n                    latestEndLine = token.endLine;\n                }\n                // Finally, if we're stripping the wrappers (e.g., braces), replace them\n                // with whitespace.\n                var parseImage = stripWrappers ? \" \" + image.slice(1, -1) + \" \" : image;\n                return subParserRule(\"\" + frontPadding + parseImage);\n            };\n            _this.$getGroupGraphPatterns = function () { return _this.groupGraphPatterns; };\n            _this.$getTriplesBlocks = function () { return _this.triplesBlocks; };\n            _this.$resetState = function () {\n                _this.groupGraphPatterns = [];\n                _this.triplesBlocks = [];\n            };\n            _this.sparqlParser = new W3SpecSparqlParser();\n            _this.validateVisitor();\n            return _this;\n        }\n        return SparqlSrsVisitor;\n    }(BaseVisitor));\n    return new SparqlSrsVisitor();\n};\nexport function reduceVisitorItemErrors(acc, item) {\n    return acc.concat(item.parseResult.errors);\n}\n// The SRS cst contains placeholder tokens for unparsed blocks of SPARQL\n// inside of an SRS `IfClause` or `ThenClause`. This method swaps out those\n// placeholders with the actual SPARQL CST created by the SparqlSrsVisitor.\nexport function findAndSwapPlaceholders(node, parentNode, visitorItems, key) {\n    var matchingVisitorItem = visitorItems.find(function (visitorItem) { return visitorItem.originalToken === node; });\n    if (matchingVisitorItem) {\n        parentNode.children[key] = [matchingVisitorItem.parseResult.cst];\n    }\n    return matchingVisitorItem;\n}\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexport var defaultNamespacesMap = Object.freeze(['', 'rdf', 'rdfs', 'xsd', 'owl', 'stardog'].reduce(function (namespacesMap, prefix) {\n    var _a;\n    return (__assign({}, namespacesMap, (_a = {}, _a[prefix] = true, _a)));\n}, {}));\n","var _a;\nimport { isCstNode, traverse } from '../helpers/cst';\nimport { sparqlTokenMap } from '../sparql/tokens';\n// RegEx for matching any relevant children of `Expression` inside of `Bind`;\n// used to avoid false negatives in the check for disallowed literals inside of\n// `Bind`.\nvar subExpressionMatcher = /(?:[A-Z]+Expression|ValueLogical)$/i;\n// Default: just don't abort early at all. Used in the stack unwinding process\n// that creates an error rule stack.\nvar defaultEarlyAbortTest = function () { return false; };\n// Tokens that are allowed in SPARQL but not inside the `IfClause` of SRS.\nvar disallowedSparqlTokenNameToRuleMap = (_a = {},\n    _a[sparqlTokenMap.EXISTS.tokenName] = 'ExistsFunction',\n    _a[sparqlTokenMap.NOT_EXISTS.tokenName] = 'NotExistsFunction',\n    _a[sparqlTokenMap.NOW.tokenName] = 'BuiltInCall_NOW',\n    _a);\nvar disallowedSparqlTokenNames = Object.keys(disallowedSparqlTokenNameToRuleMap);\n// Token names for literals; these are not allowed in the subject position of\n// certain patterns in SRS.\nvar disallowedSparqlLiteralTokenNames = [\n    sparqlTokenMap.DOUBLE,\n    sparqlTokenMap.DECIMAL,\n    sparqlTokenMap.INTEGER,\n    sparqlTokenMap.DOUBLE_POSITIVE,\n    sparqlTokenMap.DECIMAL_POSITIVE,\n    sparqlTokenMap.INTEGER_POSITIVE,\n    sparqlTokenMap.DOUBLE_NEGATIVE,\n    sparqlTokenMap.DECIMAL_NEGATIVE,\n    sparqlTokenMap.INTEGER_NEGATIVE,\n    sparqlTokenMap.STRING_LITERAL1,\n    sparqlTokenMap.STRING_LITERAL2,\n    sparqlTokenMap.STRING_LITERAL_LONG1,\n    sparqlTokenMap.STRING_LITERAL_LONG2,\n].map(function (token) { return token.tokenName; });\n// Walks back up the tree to construct the rule stack, first going upward\n// through the provided `traverseCtx`, and then continuing up through the\n// `fullCtx`. `traverseCtx` is intended to be the \"inner\" ITraverseContext\n// representing the results of the SPARQL sub-parser used by the\n// SparqlSrsVisitor. `fullCtx` is intended to be the \"outer\" ITraverseContext\n// representing the results of the SRS parser itself. The SRS parser delegates\n// blocks of SPARQL to a SPARQL sub-parser, so, by combinging the two contexts,\n// we get the full parser stack. The traversal adds rules to the stack only\n// once a rule matching one of the `startRuleNames` is hit.\n//\n// At the point where the traversal of `traverseCtx` ends and the traversal of\n// `fullCtx` begins, you may need to insert a rule into the stack (e.g.,\n// because the `traverseCtx` doesn't include the top-level rule for that\n// parse). If so, use `topLevelSubParserRuleName`.\n//\n// In some cases, there is a need to track nodes and potentially bail out early\n// at certain points while constructing the rule stack. For that, use\n// `earlyAbortTest`. If that method returns true, the rule stack construction\n// will abort.\nfunction getCustomErrorRuleStack(traverseCtx, fullCtx, startRuleNames, topLevelSubParserRuleName, earlyAbortTest) {\n    if (earlyAbortTest === void 0) { earlyAbortTest = defaultEarlyAbortTest; }\n    if (!traverseCtx) {\n        return []; // forced early exit\n    }\n    var ruleStack = [];\n    var stackUnwindingPointer = traverseCtx;\n    // Move up from current context to the first rule that should \"start\" the stack.\n    while (isCstNode(stackUnwindingPointer.node) &&\n        !startRuleNames.includes(stackUnwindingPointer.node.name)) {\n        if (earlyAbortTest(stackUnwindingPointer)) {\n            return [];\n        }\n        stackUnwindingPointer = stackUnwindingPointer.parentCtx;\n    }\n    // Now start adding all found rules to the stack as we move upward.\n    while (isCstNode(stackUnwindingPointer.node)) {\n        ruleStack.unshift(stackUnwindingPointer.node.name);\n        if (earlyAbortTest(stackUnwindingPointer)) {\n            return [];\n        }\n        stackUnwindingPointer = stackUnwindingPointer.parentCtx;\n    }\n    // If the rule stack of the sub-parser doesn't get all the way up to the\n    // relevant top-level rule, this will force the top-level rule to be put onto\n    // the stack before proceeding.\n    if (typeof topLevelSubParserRuleName === 'string') {\n        ruleStack.unshift(topLevelSubParserRuleName);\n    }\n    // Now that we've got the sub-parser's rule stack, we trace the remaining\n    // outer parser's stack to get to the true bottom of the stack.\n    stackUnwindingPointer = fullCtx;\n    while (stackUnwindingPointer) {\n        if (isCstNode(stackUnwindingPointer.node)) {\n            ruleStack.unshift(stackUnwindingPointer.node.name);\n            if (earlyAbortTest(stackUnwindingPointer)) {\n                return [];\n            }\n        }\n        stackUnwindingPointer = stackUnwindingPointer.parentCtx;\n    }\n    return ['SrsDoc'].concat(ruleStack);\n}\nvar getCustomIRecognitionException = function (_a) {\n    var name = _a.name, message = _a.message, node = _a.node, ruleStack = _a.ruleStack;\n    return ({\n        name: name,\n        message: message,\n        token: node,\n        context: {\n            ruleStack: ruleStack,\n            // `ruleOccurrenceStack` is meaningless to us as it just\n            // records the number used when the chevrotain rule is\n            // created (e.g., SUBRULE1 vs SUBRULE2); we can't know that\n            // or care about that here\n            ruleOccurrenceStack: [],\n        },\n        resyncedTokens: [],\n    });\n};\nvar getNoPrefixError = function (node, parentCtx, fullCtx, subParserRuleName) {\n    return getCustomIRecognitionException({\n        name: 'NoNamespacePrefixError',\n        message: \"A prefix (\\\"\" + node.image + \"\\\") was used for which there was no namespace defined.\",\n        node: node,\n        ruleStack: getCustomErrorRuleStack(parentCtx, fullCtx, ['PrefixedName'], subParserRuleName),\n    });\n};\nvar getDisallowedTokenError = function (node, parentCtx, fullCtx) {\n    return getCustomIRecognitionException({\n        name: 'DisallowedTokenError',\n        message: \"Token \" + node.tokenType.tokenName + \" cannot be used in Stardog Rules.\",\n        node: node,\n        ruleStack: getCustomErrorRuleStack(parentCtx, fullCtx, [disallowedSparqlTokenNameToRuleMap[node.tokenType.tokenName]], 'GroupGraphPattern'),\n    });\n};\nvar getDisallowedLiteralError = function (node, parentCtx, fullCtx, subParserRuleName) {\n    var foundPropertyListPathNotEmptyCtx = null;\n    var didFindSubExpressionWithMultipleChildren = false;\n    var errorContext = null;\n    var errorRuleStack = getCustomErrorRuleStack(parentCtx, fullCtx, ['Expression', 'TriplesSameSubjectPath'], subParserRuleName, function (stackCtx) {\n        var node = stackCtx.node, parentCtx = stackCtx.parentCtx;\n        var nodeName = node.name;\n        if (nodeName === 'PropertyListPathNotEmpty') {\n            // Track the found `PropertyListPathNotEmmpty` node and keep going.\n            foundPropertyListPathNotEmptyCtx = stackCtx;\n            return false;\n        }\n        if (!didFindSubExpressionWithMultipleChildren &&\n            subExpressionMatcher.test(nodeName)) {\n            // Track that we found a sub-expression with multiple children, then\n            // keep going.\n            didFindSubExpressionWithMultipleChildren =\n                parentCtx.node.children[nodeName].length > 1;\n            return false;\n        }\n        var isExpression = nodeName === 'Expression';\n        var isTriplesBlock = nodeName === 'TriplesSameSubjectPath';\n        if (!isExpression && !isTriplesBlock) {\n            return false;\n        }\n        var isBoundExpressionWithLiteralSubject = isExpression &&\n            parentCtx.node.name === 'Bind' &&\n            // If we've found a sub-expression with multiple children, it's highly\n            // likely (maybe definite?) that this `Bind` does not include an invalid\n            // literal as a subject, so we don't count this as an error. This _may_\n            // allow rare false positives, but it definitely prevents false\n            // negatives of the sort described in https://github.com/stardog-union/millan/issues/22\n            !didFindSubExpressionWithMultipleChildren;\n        var isTriplesBlockSubject = isTriplesBlock &&\n            (!foundPropertyListPathNotEmptyCtx ||\n                foundPropertyListPathNotEmptyCtx.parentCtx.node.name !==\n                    'TriplesSameSubjectPath');\n        if (isBoundExpressionWithLiteralSubject || isTriplesBlockSubject) {\n            errorContext = isBoundExpressionWithLiteralSubject\n                ? 'Bind'\n                : 'TriplesBlock';\n            return false;\n        }\n        // We got to the Expression or TriplesBlock containing the literal, but\n        // the literal wasn't in the subject position (i.e., was not the lead\n        // Expression inside of Bind and was not the subject of\n        // TriplesSameSubjectPath), so we can bail early here.\n        return true;\n    });\n    if (errorRuleStack.length === 0) {\n        return;\n    }\n    return getCustomIRecognitionException({\n        name: 'DisallowedLiteralError',\n        message: \"Token \" + node.tokenType.tokenName + \" (\" + node.image + \") cannot be used as a subject inside of a \" + errorContext + \" in Stardog Rules Syntax.\",\n        node: node,\n        ruleStack: errorRuleStack,\n    });\n};\n// Since the SRS parser delegates to the SPARQL parser inside of\n// an SRS `IfClause`, and SPARQL allows certain constructs that SRS does not,\n// we need to create our own errors for SRS-specific restrictions here.\nexport function addIfClauseErrorsToErrors(_a) {\n    var cst = _a.cst, namespacesMap = _a.namespacesMap, fullCtx = _a.fullCtx, errors = _a.errors, semanticErrors = _a.semanticErrors;\n    traverse(cst, function (ctx, next) {\n        var node = ctx.node, parentCtx = ctx.parentCtx;\n        if (isCstNode(node)) {\n            return next();\n        }\n        var tokenName = node.tokenType.tokenName;\n        if (disallowedSparqlTokenNames.some(function (name) { return name === tokenName; })) {\n            errors.push(getDisallowedTokenError(node, parentCtx, fullCtx));\n        }\n        if (disallowedSparqlLiteralTokenNames.some(function (tokenName) { return tokenName === node.tokenType.tokenName; })) {\n            var error = getDisallowedLiteralError(node, parentCtx, fullCtx, 'GroupGraphPattern');\n            if (error) {\n                errors.push(error);\n            }\n        }\n        if (tokenName === 'PNAME_NS' || tokenName === 'PNAME_LN') {\n            var prefix = node.image.split(':').shift();\n            if (!namespacesMap[prefix]) {\n                semanticErrors.push(getNoPrefixError(node, parentCtx, fullCtx, 'GroupGraphPattern'));\n            }\n        }\n    });\n    return {\n        errors: errors,\n        semanticErrors: semanticErrors,\n    };\n}\nexport function addThenClauseErrorsToErrors(_a) {\n    var cst = _a.cst, namespacesMap = _a.namespacesMap, errors = _a.errors, semanticErrors = _a.semanticErrors, fullCtx = _a.fullCtx;\n    traverse(cst, function (ctx, next) {\n        var node = ctx.node, parentCtx = ctx.parentCtx;\n        if (isCstNode(node)) {\n            return next();\n        }\n        var tokenName = node.tokenType.tokenName;\n        if (disallowedSparqlLiteralTokenNames.some(function (tokenName) { return tokenName === node.tokenType.tokenName; })) {\n            var error = getDisallowedLiteralError(node, parentCtx, fullCtx, 'GroupGraphPattern');\n            if (error) {\n                errors.push(error);\n            }\n        }\n        if (tokenName === 'PNAME_NS' || tokenName === 'PNAME_LN') {\n            var prefix = node.image.split(':').shift();\n            if (!namespacesMap[prefix]) {\n                semanticErrors.push(getNoPrefixError(node, parentCtx, fullCtx, 'TriplesBlock'));\n            }\n        }\n    });\n    return {\n        errors: errors,\n        semanticErrors: semanticErrors,\n    };\n}\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// tslint:disable:function-name\nvar sparqlTokenMap = require('../sparql/tokens').sparqlTokenMap;\nvar _a = require('./tokens'), srsTokenMap = _a.srsTokenMap, srsTokenTypes = _a.srsTokenTypes, multiModeLexerDefinition = _a.multiModeLexerDefinition;\nimport { Parser, Lexer, } from 'chevrotain';\nimport { TurtleParser } from '../turtle/TurtleParser';\nimport { isCstNode, unsafeTraverse } from '../helpers/cst';\nimport { defaultNamespacesMap } from 'turtle/defaultNamespaces';\nimport { getSparqlSrsVisitor, reduceVisitorItemErrors, findAndSwapPlaceholders, } from './visitor';\nimport { addThenClauseErrorsToErrors, addIfClauseErrorsToErrors, } from './customErrors';\nvar SrsParser = /** @class */ (function (_super) {\n    __extends(SrsParser, _super);\n    function SrsParser(config) {\n        var _this = _super.call(this, __assign({ outputCst: true, recoveryEnabled: true }, config), srsTokenTypes, multiModeLexerDefinition, false) || this;\n        _this.baseNamespacesMap = Object.freeze(__assign({}, defaultNamespacesMap));\n        _this.namespacesMap = {};\n        _this.visitCst = function (cst) {\n            // To save resources while parsing, the sparqlSrsVisitor is a singleton.\n            if (!_this.sparqlSrsVisitor) {\n                var BaseSrsVisitor = _this.getBaseCstVisitorConstructorWithDefaults();\n                _this.sparqlSrsVisitor = getSparqlSrsVisitor(BaseSrsVisitor);\n            }\n            else {\n                _this.sparqlSrsVisitor.$resetState();\n            }\n            _this.sparqlSrsVisitor.visit(cst, _this.input);\n        };\n        _this.getSparqlRulesFromVisitor = function (cst) {\n            _this.visitCst(cst);\n            return {\n                groupGraphPatterns: _this.sparqlSrsVisitor.$getGroupGraphPatterns(),\n                triplesBlocks: _this.sparqlSrsVisitor.$getTriplesBlocks(),\n            };\n        };\n        _this.resetManagedState = function () {\n            _this.namespacesMap = __assign({}, defaultNamespacesMap);\n            _this.semanticErrors = [];\n        };\n        _this.setBaseNamespaces = function (newBaseNamespaces) {\n            _this.baseNamespacesMap = __assign({}, newBaseNamespaces);\n        };\n        _this.tokenize = function (document) {\n            return _this.lexer.tokenize(document).tokens;\n        };\n        _this.parse = function (document) {\n            _this.resetManagedState();\n            _this.input = _this.lexer.tokenize(document).tokens;\n            var cst = _this.SrsDoc();\n            var _a = _this.getSparqlRulesFromVisitor(cst), groupGraphPatterns = _a.groupGraphPatterns, triplesBlocks = _a.triplesBlocks;\n            // Pull visitor errors\n            var errors = _this.errors.concat(groupGraphPatterns.reduce(reduceVisitorItemErrors, []), triplesBlocks.reduce(reduceVisitorItemErrors, []));\n            var semanticErrors = _this.semanticErrors.slice();\n            // Replace placeholder CST nodes created by the SRS parser with CST nodes\n            // returned by the visitor sub-parsers.\n            unsafeTraverse(cst, function (ctx, next) {\n                var node = ctx.node, parentCtx = ctx.parentCtx;\n                if (isCstNode(node)) {\n                    return next();\n                }\n                var currentTokenName = node.tokenType.tokenName;\n                if (currentTokenName !== 'GroupGraphPattern' &&\n                    currentTokenName !== 'TriplesBlock') {\n                    return;\n                }\n                var parentNode = parentCtx.node;\n                // The SRS parser parses only Turtle and SRS-specific content (RULE, IF,\n                // THEN), and creates placeholder tokens for the blocks where SPARQL is\n                // valid. The SparqlSrsVisitor visits these nodes and delegates their\n                // parsing to a SPARQL parser. Here, we replace the placeholder nodes\n                // (`GroupGraphPattern` and `TriplesBlock`) with the real ones from the\n                // SPARQL parser, collecting some custom SRS-specific errors along the\n                // way.\n                if (parentNode.name === 'IfClause') {\n                    var matchingVisitorItem = findAndSwapPlaceholders(node, parentNode, groupGraphPatterns, 'GroupGraphPattern');\n                    if (matchingVisitorItem) {\n                        addIfClauseErrorsToErrors({\n                            fullCtx: ctx,\n                            namespacesMap: __assign({}, _this.baseNamespacesMap, _this.namespacesMap),\n                            cst: matchingVisitorItem.parseResult.cst,\n                            errors: errors,\n                            semanticErrors: semanticErrors,\n                        });\n                    }\n                }\n                else if (parentNode.name === 'ThenClause') {\n                    var matchingVisitorItem = findAndSwapPlaceholders(node, parentNode, triplesBlocks, 'TriplesBlock');\n                    if (matchingVisitorItem) {\n                        addThenClauseErrorsToErrors({\n                            fullCtx: ctx,\n                            namespacesMap: __assign({}, _this.baseNamespacesMap, _this.namespacesMap),\n                            cst: matchingVisitorItem.parseResult.cst,\n                            errors: errors,\n                            semanticErrors: semanticErrors,\n                        });\n                    }\n                }\n            });\n            return {\n                semanticErrors: semanticErrors,\n                errors: errors,\n                cst: cst,\n            };\n        };\n        _this.SrsDoc = _this.RULE('SrsDoc', function () {\n            _this.SUBRULE(_this.turtleDoc);\n            _this.MANY(function () {\n                _this.SUBRULE(_this.RuleDoc);\n                _this.MANY1(function () {\n                    _this.SUBRULE(_this.triples);\n                    _this.CONSUME(sparqlTokenMap.Period);\n                });\n            });\n        });\n        _this.RuleDoc = _this.RULE('RuleDoc', function () {\n            _this.OPTION(function () { return _this.SUBRULE(_this.RuleClause); });\n            _this.SUBRULE(_this.IfClause);\n            _this.SUBRULE(_this.ThenClause);\n        });\n        _this.RuleClause = _this.RULE('RuleClause', function () {\n            _this.CONSUME(srsTokenMap.Rule);\n            _this.SUBRULE(_this.iri);\n        });\n        _this.IfClause = _this.RULE('IfClause', function () {\n            _this.CONSUME(srsTokenMap.If);\n            _this.CONSUME(srsTokenMap.GroupGraphPattern);\n        });\n        _this.ThenClause = _this.RULE('ThenClause', function () {\n            _this.CONSUME(srsTokenMap.Then);\n            _this.CONSUME(sparqlTokenMap.LCurly);\n            _this.CONSUME(srsTokenMap.TriplesBlock);\n            _this.CONSUME(srsTokenMap.EndThen);\n        });\n        _this.lexer = new Lexer(multiModeLexerDefinition);\n        Parser.performSelfAnalysis(_this);\n        return _this;\n    }\n    return SrsParser;\n}(TurtleParser));\nexport { SrsParser };\n","export * from './SrsParser';\n// Convenience imports/exports that aren't core functionality:\n// NOTE: Tokens MUST be imported using CommonJS syntax; see here: https://github.com/SAP/chevrotain/issues/345\nexport var srsTokens = require('./tokens');\n","/*\nCopyright ©2012–2018 Ruben Verborgh\nWith modifications Copyright ©2018 Stardog Union\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\nvar escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\[uU]|\\\\(.)/g;\nvar escapeReplacements = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    '\"': '\"',\n    n: '\\n',\n    r: '\\r',\n    t: '\\t',\n    f: '\\f',\n    b: '\\b',\n    _: '_',\n    '~': '~',\n    '.': '.',\n    '-': '-',\n    '!': '!',\n    $: '$',\n    '&': '&',\n    '(': '(',\n    ')': ')',\n    '*': '*',\n    '+': '+',\n    ',': ',',\n    ';': ';',\n    '=': '=',\n    '/': '/',\n    '?': '?',\n    '#': '#',\n    '@': '@',\n    '%': '%',\n};\nexport var unescapedStringLiteralQuote = /^\"([^\"\\\\\\r\\n]+)\"/; // non-empty string without escape sequences\nexport var unescapedStringLiteralSingleQuote = /^'([^'\\\\\\r\\n]+)'/;\nexport var stringLiteralQuote = /^\"((?:[^\"\\\\\\r\\n]|\\\\.)*)\"(?=[^\"])/;\nexport var stringLiteralSingleQuote = /^'((?:[^'\\\\\\r\\n]|\\\\.)*)'(?=[^'])/;\nexport var stringLiteralLongQuote = /^\"\"\"([^\"\\\\]*(?:(?:\\\\.|\"(?!\"\"))[^\"\\\\]*)*)\"\"\"/;\nexport var stringLiteralLongSingleQuote = /^'''([^'\\\\]*(?:(?:\\\\.|'(?!''))[^'\\\\]*)*)'''/;\nexport var illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\nexport var escapedIri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/;\nexport var unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/;\n// Handle special unescaping needs related to the IRIREF rule and others.\nexport var unescape = function (item) {\n    try {\n        return item.replace(escapeSequence, function (_, unicode4, unicode8, escapedChar) {\n            if (unicode4) {\n                return String.fromCharCode(parseInt(unicode4, 16));\n            }\n            else if (unicode8) {\n                var charCode = parseInt(unicode8, 16);\n                if (charCode <= 0xffff) {\n                    return String.fromCharCode(charCode);\n                }\n                return String.fromCharCode(0xd800 + (charCode -= 0x10000) / 0x400, 0xdc00 + (charCode & 0x3ff));\n            }\n            else {\n                var replacement = escapeReplacements[escapedChar];\n                if (!replacement) {\n                    throw new Error();\n                }\n                return replacement;\n            }\n        });\n    }\n    catch (error) {\n        return null;\n    }\n};\n","var sparqlTokenMap = require('../sparql/tokens').sparqlTokenMap;\nimport { createToken } from 'chevrotain';\nimport { regex } from '../helpers/regex';\nimport { EXPONENT, ECHAR, PLX, HEX, PN_CHARS_BASE, PN_CHARS_U, PN_CHARS, PN_PREFIX, PN_LOCAL, PN_LOCAL_ESC, } from '../helpers/matchers';\nimport { unescape, stringLiteralLongSingleQuote, stringLiteralLongQuote, unescapedStringLiteralQuote, stringLiteralQuote, unescapedStringLiteralSingleQuote, stringLiteralSingleQuote, unescapedIri, escapedIri, illegalIriChars, } from '../helpers/unescape';\nvar unicodeRegexp = /[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nexport var turtleTokenMap = {\n    Comment: createToken({\n        name: 'Comment',\n        pattern: /#[^\\n]*/,\n        group: 'comments',\n    }),\n    LBracket: sparqlTokenMap.LBracket,\n    RBracket: sparqlTokenMap.RBracket,\n    LParen: sparqlTokenMap.LParen,\n    RParen: sparqlTokenMap.RParen,\n    Period: sparqlTokenMap.Period,\n    WhiteSpace: sparqlTokenMap.WhiteSpace,\n    // 'true' and 'false' are case sensitive in Turtle but not in SPARQL\n    TRUE: createToken({\n        name: 'TRUE',\n        pattern: /true/,\n    }),\n    FALSE: createToken({\n        name: 'FALSE',\n        pattern: /false/,\n    }),\n    DoubleCaret: sparqlTokenMap.DoubleCaret,\n    Comma: sparqlTokenMap.Comma,\n    Semicolon: sparqlTokenMap.Semicolon,\n    A: sparqlTokenMap.A,\n    PREFIX: sparqlTokenMap.PREFIX,\n    BASE: sparqlTokenMap.BASE,\n    PNAME_NS: sparqlTokenMap.PNAME_NS,\n    PNAME_LN: sparqlTokenMap.PNAME_LN,\n    BLANK_NODE_LABEL: sparqlTokenMap.BLANK_NODE_LABEL,\n    TTL_BASE: createToken({ name: 'TTL_BASE', pattern: /@base/ }),\n    TTL_PREFIX: createToken({ name: 'TTL_PREFIX', pattern: /@prefix/ }),\n    LANGTAG: sparqlTokenMap.LANGTAG,\n    INTEGER: createToken({\n        name: 'INTEGER',\n        pattern: regex.and(regex.option(/[+-]/), /\\d+/),\n    }),\n    DECIMAL: createToken({\n        name: 'DECIMAL',\n        pattern: regex.and(regex.option(/[+-]/), /(\\d*\\.\\d+)/),\n    }),\n    DOUBLE: createToken({\n        name: 'DOUBLE',\n        pattern: regex.and(regex.option(/[+-]/), regex.or(regex.and(/\\d+\\.\\d*/, EXPONENT), regex.and(/\\.\\d+/, EXPONENT), regex.and(/\\d+/, EXPONENT))),\n    }),\n    EXPONENT: createToken({ name: 'EXPONENT', pattern: EXPONENT }),\n    ECHAR: createToken({ name: 'ECHAR', pattern: ECHAR }),\n    ANON: sparqlTokenMap.ANON,\n    PLX: createToken({ name: 'PLX', pattern: PLX }),\n    PERCENT: sparqlTokenMap.PERCENT,\n    HEX: createToken({ name: 'HEX', pattern: HEX }),\n    STRING_LITERAL_LONG_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongSingleQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_LONG_QUOTE: createToken({\n        name: 'STRING_LITERAL_LONG_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var match = stringLiteralLongQuote.exec(text.slice(startOffset));\n            if (!match || unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: true,\n    }),\n    STRING_LITERAL_QUOTE: createToken({\n        name: 'STRING_LITERAL_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    STRING_LITERAL_SINGLE_QUOTE: createToken({\n        name: 'STRING_LITERAL_SINGLE_QUOTE',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedStringLiteralSingleQuote.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = stringLiteralSingleQuote.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            if (unescape(match[1]) === null) {\n                // Bad characters\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    UCHAR: createToken({\n        name: 'UCHAR',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            return unicodeRegexp.exec(text.slice(startOffset));\n        },\n        line_breaks: false,\n    }),\n    IRIREF: createToken({\n        name: 'IRIREF',\n        pattern: function (text, startOffset) {\n            if (startOffset === void 0) { startOffset = 0; }\n            var textToMatch = text.slice(startOffset);\n            var match = unescapedIri.exec(textToMatch);\n            if (match) {\n                return match;\n            }\n            match = escapedIri.exec(textToMatch);\n            if (!match) {\n                return null;\n            }\n            var value = unescape(match[1]);\n            if (value === null || illegalIriChars.test(value)) {\n                return null;\n            }\n            return match;\n        },\n        line_breaks: false,\n    }),\n    PN_CHARS_BASE: createToken({ name: 'PN_CHARS_BASE', pattern: PN_CHARS_BASE }),\n    PN_CHARS_U: createToken({ name: 'PN_CHARS_U', pattern: PN_CHARS_U }),\n    PN_CHARS: createToken({ name: 'PN_CHARS', pattern: PN_CHARS }),\n    PN_PREFIX: createToken({ name: 'PN_PREFIX', pattern: PN_PREFIX }),\n    PN_LOCAL: createToken({ name: 'PN_LOCAL', pattern: PN_LOCAL }),\n    PN_LOCAL_ESC: createToken({ name: 'PN_LOCAL_ESC', pattern: PN_LOCAL_ESC }),\n    Unknown: createToken({\n        name: 'Unknown',\n        pattern: /\\w+/,\n    }),\n};\nexport var turtleTokenTypes = [\n    turtleTokenMap.Comment,\n    sparqlTokenMap.ANON,\n    sparqlTokenMap.LBracket,\n    sparqlTokenMap.RBracket,\n    sparqlTokenMap.LParen,\n    sparqlTokenMap.RParen,\n    sparqlTokenMap.WhiteSpace,\n    turtleTokenMap.TRUE,\n    turtleTokenMap.FALSE,\n    sparqlTokenMap.Comma,\n    sparqlTokenMap.Semicolon,\n    sparqlTokenMap.PNAME_NS,\n    sparqlTokenMap.A,\n    sparqlTokenMap.PREFIX,\n    sparqlTokenMap.BASE,\n    sparqlTokenMap.PNAME_LN,\n    sparqlTokenMap.BLANK_NODE_LABEL,\n    turtleTokenMap.TTL_BASE,\n    turtleTokenMap.TTL_PREFIX,\n    sparqlTokenMap.LANGTAG,\n    turtleTokenMap.DOUBLE,\n    turtleTokenMap.DECIMAL,\n    sparqlTokenMap.Period,\n    sparqlTokenMap.DoubleCaret,\n    turtleTokenMap.IRIREF,\n    turtleTokenMap.STRING_LITERAL_LONG_SINGLE_QUOTE,\n    turtleTokenMap.STRING_LITERAL_LONG_QUOTE,\n    turtleTokenMap.STRING_LITERAL_QUOTE,\n    turtleTokenMap.STRING_LITERAL_SINGLE_QUOTE,\n    turtleTokenMap.INTEGER,\n    turtleTokenMap.EXPONENT,\n    turtleTokenMap.PLX,\n    sparqlTokenMap.PERCENT,\n    turtleTokenMap.HEX,\n    turtleTokenMap.PN_CHARS_BASE,\n    turtleTokenMap.PN_CHARS_U,\n    turtleTokenMap.PN_CHARS,\n    turtleTokenMap.PN_PREFIX,\n    turtleTokenMap.PN_LOCAL,\n    turtleTokenMap.PN_LOCAL_ESC,\n    turtleTokenMap.ECHAR,\n    turtleTokenMap.UCHAR,\n    turtleTokenMap.Unknown,\n];\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexport var traverse = function (root, visit) {\n    _traverse(root, null, visit);\n};\nexport var unsafeTraverse = function (root, visit) {\n    _traverse(root, null, visit, false);\n};\nexport function isCstNode(object) {\n    return Boolean(object && 'name' in object);\n}\nvar TraverseContext = /** @class */ (function () {\n    function TraverseContext(_a) {\n        var node = _a.node, parentCtx = _a.parentCtx;\n        this.node = __assign({}, node);\n        this.parentCtx = __assign({}, parentCtx);\n    }\n    return TraverseContext;\n}());\nvar _traverse = function (root, ctx, visit, visitSafely) {\n    if (ctx === void 0) { ctx = new TraverseContext({ node: root }); }\n    if (visitSafely === void 0) { visitSafely = true; }\n    if (!isCstNode(root)) {\n        // must be a token\n        return visit(visitSafely ? __assign({}, ctx) : ctx);\n    }\n    // is a grammar rule node\n    var children = root.children;\n    Object.keys(children).forEach(function (key) {\n        var childType = children[key];\n        if (!childType.length) {\n            return;\n        }\n        childType.forEach(function (child) {\n            var childCtx = visitSafely\n                ? new TraverseContext({ node: child, parentCtx: ctx })\n                : { node: child, parentCtx: ctx };\n            var afterVisit = function (transformedCtx) {\n                var nextCtx = childCtx;\n                if (transformedCtx) {\n                    nextCtx = visitSafely\n                        ? new TraverseContext({\n                            node: transformedCtx.node,\n                            parentCtx: transformedCtx.parentCtx,\n                        })\n                        : {\n                            node: transformedCtx.node,\n                            parentCtx: transformedCtx.parentCtx,\n                        };\n                }\n                _traverse(child, nextCtx, visit, visitSafely);\n            };\n            visit(childCtx, afterVisit);\n        });\n    });\n};\n"],"sourceRoot":""}