import { TokenType } from 'chevrotain';
declare const graphQlTokens: TokenType[];
declare const graphQlTokenMap: {
    Name: TokenType;
    Query: TokenType;
    Mutation: TokenType;
    Subscription: TokenType;
    Fragment: TokenType;
    On: TokenType;
    Schema: TokenType;
    Extend: TokenType;
    Scalar: TokenType;
    TypeToken: TokenType;
    Implements: TokenType;
    Interface: TokenType;
    Union: TokenType;
    Enum: TokenType;
    Input: TokenType;
    DirectiveToken: TokenType;
    QUERY: TokenType;
    MUTATION: TokenType;
    SUBSCRIPTION: TokenType;
    FRAGMENT_DEFINITION: TokenType;
    FRAGMENT_SPREAD: TokenType;
    INLINE_FRAGMENT: TokenType;
    SCHEMA: TokenType;
    SCALAR: TokenType;
    OBJECT: TokenType;
    FIELD_DEFINITION: TokenType;
    FIELD: TokenType;
    ARGUMENT_DEFINITION: TokenType;
    INTERFACE: TokenType;
    UNION: TokenType;
    ENUM_VALUE: TokenType;
    ENUM: TokenType;
    INPUT_OBJECT: TokenType;
    INPUT_FIELD_DEFINITION: TokenType;
    FloatValueToken: TokenType;
    IntValueToken: TokenType;
    BlockStringToken: TokenType;
    StringToken: TokenType;
    BooleanValueToken: TokenType;
    NullValueToken: TokenType;
    EnumValueToken: TokenType;
    FragmentName: TokenType;
    StringValueToken: TokenType;
    Bang: TokenType;
    Dollar: TokenType;
    LParen: TokenType;
    RParen: TokenType;
    Spread: TokenType;
    Colon: TokenType;
    Equals: TokenType;
    At: TokenType;
    LBracket: TokenType;
    RBracket: TokenType;
    LCurly: TokenType;
    RCurly: TokenType;
    Pipe: TokenType;
    Amp: TokenType;
    WhiteSpace: TokenType;
    UnicodeBOM: TokenType;
    LineTerminator: TokenType;
    Comment: TokenType;
    Comma: TokenType;
};
declare const stardogGraphQlTokenMap: {
    OrderByArgumentFieldPropertyToken: TokenType;
    OrderByArgumentDescPropertyToken: TokenType;
    OrderByArgumentToken: TokenType;
    FirstArgumentToken: TokenType;
    ToArgumentToken: TokenType;
    IfArgumentToken: TokenType;
    AliasArgumentToken: TokenType;
    GraphArgumentToken: TokenType;
    OffsetArgumentToken: TokenType;
    LimitArgumentToken: TokenType;
    IriArgumentToken: TokenType;
    OptionalDirectiveToken: TokenType;
    BindDirectiveToken: TokenType;
    HideDirectiveToken: TokenType;
    SkipDirectiveToken: TokenType;
    IncludeDirectiveToken: TokenType;
    FilterDirectiveToken: TokenType;
    PrefixDirectiveToken: TokenType;
    ConfigDirectiveToken: TokenType;
    Name: TokenType;
    Query: TokenType;
    Mutation: TokenType;
    Subscription: TokenType;
    Fragment: TokenType;
    On: TokenType;
    Schema: TokenType;
    Extend: TokenType;
    Scalar: TokenType;
    TypeToken: TokenType;
    Implements: TokenType;
    Interface: TokenType;
    Union: TokenType;
    Enum: TokenType;
    Input: TokenType;
    DirectiveToken: TokenType;
    QUERY: TokenType;
    MUTATION: TokenType;
    SUBSCRIPTION: TokenType;
    FRAGMENT_DEFINITION: TokenType;
    FRAGMENT_SPREAD: TokenType;
    INLINE_FRAGMENT: TokenType;
    SCHEMA: TokenType;
    SCALAR: TokenType;
    OBJECT: TokenType;
    FIELD_DEFINITION: TokenType;
    FIELD: TokenType;
    ARGUMENT_DEFINITION: TokenType;
    INTERFACE: TokenType;
    UNION: TokenType;
    ENUM_VALUE: TokenType;
    ENUM: TokenType;
    INPUT_OBJECT: TokenType;
    INPUT_FIELD_DEFINITION: TokenType;
    FloatValueToken: TokenType;
    IntValueToken: TokenType;
    BlockStringToken: TokenType;
    StringToken: TokenType;
    BooleanValueToken: TokenType;
    NullValueToken: TokenType;
    EnumValueToken: TokenType;
    FragmentName: TokenType;
    StringValueToken: TokenType;
    Bang: TokenType;
    Dollar: TokenType;
    LParen: TokenType;
    RParen: TokenType;
    Spread: TokenType;
    Colon: TokenType;
    Equals: TokenType;
    At: TokenType;
    LBracket: TokenType;
    RBracket: TokenType;
    LCurly: TokenType;
    RCurly: TokenType;
    Pipe: TokenType;
    Amp: TokenType;
    WhiteSpace: TokenType;
    UnicodeBOM: TokenType;
    LineTerminator: TokenType;
    Comment: TokenType;
    Comma: TokenType;
};
declare const stardogGraphQlTokens: TokenType[];
export { graphQlTokenMap, graphQlTokens, stardogGraphQlTokenMap, stardogGraphQlTokens, };
