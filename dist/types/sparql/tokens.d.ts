import { TokenType } from 'chevrotain';
export declare const sparqlTokenMap: {
    IRIREF: TokenType;
    LANGTAG: TokenType;
    INTEGER: TokenType;
    DECIMAL: TokenType;
    DOUBLE: TokenType;
    INTEGER_POSITIVE: TokenType;
    DECIMAL_POSITIVE: TokenType;
    DOUBLE_POSITIVE: TokenType;
    INTEGER_NEGATIVE: TokenType;
    DECIMAL_NEGATIVE: TokenType;
    DOUBLE_NEGATIVE: TokenType;
    STRING_LITERAL1: TokenType;
    STRING_LITERAL2: TokenType;
    STRING_LITERAL_LONG1: TokenType;
    STRING_LITERAL_LONG2: TokenType;
    NIL: TokenType;
    ANON: TokenType;
    PNAME_NS: TokenType;
    PNAME_LN: TokenType;
    BLANK_NODE_LABEL: TokenType;
    VAR1: TokenType;
    VAR2: TokenType;
    PERCENT: TokenType;
    Comment: TokenType;
    LCurly: TokenType;
    RCurly: TokenType;
    LParen: TokenType;
    RParen: TokenType;
    WhiteSpace: TokenType;
    Star: TokenType;
    Unknown: TokenType;
    Period: TokenType;
    QuestionMark: TokenType;
    Plus: TokenType;
    Minus: TokenType;
    LBracket: TokenType;
    RBracket: TokenType;
    Semicolon: TokenType;
    Comma: TokenType;
    Pipe: TokenType;
    ForwardSlash: TokenType;
    Caret: TokenType;
    DoubleCaret: TokenType;
    Bang: TokenType;
    LogicalOr: TokenType;
    LogicalAnd: TokenType;
    Equals: TokenType;
    NotEquals: TokenType;
    LessThan: TokenType;
    GreaterThan: TokenType;
    LessThanEquals: TokenType;
    GreaterThanEquals: TokenType;
    SELECT: TokenType;
    CONSTRUCT: TokenType;
    DISTINCT: TokenType;
    START: TokenType;
    END: TokenType;
    VIA: TokenType;
    CYCLIC: TokenType;
    PATHS_SHORTEST: TokenType;
    PATHS_ALL: TokenType;
    PATHS: TokenType;
    AS: TokenType;
    WHERE: TokenType;
    A: TokenType;
    GROUP_BY: TokenType;
    ORDER_BY: TokenType;
    BY: TokenType;
    BASE: TokenType;
    PREFIX: TokenType;
    DESCRIBE: TokenType;
    ASK: TokenType;
    FROM: TokenType;
    REDUCED: TokenType;
    NAMED: TokenType;
    HAVING: TokenType;
    ASC: TokenType;
    DESC: TokenType;
    OFFSET: TokenType;
    LIMIT: TokenType;
    VALUES: TokenType;
    LOAD: TokenType;
    SILENT: TokenType;
    INTO: TokenType;
    CLEAR: TokenType;
    DROP: TokenType;
    CREATE: TokenType;
    ADD: TokenType;
    TO: TokenType;
    MOVE: TokenType;
    COPY: TokenType;
    INSERT_DATA: TokenType;
    DELETE_DATA: TokenType;
    DELETE_WHERE: TokenType;
    WITH: TokenType;
    DELETE: TokenType;
    INSERT: TokenType;
    USING: TokenType;
    DEFAULT: TokenType;
    GRAPH: TokenType;
    ALL: TokenType;
    OPTIONAL: TokenType;
    SERVICE: TokenType;
    BIND: TokenType;
    UNNEST: TokenType;
    UNDEF: TokenType;
    MINUS: TokenType;
    UNION: TokenType;
    FILTER: TokenType;
    STR: TokenType;
    LANG: TokenType;
    LANGMATCHES: TokenType;
    DATATYPE: TokenType;
    BOUND: TokenType;
    IRI: TokenType;
    URI: TokenType;
    BNODE: TokenType;
    RAND: TokenType;
    ABS: TokenType;
    CEIL: TokenType;
    FLOOR: TokenType;
    ROUND: TokenType;
    CONCAT: TokenType;
    STRLEN: TokenType;
    UCASE: TokenType;
    LCASE: TokenType;
    ENCODE_FOR_URI: TokenType;
    CONTAINS: TokenType;
    STRSTARTS: TokenType;
    STRENDS: TokenType;
    STRBEFORE: TokenType;
    STRAFTER: TokenType;
    YEAR: TokenType;
    MONTH: TokenType;
    DAY: TokenType;
    HOURS: TokenType;
    MINUTES: TokenType;
    SECONDS: TokenType;
    TIMEZONE: TokenType;
    TZ: TokenType;
    NOW: TokenType;
    UUID: TokenType;
    STRUUID: TokenType;
    MD5: TokenType;
    SHA1: TokenType;
    SHA256: TokenType;
    SHA384: TokenType;
    SHA512: TokenType;
    COALESCE: TokenType;
    IF: TokenType;
    STRLANG: TokenType;
    STRDT: TokenType;
    sameTerm: TokenType;
    isIRI: TokenType;
    isURI: TokenType;
    isBLANK: TokenType;
    isLITERAL: TokenType;
    isNUMERIC: TokenType;
    REGEX: TokenType;
    SUBSTR: TokenType;
    REPLACE: TokenType;
    EXISTS: TokenType;
    NOT_EXISTS: TokenType;
    COUNT: TokenType;
    SUM: TokenType;
    MIN: TokenType;
    AVG: TokenType;
    SAMPLE: TokenType;
    GROUP_CONCAT: TokenType;
    SEPARATOR: TokenType;
    TRUE: TokenType;
    FALSE: TokenType;
    IN: TokenType;
    NOT_IN: TokenType;
    MAX_LENGTH: TokenType;
    MAX: TokenType;
};
export declare const baseTokens: TokenType[];
export declare const pathsTokens: TokenType[];
export declare const nonStandardTokens: TokenType[];
export declare const stardogSparqlTokens: TokenType[];
export declare const sparqlTokenTypes: TokenType[];
