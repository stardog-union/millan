import { createToken, ITokenConfig } from 'chevrotain';
import { createKeyword as createKeywordToken } from 'helpers/chevrotain/tokens';

export const createKeyword = ({
  longer_alt = UNKNOWN,
  ...props
}: ITokenConfig) =>
  createKeywordToken({
    longer_alt,
    ...props,
  });

const UNKNOWN = createToken({ name: 'UNKNOWN', pattern: /\w+/i });

export const keywords = {
  SELECT: createKeyword({ name: 'SELECT' }),
  CONSTRUCT: createKeyword({ name: 'CONSTRUCT' }),
  DISTINCT: createKeyword({ name: 'DISTINCT' }),
  START: createKeyword({ name: 'START' }),
  END: createKeyword({ name: 'END' }),
  VIA: createKeyword({ name: 'VIA' }),
  PATHS: createKeyword({ name: 'PATHS' }),
  PATHS_ALL: createKeyword({
    name: 'PATHS_ALL',
    pattern: /PATHS ALL/i,
  }),
  PATHS_SHORTEST: createKeyword({
    name: 'PATHS_SHORTEST',
    pattern: /PATHS SHORTEST/i,
  }),
  CYCLIC: createKeyword({ name: 'CYCLIC' }),
  AS: createKeyword({ name: 'AS' }),
  WHERE: createKeyword({ name: 'WHERE' }),
  A: createKeyword({ name: 'A', pattern: /a/ }),
  GROUP_BY: createKeyword({
    name: 'GROUP_BY',
    pattern: /GROUP BY/i,
  }),
  ORDER_BY: createKeyword({
    name: 'ORDER_BY',
    pattern: /ORDER BY/i,
  }),
  BY: createKeyword({ name: 'BY' }),
  BASE: createKeyword({ name: 'BASE' }),
  PREFIX: createKeyword({ name: 'PREFIX' }),
  DESCRIBE: createKeyword({ name: 'DESCRIBE' }),
  ASK: createKeyword({ name: 'ASK' }),
  FROM: createKeyword({ name: 'FROM' }),
  REDUCED: createKeyword({ name: 'REDUCED' }),
  NAMED: createKeyword({ name: 'NAMED' }),
  HAVING: createKeyword({ name: 'HAVING' }),
  ASC: createKeyword({ name: 'ASC' }),
  DESC: createKeyword({ name: 'DESC' }),
  OFFSET: createKeyword({ name: 'OFFSET' }),
  LIMIT: createKeyword({ name: 'LIMIT' }),
  VALUES: createKeyword({ name: 'VALUES' }),
  LOAD: createKeyword({ name: 'LOAD' }),
  SILENT: createKeyword({ name: 'SILENT' }),
  INTO: createKeyword({ name: 'INTO' }),
  CLEAR: createKeyword({ name: 'CLEAR' }),
  DROP: createKeyword({ name: 'DROP' }),
  CREATE: createKeyword({ name: 'CREATE' }),
  ADD: createKeyword({ name: 'ADD' }),
  TO: createKeyword({ name: 'TO' }),
  MOVE: createKeyword({ name: 'MOVE' }),
  COPY: createKeyword({ name: 'COPY' }),
  INSERT_DATA: createKeyword({
    name: 'INSERT_DATA',
    pattern: /INSERT +DATA/i,
  }),
  DELETE_DATA: createKeyword({
    name: 'DELETE_DATA',
    pattern: /DELETE +DATA/i,
  }),
  DELETE_WHERE: createKeyword({
    name: 'DELETE_WHERE',
    pattern: /DELETE +WHERE/i,
  }),
  WITH: createKeyword({ name: 'WITH' }),
  DELETE: createKeyword({ name: 'DELETE' }),
  INSERT: createKeyword({ name: 'INSERT' }),
  USING: createKeyword({ name: 'USING' }),
  DEFAULT: createKeyword({ name: 'DEFAULT' }),
  GRAPH: createKeyword({ name: 'GRAPH' }),
  ALL: createKeyword({ name: 'ALL' }),
  OPTIONAL: createKeyword({ name: 'OPTIONAL' }),
  SERVICE: createKeyword({ name: 'SERVICE' }),
  BIND: createKeyword({ name: 'BIND' }),
  UNNEST: createKeyword({ name: 'UNNEST' }),
  UNDEF: createKeyword({ name: 'UNDEF' }),
  MINUS: createKeyword({ name: 'MINUS' }),
  UNION: createKeyword({ name: 'UNION' }),
  FILTER: createKeyword({ name: 'FILTER' }),
  STR: createKeyword({ name: 'STR' }),
  LANG: createKeyword({ name: 'LANG' }),
  LANGMATCHES: createKeyword({ name: 'LANGMATCHES' }),
  DATATYPE: createKeyword({ name: 'DATATYPE' }),
  BOUND: createKeyword({ name: 'BOUND' }),
  IRI: createKeyword({ name: 'IRI' }),
  URI: createKeyword({ name: 'URI' }),
  BNODE: createKeyword({ name: 'BNODE' }),
  RAND: createKeyword({ name: 'RAND' }),
  ABS: createKeyword({ name: 'ABS' }),
  CEIL: createKeyword({ name: 'CEIL' }),
  FLOOR: createKeyword({ name: 'FLOOR' }),
  ROUND: createKeyword({ name: 'ROUND' }),
  CONCAT: createKeyword({ name: 'CONCAT' }),
  STRLEN: createKeyword({ name: 'STRLEN' }),
  UCASE: createKeyword({ name: 'UCASE' }),
  LCASE: createKeyword({ name: 'LCASE' }),
  ENCODE_FOR_URI: createKeyword({ name: 'ENCODE_FOR_URI' }),
  CONTAINS: createKeyword({ name: 'CONTAINS' }),
  STRSTARTS: createKeyword({ name: 'STRSTARTS' }),
  STRENDS: createKeyword({ name: 'STRENDS' }),
  STRBEFORE: createKeyword({ name: 'STRBEFORE' }),
  STRAFTER: createKeyword({ name: 'STRAFTER' }),
  YEAR: createKeyword({ name: 'YEAR' }),
  MONTH: createKeyword({ name: 'MONTH' }),
  DAY: createKeyword({ name: 'DAY' }),
  HOURS: createKeyword({ name: 'HOURS' }),
  MINUTES: createKeyword({ name: 'MINUTES' }),
  SECONDS: createKeyword({ name: 'SECONDS' }),
  TIMEZONE: createKeyword({ name: 'TIMEZONE' }),
  TZ: createKeyword({ name: 'TZ' }),
  NOW: createKeyword({ name: 'NOW' }),
  UUID: createKeyword({ name: 'UUID' }),
  STRUUID: createKeyword({ name: 'STRUUID' }),
  MD5: createKeyword({ name: 'MD5' }),
  SHA1: createKeyword({ name: 'SHA1' }),
  SHA256: createKeyword({ name: 'SHA256' }),
  SHA384: createKeyword({ name: 'SHA384' }),
  SHA512: createKeyword({ name: 'SHA512' }),
  COALESCE: createKeyword({ name: 'COALESCE' }),
  IF: createKeyword({ name: 'IF' }),
  STRLANG: createKeyword({ name: 'STRLANG' }),
  STRDT: createKeyword({ name: 'STRDT' }),
  sameTerm: createKeyword({ name: 'sameTerm' }),
  isIRI: createKeyword({ name: 'isIRI' }),
  isURI: createKeyword({ name: 'isURI' }),
  isBLANK: createKeyword({ name: 'isBLANK' }),
  isLITERAL: createKeyword({ name: 'isLITERAL' }),
  isNUMERIC: createKeyword({ name: 'isNUMERIC' }),
  REGEX: createKeyword({ name: 'REGEX' }),
  SUBSTR: createKeyword({ name: 'SUBSTR' }),
  REPLACE: createKeyword({ name: 'REPLACE' }),
  EXISTS: createKeyword({ name: 'EXISTS' }),
  NOT_EXISTS: createKeyword({
    name: 'NOT_EXISTS',
    pattern: /NOT EXISTS/i,
  }),
  COUNT: createKeyword({ name: 'COUNT' }),
  SUM: createKeyword({ name: 'SUM' }),
  MIN: createKeyword({ name: 'MIN' }),
  AVG: createKeyword({ name: 'AVG' }),
  SAMPLE: createKeyword({ name: 'SAMPLE' }),
  GROUP_CONCAT: createKeyword({ name: 'GROUP_CONCAT' }),
  SEPARATOR: createKeyword({ name: 'SEPARATOR' }),
  TRUE: createKeyword({ name: 'TRUE' }),
  FALSE: createKeyword({ name: 'FALSE' }),
  IN: createKeyword({ name: 'IN' }),
  NOT_IN: createKeyword({
    name: 'NOT_IN',
    pattern: /NOT IN/i,
  }),
  MAX_LENGTH: createKeyword({
    name: 'MAX_LENGTH',
    pattern: /MAX LENGTH/i,
  }),
  MAX: createKeyword({ name: 'MAX' }),

  UNKNOWN,
};
